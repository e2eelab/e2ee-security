// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/sender_chain_node.proto

#include "skissm/sender_chain_node.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {
constexpr sender_chain_node::sender_chain_node(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ratchet_key_pair_(nullptr)
  , chain_key_(nullptr){}
struct sender_chain_nodeDefaultTypeInternal {
  constexpr sender_chain_nodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~sender_chain_nodeDefaultTypeInternal() {}
  union {
    sender_chain_node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT sender_chain_nodeDefaultTypeInternal _sender_chain_node_default_instance_;
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skissm_2fsender_5fchain_5fnode_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skissm_2fsender_5fchain_5fnode_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fsender_5fchain_5fnode_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_skissm_2fsender_5fchain_5fnode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::sender_chain_node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::sender_chain_node, ratchet_key_pair_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::sender_chain_node, chain_key_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::e2eelab::skissm::proto::sender_chain_node)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::e2eelab::skissm::proto::_sender_chain_node_default_instance_),
};

const char descriptor_table_protodef_skissm_2fsender_5fchain_5fnode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036skissm/sender_chain_node.proto\022\030org.e2"
  "eelab.skissm.proto\032\025skissm/key_pair.prot"
  "o\032\026skissm/chain_key.proto\"\211\001\n\021sender_cha"
  "in_node\022<\n\020ratchet_key_pair\030\001 \001(\0132\".org."
  "e2eelab.skissm.proto.key_pair\0226\n\tchain_k"
  "ey\030\002 \001(\0132#.org.e2eelab.skissm.proto.chai"
  "n_keyB\021B\017SenderChainNodeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skissm_2fsender_5fchain_5fnode_2eproto_deps[2] = {
  &::descriptor_table_skissm_2fchain_5fkey_2eproto,
  &::descriptor_table_skissm_2fkey_5fpair_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fsender_5fchain_5fnode_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fsender_5fchain_5fnode_2eproto = {
  false, false, 272, descriptor_table_protodef_skissm_2fsender_5fchain_5fnode_2eproto, "skissm/sender_chain_node.proto", 
  &descriptor_table_skissm_2fsender_5fchain_5fnode_2eproto_once, descriptor_table_skissm_2fsender_5fchain_5fnode_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_skissm_2fsender_5fchain_5fnode_2eproto::offsets,
  file_level_metadata_skissm_2fsender_5fchain_5fnode_2eproto, file_level_enum_descriptors_skissm_2fsender_5fchain_5fnode_2eproto, file_level_service_descriptors_skissm_2fsender_5fchain_5fnode_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fsender_5fchain_5fnode_2eproto_getter() {
  return &descriptor_table_skissm_2fsender_5fchain_5fnode_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fsender_5fchain_5fnode_2eproto(&descriptor_table_skissm_2fsender_5fchain_5fnode_2eproto);
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {

// ===================================================================

class sender_chain_node::_Internal {
 public:
  static const ::org::e2eelab::skissm::proto::key_pair& ratchet_key_pair(const sender_chain_node* msg);
  static const ::org::e2eelab::skissm::proto::chain_key& chain_key(const sender_chain_node* msg);
};

const ::org::e2eelab::skissm::proto::key_pair&
sender_chain_node::_Internal::ratchet_key_pair(const sender_chain_node* msg) {
  return *msg->ratchet_key_pair_;
}
const ::org::e2eelab::skissm::proto::chain_key&
sender_chain_node::_Internal::chain_key(const sender_chain_node* msg) {
  return *msg->chain_key_;
}
void sender_chain_node::clear_ratchet_key_pair() {
  if (GetArenaForAllocation() == nullptr && ratchet_key_pair_ != nullptr) {
    delete ratchet_key_pair_;
  }
  ratchet_key_pair_ = nullptr;
}
void sender_chain_node::clear_chain_key() {
  if (GetArenaForAllocation() == nullptr && chain_key_ != nullptr) {
    delete chain_key_;
  }
  chain_key_ = nullptr;
}
sender_chain_node::sender_chain_node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:org.e2eelab.skissm.proto.sender_chain_node)
}
sender_chain_node::sender_chain_node(const sender_chain_node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ratchet_key_pair()) {
    ratchet_key_pair_ = new ::org::e2eelab::skissm::proto::key_pair(*from.ratchet_key_pair_);
  } else {
    ratchet_key_pair_ = nullptr;
  }
  if (from._internal_has_chain_key()) {
    chain_key_ = new ::org::e2eelab::skissm::proto::chain_key(*from.chain_key_);
  } else {
    chain_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.e2eelab.skissm.proto.sender_chain_node)
}

inline void sender_chain_node::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ratchet_key_pair_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chain_key_) -
    reinterpret_cast<char*>(&ratchet_key_pair_)) + sizeof(chain_key_));
}

sender_chain_node::~sender_chain_node() {
  // @@protoc_insertion_point(destructor:org.e2eelab.skissm.proto.sender_chain_node)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void sender_chain_node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ratchet_key_pair_;
  if (this != internal_default_instance()) delete chain_key_;
}

void sender_chain_node::ArenaDtor(void* object) {
  sender_chain_node* _this = reinterpret_cast< sender_chain_node* >(object);
  (void)_this;
}
void sender_chain_node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sender_chain_node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void sender_chain_node::Clear() {
// @@protoc_insertion_point(message_clear_start:org.e2eelab.skissm.proto.sender_chain_node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ratchet_key_pair_ != nullptr) {
    delete ratchet_key_pair_;
  }
  ratchet_key_pair_ = nullptr;
  if (GetArenaForAllocation() == nullptr && chain_key_ != nullptr) {
    delete chain_key_;
  }
  chain_key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sender_chain_node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .org.e2eelab.skissm.proto.key_pair ratchet_key_pair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ratchet_key_pair(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.e2eelab.skissm.proto.chain_key chain_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chain_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sender_chain_node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.e2eelab.skissm.proto.sender_chain_node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.e2eelab.skissm.proto.key_pair ratchet_key_pair = 1;
  if (this->_internal_has_ratchet_key_pair()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ratchet_key_pair(this), target, stream);
  }

  // .org.e2eelab.skissm.proto.chain_key chain_key = 2;
  if (this->_internal_has_chain_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chain_key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.e2eelab.skissm.proto.sender_chain_node)
  return target;
}

size_t sender_chain_node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.e2eelab.skissm.proto.sender_chain_node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.e2eelab.skissm.proto.key_pair ratchet_key_pair = 1;
  if (this->_internal_has_ratchet_key_pair()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ratchet_key_pair_);
  }

  // .org.e2eelab.skissm.proto.chain_key chain_key = 2;
  if (this->_internal_has_chain_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chain_key_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData sender_chain_node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    sender_chain_node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*sender_chain_node::GetClassData() const { return &_class_data_; }

void sender_chain_node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<sender_chain_node *>(to)->MergeFrom(
      static_cast<const sender_chain_node &>(from));
}


void sender_chain_node::MergeFrom(const sender_chain_node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.e2eelab.skissm.proto.sender_chain_node)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ratchet_key_pair()) {
    _internal_mutable_ratchet_key_pair()->::org::e2eelab::skissm::proto::key_pair::MergeFrom(from._internal_ratchet_key_pair());
  }
  if (from._internal_has_chain_key()) {
    _internal_mutable_chain_key()->::org::e2eelab::skissm::proto::chain_key::MergeFrom(from._internal_chain_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void sender_chain_node::CopyFrom(const sender_chain_node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.e2eelab.skissm.proto.sender_chain_node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sender_chain_node::IsInitialized() const {
  return true;
}

void sender_chain_node::InternalSwap(sender_chain_node* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sender_chain_node, chain_key_)
      + sizeof(sender_chain_node::chain_key_)
      - PROTOBUF_FIELD_OFFSET(sender_chain_node, ratchet_key_pair_)>(
          reinterpret_cast<char*>(&ratchet_key_pair_),
          reinterpret_cast<char*>(&other->ratchet_key_pair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sender_chain_node::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fsender_5fchain_5fnode_2eproto_getter, &descriptor_table_skissm_2fsender_5fchain_5fnode_2eproto_once,
      file_level_metadata_skissm_2fsender_5fchain_5fnode_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::e2eelab::skissm::proto::sender_chain_node* Arena::CreateMaybeMessage< ::org::e2eelab::skissm::proto::sender_chain_node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::e2eelab::skissm::proto::sender_chain_node >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
