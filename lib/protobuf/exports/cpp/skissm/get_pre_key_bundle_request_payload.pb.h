// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/get_pre_key_bundle_request_payload.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skissm_2fget_5fpre_5fkey_5fbundle_5frequest_5fpayload_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skissm_2fget_5fpre_5fkey_5fbundle_5frequest_5fpayload_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "skissm/e2ee_address.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skissm_2fget_5fpre_5fkey_5fbundle_5frequest_5fpayload_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skissm_2fget_5fpre_5fkey_5fbundle_5frequest_5fpayload_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fget_5fpre_5fkey_5fbundle_5frequest_5fpayload_2eproto;
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {
class get_pre_key_bundle_request_payload;
struct get_pre_key_bundle_request_payloadDefaultTypeInternal;
extern get_pre_key_bundle_request_payloadDefaultTypeInternal _get_pre_key_bundle_request_payload_default_instance_;
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::e2eelab::skissm::proto::get_pre_key_bundle_request_payload* Arena::CreateMaybeMessage<::org::e2eelab::skissm::proto::get_pre_key_bundle_request_payload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {

// ===================================================================

class get_pre_key_bundle_request_payload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.e2eelab.skissm.proto.get_pre_key_bundle_request_payload) */ {
 public:
  inline get_pre_key_bundle_request_payload() : get_pre_key_bundle_request_payload(nullptr) {}
  ~get_pre_key_bundle_request_payload() override;
  explicit constexpr get_pre_key_bundle_request_payload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_pre_key_bundle_request_payload(const get_pre_key_bundle_request_payload& from);
  get_pre_key_bundle_request_payload(get_pre_key_bundle_request_payload&& from) noexcept
    : get_pre_key_bundle_request_payload() {
    *this = ::std::move(from);
  }

  inline get_pre_key_bundle_request_payload& operator=(const get_pre_key_bundle_request_payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_pre_key_bundle_request_payload& operator=(get_pre_key_bundle_request_payload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_pre_key_bundle_request_payload& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_pre_key_bundle_request_payload* internal_default_instance() {
    return reinterpret_cast<const get_pre_key_bundle_request_payload*>(
               &_get_pre_key_bundle_request_payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(get_pre_key_bundle_request_payload& a, get_pre_key_bundle_request_payload& b) {
    a.Swap(&b);
  }
  inline void Swap(get_pre_key_bundle_request_payload* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_pre_key_bundle_request_payload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_pre_key_bundle_request_payload* New() const final {
    return new get_pre_key_bundle_request_payload();
  }

  get_pre_key_bundle_request_payload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_pre_key_bundle_request_payload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_pre_key_bundle_request_payload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_pre_key_bundle_request_payload& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_pre_key_bundle_request_payload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.e2eelab.skissm.proto.get_pre_key_bundle_request_payload";
  }
  protected:
  explicit get_pre_key_bundle_request_payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerAddressFieldNumber = 1,
  };
  // .org.e2eelab.skissm.proto.e2ee_address peer_address = 1;
  bool has_peer_address() const;
  private:
  bool _internal_has_peer_address() const;
  public:
  void clear_peer_address();
  const ::org::e2eelab::skissm::proto::e2ee_address& peer_address() const;
  PROTOBUF_MUST_USE_RESULT ::org::e2eelab::skissm::proto::e2ee_address* release_peer_address();
  ::org::e2eelab::skissm::proto::e2ee_address* mutable_peer_address();
  void set_allocated_peer_address(::org::e2eelab::skissm::proto::e2ee_address* peer_address);
  private:
  const ::org::e2eelab::skissm::proto::e2ee_address& _internal_peer_address() const;
  ::org::e2eelab::skissm::proto::e2ee_address* _internal_mutable_peer_address();
  public:
  void unsafe_arena_set_allocated_peer_address(
      ::org::e2eelab::skissm::proto::e2ee_address* peer_address);
  ::org::e2eelab::skissm::proto::e2ee_address* unsafe_arena_release_peer_address();

  // @@protoc_insertion_point(class_scope:org.e2eelab.skissm.proto.get_pre_key_bundle_request_payload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::org::e2eelab::skissm::proto::e2ee_address* peer_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skissm_2fget_5fpre_5fkey_5fbundle_5frequest_5fpayload_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// get_pre_key_bundle_request_payload

// .org.e2eelab.skissm.proto.e2ee_address peer_address = 1;
inline bool get_pre_key_bundle_request_payload::_internal_has_peer_address() const {
  return this != internal_default_instance() && peer_address_ != nullptr;
}
inline bool get_pre_key_bundle_request_payload::has_peer_address() const {
  return _internal_has_peer_address();
}
inline const ::org::e2eelab::skissm::proto::e2ee_address& get_pre_key_bundle_request_payload::_internal_peer_address() const {
  const ::org::e2eelab::skissm::proto::e2ee_address* p = peer_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::e2eelab::skissm::proto::e2ee_address&>(
      ::org::e2eelab::skissm::proto::_e2ee_address_default_instance_);
}
inline const ::org::e2eelab::skissm::proto::e2ee_address& get_pre_key_bundle_request_payload::peer_address() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.get_pre_key_bundle_request_payload.peer_address)
  return _internal_peer_address();
}
inline void get_pre_key_bundle_request_payload::unsafe_arena_set_allocated_peer_address(
    ::org::e2eelab::skissm::proto::e2ee_address* peer_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_address_);
  }
  peer_address_ = peer_address;
  if (peer_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.e2eelab.skissm.proto.get_pre_key_bundle_request_payload.peer_address)
}
inline ::org::e2eelab::skissm::proto::e2ee_address* get_pre_key_bundle_request_payload::release_peer_address() {
  
  ::org::e2eelab::skissm::proto::e2ee_address* temp = peer_address_;
  peer_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::org::e2eelab::skissm::proto::e2ee_address* get_pre_key_bundle_request_payload::unsafe_arena_release_peer_address() {
  // @@protoc_insertion_point(field_release:org.e2eelab.skissm.proto.get_pre_key_bundle_request_payload.peer_address)
  
  ::org::e2eelab::skissm::proto::e2ee_address* temp = peer_address_;
  peer_address_ = nullptr;
  return temp;
}
inline ::org::e2eelab::skissm::proto::e2ee_address* get_pre_key_bundle_request_payload::_internal_mutable_peer_address() {
  
  if (peer_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::e2eelab::skissm::proto::e2ee_address>(GetArenaForAllocation());
    peer_address_ = p;
  }
  return peer_address_;
}
inline ::org::e2eelab::skissm::proto::e2ee_address* get_pre_key_bundle_request_payload::mutable_peer_address() {
  ::org::e2eelab::skissm::proto::e2ee_address* _msg = _internal_mutable_peer_address();
  // @@protoc_insertion_point(field_mutable:org.e2eelab.skissm.proto.get_pre_key_bundle_request_payload.peer_address)
  return _msg;
}
inline void get_pre_key_bundle_request_payload::set_allocated_peer_address(::org::e2eelab::skissm::proto::e2ee_address* peer_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_address_);
  }
  if (peer_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_address));
    if (message_arena != submessage_arena) {
      peer_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_address, submessage_arena);
    }
    
  } else {
    
  }
  peer_address_ = peer_address;
  // @@protoc_insertion_point(field_set_allocated:org.e2eelab.skissm.proto.get_pre_key_bundle_request_payload.peer_address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skissm_2fget_5fpre_5fkey_5fbundle_5frequest_5fpayload_2eproto
