// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/e2ee_account.proto

#include "skissm/e2ee_account.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {
constexpr e2ee_account::e2ee_account(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : one_time_pre_keys_()
  , account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(nullptr)
  , identity_key_pair_(nullptr)
  , signed_pre_key_pair_(nullptr)
  , version_(0u)
  , saved_(false)
  , next_signed_pre_key_id_(0u)
  , next_one_time_pre_key_id_(0u){}
struct e2ee_accountDefaultTypeInternal {
  constexpr e2ee_accountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~e2ee_accountDefaultTypeInternal() {}
  union {
    e2ee_account _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT e2ee_accountDefaultTypeInternal _e2ee_account_default_instance_;
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skissm_2fe2ee_5faccount_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skissm_2fe2ee_5faccount_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fe2ee_5faccount_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_skissm_2fe2ee_5faccount_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_account, version_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_account, account_id_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_account, saved_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_account, address_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_account, identity_key_pair_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_account, signed_pre_key_pair_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_account, one_time_pre_keys_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_account, next_signed_pre_key_id_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_account, next_one_time_pre_key_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::e2eelab::skissm::proto::e2ee_account)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::e2eelab::skissm::proto::_e2ee_account_default_instance_),
};

const char descriptor_table_protodef_skissm_2fe2ee_5faccount_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031skissm/e2ee_account.proto\022\030org.e2eelab"
  ".skissm.proto\032\031skissm/e2ee_address.proto"
  "\032\025skissm/key_pair.proto\032 skissm/signed_p"
  "re_key_pair.proto\032\"skissm/one_time_pre_k"
  "ey_pair.proto\"\224\003\n\014e2ee_account\022\017\n\007versio"
  "n\030\001 \001(\r\022\022\n\naccount_id\030\002 \001(\014\022\r\n\005saved\030\003 \001"
  "(\010\0227\n\007address\030\004 \001(\0132&.org.e2eelab.skissm"
  ".proto.e2ee_address\022=\n\021identity_key_pair"
  "\030\005 \001(\0132\".org.e2eelab.skissm.proto.key_pa"
  "ir\022J\n\023signed_pre_key_pair\030\006 \001(\0132-.org.e2"
  "eelab.skissm.proto.signed_pre_key_pair\022J"
  "\n\021one_time_pre_keys\030\007 \003(\0132/.org.e2eelab."
  "skissm.proto.one_time_pre_key_pair\022\036\n\026ne"
  "xt_signed_pre_key_id\030\010 \001(\r\022 \n\030next_one_t"
  "ime_pre_key_id\030\t \001(\rB\rB\013E2eeAccountb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skissm_2fe2ee_5faccount_2eproto_deps[4] = {
  &::descriptor_table_skissm_2fe2ee_5faddress_2eproto,
  &::descriptor_table_skissm_2fkey_5fpair_2eproto,
  &::descriptor_table_skissm_2fone_5ftime_5fpre_5fkey_5fpair_2eproto,
  &::descriptor_table_skissm_2fsigned_5fpre_5fkey_5fpair_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fe2ee_5faccount_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fe2ee_5faccount_2eproto = {
  false, false, 603, descriptor_table_protodef_skissm_2fe2ee_5faccount_2eproto, "skissm/e2ee_account.proto", 
  &descriptor_table_skissm_2fe2ee_5faccount_2eproto_once, descriptor_table_skissm_2fe2ee_5faccount_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_skissm_2fe2ee_5faccount_2eproto::offsets,
  file_level_metadata_skissm_2fe2ee_5faccount_2eproto, file_level_enum_descriptors_skissm_2fe2ee_5faccount_2eproto, file_level_service_descriptors_skissm_2fe2ee_5faccount_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fe2ee_5faccount_2eproto_getter() {
  return &descriptor_table_skissm_2fe2ee_5faccount_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fe2ee_5faccount_2eproto(&descriptor_table_skissm_2fe2ee_5faccount_2eproto);
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {

// ===================================================================

class e2ee_account::_Internal {
 public:
  static const ::org::e2eelab::skissm::proto::e2ee_address& address(const e2ee_account* msg);
  static const ::org::e2eelab::skissm::proto::key_pair& identity_key_pair(const e2ee_account* msg);
  static const ::org::e2eelab::skissm::proto::signed_pre_key_pair& signed_pre_key_pair(const e2ee_account* msg);
};

const ::org::e2eelab::skissm::proto::e2ee_address&
e2ee_account::_Internal::address(const e2ee_account* msg) {
  return *msg->address_;
}
const ::org::e2eelab::skissm::proto::key_pair&
e2ee_account::_Internal::identity_key_pair(const e2ee_account* msg) {
  return *msg->identity_key_pair_;
}
const ::org::e2eelab::skissm::proto::signed_pre_key_pair&
e2ee_account::_Internal::signed_pre_key_pair(const e2ee_account* msg) {
  return *msg->signed_pre_key_pair_;
}
void e2ee_account::clear_address() {
  if (GetArenaForAllocation() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
void e2ee_account::clear_identity_key_pair() {
  if (GetArenaForAllocation() == nullptr && identity_key_pair_ != nullptr) {
    delete identity_key_pair_;
  }
  identity_key_pair_ = nullptr;
}
void e2ee_account::clear_signed_pre_key_pair() {
  if (GetArenaForAllocation() == nullptr && signed_pre_key_pair_ != nullptr) {
    delete signed_pre_key_pair_;
  }
  signed_pre_key_pair_ = nullptr;
}
void e2ee_account::clear_one_time_pre_keys() {
  one_time_pre_keys_.Clear();
}
e2ee_account::e2ee_account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  one_time_pre_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:org.e2eelab.skissm.proto.e2ee_account)
}
e2ee_account::e2ee_account(const e2ee_account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      one_time_pre_keys_(from.one_time_pre_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_address()) {
    address_ = new ::org::e2eelab::skissm::proto::e2ee_address(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from._internal_has_identity_key_pair()) {
    identity_key_pair_ = new ::org::e2eelab::skissm::proto::key_pair(*from.identity_key_pair_);
  } else {
    identity_key_pair_ = nullptr;
  }
  if (from._internal_has_signed_pre_key_pair()) {
    signed_pre_key_pair_ = new ::org::e2eelab::skissm::proto::signed_pre_key_pair(*from.signed_pre_key_pair_);
  } else {
    signed_pre_key_pair_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_one_time_pre_key_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(next_one_time_pre_key_id_));
  // @@protoc_insertion_point(copy_constructor:org.e2eelab.skissm.proto.e2ee_account)
}

inline void e2ee_account::SharedCtor() {
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&next_one_time_pre_key_id_) -
    reinterpret_cast<char*>(&address_)) + sizeof(next_one_time_pre_key_id_));
}

e2ee_account::~e2ee_account() {
  // @@protoc_insertion_point(destructor:org.e2eelab.skissm.proto.e2ee_account)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void e2ee_account::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete identity_key_pair_;
  if (this != internal_default_instance()) delete signed_pre_key_pair_;
}

void e2ee_account::ArenaDtor(void* object) {
  e2ee_account* _this = reinterpret_cast< e2ee_account* >(object);
  (void)_this;
}
void e2ee_account::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void e2ee_account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void e2ee_account::Clear() {
// @@protoc_insertion_point(message_clear_start:org.e2eelab.skissm.proto.e2ee_account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  one_time_pre_keys_.Clear();
  account_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && identity_key_pair_ != nullptr) {
    delete identity_key_pair_;
  }
  identity_key_pair_ = nullptr;
  if (GetArenaForAllocation() == nullptr && signed_pre_key_pair_ != nullptr) {
    delete signed_pre_key_pair_;
  }
  signed_pre_key_pair_ = nullptr;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_one_time_pre_key_id_) -
      reinterpret_cast<char*>(&version_)) + sizeof(next_one_time_pre_key_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* e2ee_account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool saved = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          saved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.e2eelab.skissm.proto.e2ee_address address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.e2eelab.skissm.proto.key_pair identity_key_pair = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_identity_key_pair(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.e2eelab.skissm.proto.signed_pre_key_pair signed_pre_key_pair = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_signed_pre_key_pair(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .org.e2eelab.skissm.proto.one_time_pre_key_pair one_time_pre_keys = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_one_time_pre_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 next_signed_pre_key_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          next_signed_pre_key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 next_one_time_pre_key_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          next_one_time_pre_key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* e2ee_account::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.e2eelab.skissm.proto.e2ee_account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // bytes account_id = 2;
  if (!this->_internal_account_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_account_id(), target);
  }

  // bool saved = 3;
  if (this->_internal_saved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_saved(), target);
  }

  // .org.e2eelab.skissm.proto.e2ee_address address = 4;
  if (this->_internal_has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::address(this), target, stream);
  }

  // .org.e2eelab.skissm.proto.key_pair identity_key_pair = 5;
  if (this->_internal_has_identity_key_pair()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::identity_key_pair(this), target, stream);
  }

  // .org.e2eelab.skissm.proto.signed_pre_key_pair signed_pre_key_pair = 6;
  if (this->_internal_has_signed_pre_key_pair()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::signed_pre_key_pair(this), target, stream);
  }

  // repeated .org.e2eelab.skissm.proto.one_time_pre_key_pair one_time_pre_keys = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_one_time_pre_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_one_time_pre_keys(i), target, stream);
  }

  // uint32 next_signed_pre_key_id = 8;
  if (this->_internal_next_signed_pre_key_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_next_signed_pre_key_id(), target);
  }

  // uint32 next_one_time_pre_key_id = 9;
  if (this->_internal_next_one_time_pre_key_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_next_one_time_pre_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.e2eelab.skissm.proto.e2ee_account)
  return target;
}

size_t e2ee_account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.e2eelab.skissm.proto.e2ee_account)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.e2eelab.skissm.proto.one_time_pre_key_pair one_time_pre_keys = 7;
  total_size += 1UL * this->_internal_one_time_pre_keys_size();
  for (const auto& msg : this->one_time_pre_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes account_id = 2;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account_id());
  }

  // .org.e2eelab.skissm.proto.e2ee_address address = 4;
  if (this->_internal_has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // .org.e2eelab.skissm.proto.key_pair identity_key_pair = 5;
  if (this->_internal_has_identity_key_pair()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identity_key_pair_);
  }

  // .org.e2eelab.skissm.proto.signed_pre_key_pair signed_pre_key_pair = 6;
  if (this->_internal_has_signed_pre_key_pair()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signed_pre_key_pair_);
  }

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // bool saved = 3;
  if (this->_internal_saved() != 0) {
    total_size += 1 + 1;
  }

  // uint32 next_signed_pre_key_id = 8;
  if (this->_internal_next_signed_pre_key_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_next_signed_pre_key_id());
  }

  // uint32 next_one_time_pre_key_id = 9;
  if (this->_internal_next_one_time_pre_key_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_next_one_time_pre_key_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData e2ee_account::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    e2ee_account::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*e2ee_account::GetClassData() const { return &_class_data_; }

void e2ee_account::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<e2ee_account *>(to)->MergeFrom(
      static_cast<const e2ee_account &>(from));
}


void e2ee_account::MergeFrom(const e2ee_account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.e2eelab.skissm.proto.e2ee_account)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  one_time_pre_keys_.MergeFrom(from.one_time_pre_keys_);
  if (!from._internal_account_id().empty()) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_has_address()) {
    _internal_mutable_address()->::org::e2eelab::skissm::proto::e2ee_address::MergeFrom(from._internal_address());
  }
  if (from._internal_has_identity_key_pair()) {
    _internal_mutable_identity_key_pair()->::org::e2eelab::skissm::proto::key_pair::MergeFrom(from._internal_identity_key_pair());
  }
  if (from._internal_has_signed_pre_key_pair()) {
    _internal_mutable_signed_pre_key_pair()->::org::e2eelab::skissm::proto::signed_pre_key_pair::MergeFrom(from._internal_signed_pre_key_pair());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_saved() != 0) {
    _internal_set_saved(from._internal_saved());
  }
  if (from._internal_next_signed_pre_key_id() != 0) {
    _internal_set_next_signed_pre_key_id(from._internal_next_signed_pre_key_id());
  }
  if (from._internal_next_one_time_pre_key_id() != 0) {
    _internal_set_next_one_time_pre_key_id(from._internal_next_one_time_pre_key_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void e2ee_account::CopyFrom(const e2ee_account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.e2eelab.skissm.proto.e2ee_account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool e2ee_account::IsInitialized() const {
  return true;
}

void e2ee_account::InternalSwap(e2ee_account* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  one_time_pre_keys_.InternalSwap(&other->one_time_pre_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_id_, GetArenaForAllocation(),
      &other->account_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(e2ee_account, next_one_time_pre_key_id_)
      + sizeof(e2ee_account::next_one_time_pre_key_id_)
      - PROTOBUF_FIELD_OFFSET(e2ee_account, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata e2ee_account::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fe2ee_5faccount_2eproto_getter, &descriptor_table_skissm_2fe2ee_5faccount_2eproto_once,
      file_level_metadata_skissm_2fe2ee_5faccount_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::e2eelab::skissm::proto::e2ee_account* Arena::CreateMaybeMessage< ::org::e2eelab::skissm::proto::e2ee_account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::e2eelab::skissm::proto::e2ee_account >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
