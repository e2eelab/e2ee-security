// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/e2ee_account.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skissm_2fe2ee_5faccount_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skissm_2fe2ee_5faccount_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "skissm/e2ee_address.pb.h"
#include "skissm/key_pair.pb.h"
#include "skissm/signed_pre_key_pair.pb.h"
#include "skissm/one_time_pre_key_pair.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skissm_2fe2ee_5faccount_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skissm_2fe2ee_5faccount_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fe2ee_5faccount_2eproto;
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {
class e2ee_account;
struct e2ee_accountDefaultTypeInternal;
extern e2ee_accountDefaultTypeInternal _e2ee_account_default_instance_;
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::e2eelab::skissm::proto::e2ee_account* Arena::CreateMaybeMessage<::org::e2eelab::skissm::proto::e2ee_account>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {

// ===================================================================

class e2ee_account final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.e2eelab.skissm.proto.e2ee_account) */ {
 public:
  inline e2ee_account() : e2ee_account(nullptr) {}
  ~e2ee_account() override;
  explicit constexpr e2ee_account(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  e2ee_account(const e2ee_account& from);
  e2ee_account(e2ee_account&& from) noexcept
    : e2ee_account() {
    *this = ::std::move(from);
  }

  inline e2ee_account& operator=(const e2ee_account& from) {
    CopyFrom(from);
    return *this;
  }
  inline e2ee_account& operator=(e2ee_account&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const e2ee_account& default_instance() {
    return *internal_default_instance();
  }
  static inline const e2ee_account* internal_default_instance() {
    return reinterpret_cast<const e2ee_account*>(
               &_e2ee_account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(e2ee_account& a, e2ee_account& b) {
    a.Swap(&b);
  }
  inline void Swap(e2ee_account* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(e2ee_account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline e2ee_account* New() const final {
    return new e2ee_account();
  }

  e2ee_account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<e2ee_account>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const e2ee_account& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const e2ee_account& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(e2ee_account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.e2eelab.skissm.proto.e2ee_account";
  }
  protected:
  explicit e2ee_account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOneTimePreKeysFieldNumber = 7,
    kAccountIdFieldNumber = 2,
    kAddressFieldNumber = 4,
    kIdentityKeyPairFieldNumber = 5,
    kSignedPreKeyPairFieldNumber = 6,
    kVersionFieldNumber = 1,
    kSavedFieldNumber = 3,
    kNextSignedPreKeyIdFieldNumber = 8,
    kNextOneTimePreKeyIdFieldNumber = 9,
  };
  // repeated .org.e2eelab.skissm.proto.one_time_pre_key_pair one_time_pre_keys = 7;
  int one_time_pre_keys_size() const;
  private:
  int _internal_one_time_pre_keys_size() const;
  public:
  void clear_one_time_pre_keys();
  ::org::e2eelab::skissm::proto::one_time_pre_key_pair* mutable_one_time_pre_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::e2eelab::skissm::proto::one_time_pre_key_pair >*
      mutable_one_time_pre_keys();
  private:
  const ::org::e2eelab::skissm::proto::one_time_pre_key_pair& _internal_one_time_pre_keys(int index) const;
  ::org::e2eelab::skissm::proto::one_time_pre_key_pair* _internal_add_one_time_pre_keys();
  public:
  const ::org::e2eelab::skissm::proto::one_time_pre_key_pair& one_time_pre_keys(int index) const;
  ::org::e2eelab::skissm::proto::one_time_pre_key_pair* add_one_time_pre_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::e2eelab::skissm::proto::one_time_pre_key_pair >&
      one_time_pre_keys() const;

  // bytes account_id = 2;
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // .org.e2eelab.skissm.proto.e2ee_address address = 4;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::org::e2eelab::skissm::proto::e2ee_address& address() const;
  PROTOBUF_MUST_USE_RESULT ::org::e2eelab::skissm::proto::e2ee_address* release_address();
  ::org::e2eelab::skissm::proto::e2ee_address* mutable_address();
  void set_allocated_address(::org::e2eelab::skissm::proto::e2ee_address* address);
  private:
  const ::org::e2eelab::skissm::proto::e2ee_address& _internal_address() const;
  ::org::e2eelab::skissm::proto::e2ee_address* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::org::e2eelab::skissm::proto::e2ee_address* address);
  ::org::e2eelab::skissm::proto::e2ee_address* unsafe_arena_release_address();

  // .org.e2eelab.skissm.proto.key_pair identity_key_pair = 5;
  bool has_identity_key_pair() const;
  private:
  bool _internal_has_identity_key_pair() const;
  public:
  void clear_identity_key_pair();
  const ::org::e2eelab::skissm::proto::key_pair& identity_key_pair() const;
  PROTOBUF_MUST_USE_RESULT ::org::e2eelab::skissm::proto::key_pair* release_identity_key_pair();
  ::org::e2eelab::skissm::proto::key_pair* mutable_identity_key_pair();
  void set_allocated_identity_key_pair(::org::e2eelab::skissm::proto::key_pair* identity_key_pair);
  private:
  const ::org::e2eelab::skissm::proto::key_pair& _internal_identity_key_pair() const;
  ::org::e2eelab::skissm::proto::key_pair* _internal_mutable_identity_key_pair();
  public:
  void unsafe_arena_set_allocated_identity_key_pair(
      ::org::e2eelab::skissm::proto::key_pair* identity_key_pair);
  ::org::e2eelab::skissm::proto::key_pair* unsafe_arena_release_identity_key_pair();

  // .org.e2eelab.skissm.proto.signed_pre_key_pair signed_pre_key_pair = 6;
  bool has_signed_pre_key_pair() const;
  private:
  bool _internal_has_signed_pre_key_pair() const;
  public:
  void clear_signed_pre_key_pair();
  const ::org::e2eelab::skissm::proto::signed_pre_key_pair& signed_pre_key_pair() const;
  PROTOBUF_MUST_USE_RESULT ::org::e2eelab::skissm::proto::signed_pre_key_pair* release_signed_pre_key_pair();
  ::org::e2eelab::skissm::proto::signed_pre_key_pair* mutable_signed_pre_key_pair();
  void set_allocated_signed_pre_key_pair(::org::e2eelab::skissm::proto::signed_pre_key_pair* signed_pre_key_pair);
  private:
  const ::org::e2eelab::skissm::proto::signed_pre_key_pair& _internal_signed_pre_key_pair() const;
  ::org::e2eelab::skissm::proto::signed_pre_key_pair* _internal_mutable_signed_pre_key_pair();
  public:
  void unsafe_arena_set_allocated_signed_pre_key_pair(
      ::org::e2eelab::skissm::proto::signed_pre_key_pair* signed_pre_key_pair);
  ::org::e2eelab::skissm::proto::signed_pre_key_pair* unsafe_arena_release_signed_pre_key_pair();

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool saved = 3;
  void clear_saved();
  bool saved() const;
  void set_saved(bool value);
  private:
  bool _internal_saved() const;
  void _internal_set_saved(bool value);
  public:

  // uint32 next_signed_pre_key_id = 8;
  void clear_next_signed_pre_key_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 next_signed_pre_key_id() const;
  void set_next_signed_pre_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_next_signed_pre_key_id() const;
  void _internal_set_next_signed_pre_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 next_one_time_pre_key_id = 9;
  void clear_next_one_time_pre_key_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 next_one_time_pre_key_id() const;
  void set_next_one_time_pre_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_next_one_time_pre_key_id() const;
  void _internal_set_next_one_time_pre_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:org.e2eelab.skissm.proto.e2ee_account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::e2eelab::skissm::proto::one_time_pre_key_pair > one_time_pre_keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::org::e2eelab::skissm::proto::e2ee_address* address_;
  ::org::e2eelab::skissm::proto::key_pair* identity_key_pair_;
  ::org::e2eelab::skissm::proto::signed_pre_key_pair* signed_pre_key_pair_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  bool saved_;
  ::PROTOBUF_NAMESPACE_ID::uint32 next_signed_pre_key_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 next_one_time_pre_key_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skissm_2fe2ee_5faccount_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// e2ee_account

// uint32 version = 1;
inline void e2ee_account::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 e2ee_account::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 e2ee_account::version() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.e2ee_account.version)
  return _internal_version();
}
inline void e2ee_account::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void e2ee_account::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:org.e2eelab.skissm.proto.e2ee_account.version)
}

// bytes account_id = 2;
inline void e2ee_account::clear_account_id() {
  account_id_.ClearToEmpty();
}
inline const std::string& e2ee_account::account_id() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.e2ee_account.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void e2ee_account::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 account_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.e2eelab.skissm.proto.e2ee_account.account_id)
}
inline std::string* e2ee_account::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:org.e2eelab.skissm.proto.e2ee_account.account_id)
  return _s;
}
inline const std::string& e2ee_account::_internal_account_id() const {
  return account_id_.Get();
}
inline void e2ee_account::_internal_set_account_id(const std::string& value) {
  
  account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* e2ee_account::_internal_mutable_account_id() {
  
  return account_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* e2ee_account::release_account_id() {
  // @@protoc_insertion_point(field_release:org.e2eelab.skissm.proto.e2ee_account.account_id)
  return account_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void e2ee_account::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.e2eelab.skissm.proto.e2ee_account.account_id)
}

// bool saved = 3;
inline void e2ee_account::clear_saved() {
  saved_ = false;
}
inline bool e2ee_account::_internal_saved() const {
  return saved_;
}
inline bool e2ee_account::saved() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.e2ee_account.saved)
  return _internal_saved();
}
inline void e2ee_account::_internal_set_saved(bool value) {
  
  saved_ = value;
}
inline void e2ee_account::set_saved(bool value) {
  _internal_set_saved(value);
  // @@protoc_insertion_point(field_set:org.e2eelab.skissm.proto.e2ee_account.saved)
}

// .org.e2eelab.skissm.proto.e2ee_address address = 4;
inline bool e2ee_account::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool e2ee_account::has_address() const {
  return _internal_has_address();
}
inline const ::org::e2eelab::skissm::proto::e2ee_address& e2ee_account::_internal_address() const {
  const ::org::e2eelab::skissm::proto::e2ee_address* p = address_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::e2eelab::skissm::proto::e2ee_address&>(
      ::org::e2eelab::skissm::proto::_e2ee_address_default_instance_);
}
inline const ::org::e2eelab::skissm::proto::e2ee_address& e2ee_account::address() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.e2ee_account.address)
  return _internal_address();
}
inline void e2ee_account::unsafe_arena_set_allocated_address(
    ::org::e2eelab::skissm::proto::e2ee_address* address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.e2eelab.skissm.proto.e2ee_account.address)
}
inline ::org::e2eelab::skissm::proto::e2ee_address* e2ee_account::release_address() {
  
  ::org::e2eelab::skissm::proto::e2ee_address* temp = address_;
  address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::org::e2eelab::skissm::proto::e2ee_address* e2ee_account::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:org.e2eelab.skissm.proto.e2ee_account.address)
  
  ::org::e2eelab::skissm::proto::e2ee_address* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::org::e2eelab::skissm::proto::e2ee_address* e2ee_account::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::e2eelab::skissm::proto::e2ee_address>(GetArenaForAllocation());
    address_ = p;
  }
  return address_;
}
inline ::org::e2eelab::skissm::proto::e2ee_address* e2ee_account::mutable_address() {
  ::org::e2eelab::skissm::proto::e2ee_address* _msg = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:org.e2eelab.skissm.proto.e2ee_account.address)
  return _msg;
}
inline void e2ee_account::set_allocated_address(::org::e2eelab::skissm::proto::e2ee_address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address));
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:org.e2eelab.skissm.proto.e2ee_account.address)
}

// .org.e2eelab.skissm.proto.key_pair identity_key_pair = 5;
inline bool e2ee_account::_internal_has_identity_key_pair() const {
  return this != internal_default_instance() && identity_key_pair_ != nullptr;
}
inline bool e2ee_account::has_identity_key_pair() const {
  return _internal_has_identity_key_pair();
}
inline const ::org::e2eelab::skissm::proto::key_pair& e2ee_account::_internal_identity_key_pair() const {
  const ::org::e2eelab::skissm::proto::key_pair* p = identity_key_pair_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::e2eelab::skissm::proto::key_pair&>(
      ::org::e2eelab::skissm::proto::_key_pair_default_instance_);
}
inline const ::org::e2eelab::skissm::proto::key_pair& e2ee_account::identity_key_pair() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.e2ee_account.identity_key_pair)
  return _internal_identity_key_pair();
}
inline void e2ee_account::unsafe_arena_set_allocated_identity_key_pair(
    ::org::e2eelab::skissm::proto::key_pair* identity_key_pair) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identity_key_pair_);
  }
  identity_key_pair_ = identity_key_pair;
  if (identity_key_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.e2eelab.skissm.proto.e2ee_account.identity_key_pair)
}
inline ::org::e2eelab::skissm::proto::key_pair* e2ee_account::release_identity_key_pair() {
  
  ::org::e2eelab::skissm::proto::key_pair* temp = identity_key_pair_;
  identity_key_pair_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::org::e2eelab::skissm::proto::key_pair* e2ee_account::unsafe_arena_release_identity_key_pair() {
  // @@protoc_insertion_point(field_release:org.e2eelab.skissm.proto.e2ee_account.identity_key_pair)
  
  ::org::e2eelab::skissm::proto::key_pair* temp = identity_key_pair_;
  identity_key_pair_ = nullptr;
  return temp;
}
inline ::org::e2eelab::skissm::proto::key_pair* e2ee_account::_internal_mutable_identity_key_pair() {
  
  if (identity_key_pair_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::e2eelab::skissm::proto::key_pair>(GetArenaForAllocation());
    identity_key_pair_ = p;
  }
  return identity_key_pair_;
}
inline ::org::e2eelab::skissm::proto::key_pair* e2ee_account::mutable_identity_key_pair() {
  ::org::e2eelab::skissm::proto::key_pair* _msg = _internal_mutable_identity_key_pair();
  // @@protoc_insertion_point(field_mutable:org.e2eelab.skissm.proto.e2ee_account.identity_key_pair)
  return _msg;
}
inline void e2ee_account::set_allocated_identity_key_pair(::org::e2eelab::skissm::proto::key_pair* identity_key_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(identity_key_pair_);
  }
  if (identity_key_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identity_key_pair));
    if (message_arena != submessage_arena) {
      identity_key_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identity_key_pair, submessage_arena);
    }
    
  } else {
    
  }
  identity_key_pair_ = identity_key_pair;
  // @@protoc_insertion_point(field_set_allocated:org.e2eelab.skissm.proto.e2ee_account.identity_key_pair)
}

// .org.e2eelab.skissm.proto.signed_pre_key_pair signed_pre_key_pair = 6;
inline bool e2ee_account::_internal_has_signed_pre_key_pair() const {
  return this != internal_default_instance() && signed_pre_key_pair_ != nullptr;
}
inline bool e2ee_account::has_signed_pre_key_pair() const {
  return _internal_has_signed_pre_key_pair();
}
inline const ::org::e2eelab::skissm::proto::signed_pre_key_pair& e2ee_account::_internal_signed_pre_key_pair() const {
  const ::org::e2eelab::skissm::proto::signed_pre_key_pair* p = signed_pre_key_pair_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::e2eelab::skissm::proto::signed_pre_key_pair&>(
      ::org::e2eelab::skissm::proto::_signed_pre_key_pair_default_instance_);
}
inline const ::org::e2eelab::skissm::proto::signed_pre_key_pair& e2ee_account::signed_pre_key_pair() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.e2ee_account.signed_pre_key_pair)
  return _internal_signed_pre_key_pair();
}
inline void e2ee_account::unsafe_arena_set_allocated_signed_pre_key_pair(
    ::org::e2eelab::skissm::proto::signed_pre_key_pair* signed_pre_key_pair) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signed_pre_key_pair_);
  }
  signed_pre_key_pair_ = signed_pre_key_pair;
  if (signed_pre_key_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.e2eelab.skissm.proto.e2ee_account.signed_pre_key_pair)
}
inline ::org::e2eelab::skissm::proto::signed_pre_key_pair* e2ee_account::release_signed_pre_key_pair() {
  
  ::org::e2eelab::skissm::proto::signed_pre_key_pair* temp = signed_pre_key_pair_;
  signed_pre_key_pair_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::org::e2eelab::skissm::proto::signed_pre_key_pair* e2ee_account::unsafe_arena_release_signed_pre_key_pair() {
  // @@protoc_insertion_point(field_release:org.e2eelab.skissm.proto.e2ee_account.signed_pre_key_pair)
  
  ::org::e2eelab::skissm::proto::signed_pre_key_pair* temp = signed_pre_key_pair_;
  signed_pre_key_pair_ = nullptr;
  return temp;
}
inline ::org::e2eelab::skissm::proto::signed_pre_key_pair* e2ee_account::_internal_mutable_signed_pre_key_pair() {
  
  if (signed_pre_key_pair_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::e2eelab::skissm::proto::signed_pre_key_pair>(GetArenaForAllocation());
    signed_pre_key_pair_ = p;
  }
  return signed_pre_key_pair_;
}
inline ::org::e2eelab::skissm::proto::signed_pre_key_pair* e2ee_account::mutable_signed_pre_key_pair() {
  ::org::e2eelab::skissm::proto::signed_pre_key_pair* _msg = _internal_mutable_signed_pre_key_pair();
  // @@protoc_insertion_point(field_mutable:org.e2eelab.skissm.proto.e2ee_account.signed_pre_key_pair)
  return _msg;
}
inline void e2ee_account::set_allocated_signed_pre_key_pair(::org::e2eelab::skissm::proto::signed_pre_key_pair* signed_pre_key_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signed_pre_key_pair_);
  }
  if (signed_pre_key_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signed_pre_key_pair));
    if (message_arena != submessage_arena) {
      signed_pre_key_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signed_pre_key_pair, submessage_arena);
    }
    
  } else {
    
  }
  signed_pre_key_pair_ = signed_pre_key_pair;
  // @@protoc_insertion_point(field_set_allocated:org.e2eelab.skissm.proto.e2ee_account.signed_pre_key_pair)
}

// repeated .org.e2eelab.skissm.proto.one_time_pre_key_pair one_time_pre_keys = 7;
inline int e2ee_account::_internal_one_time_pre_keys_size() const {
  return one_time_pre_keys_.size();
}
inline int e2ee_account::one_time_pre_keys_size() const {
  return _internal_one_time_pre_keys_size();
}
inline ::org::e2eelab::skissm::proto::one_time_pre_key_pair* e2ee_account::mutable_one_time_pre_keys(int index) {
  // @@protoc_insertion_point(field_mutable:org.e2eelab.skissm.proto.e2ee_account.one_time_pre_keys)
  return one_time_pre_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::e2eelab::skissm::proto::one_time_pre_key_pair >*
e2ee_account::mutable_one_time_pre_keys() {
  // @@protoc_insertion_point(field_mutable_list:org.e2eelab.skissm.proto.e2ee_account.one_time_pre_keys)
  return &one_time_pre_keys_;
}
inline const ::org::e2eelab::skissm::proto::one_time_pre_key_pair& e2ee_account::_internal_one_time_pre_keys(int index) const {
  return one_time_pre_keys_.Get(index);
}
inline const ::org::e2eelab::skissm::proto::one_time_pre_key_pair& e2ee_account::one_time_pre_keys(int index) const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.e2ee_account.one_time_pre_keys)
  return _internal_one_time_pre_keys(index);
}
inline ::org::e2eelab::skissm::proto::one_time_pre_key_pair* e2ee_account::_internal_add_one_time_pre_keys() {
  return one_time_pre_keys_.Add();
}
inline ::org::e2eelab::skissm::proto::one_time_pre_key_pair* e2ee_account::add_one_time_pre_keys() {
  ::org::e2eelab::skissm::proto::one_time_pre_key_pair* _add = _internal_add_one_time_pre_keys();
  // @@protoc_insertion_point(field_add:org.e2eelab.skissm.proto.e2ee_account.one_time_pre_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::e2eelab::skissm::proto::one_time_pre_key_pair >&
e2ee_account::one_time_pre_keys() const {
  // @@protoc_insertion_point(field_list:org.e2eelab.skissm.proto.e2ee_account.one_time_pre_keys)
  return one_time_pre_keys_;
}

// uint32 next_signed_pre_key_id = 8;
inline void e2ee_account::clear_next_signed_pre_key_id() {
  next_signed_pre_key_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 e2ee_account::_internal_next_signed_pre_key_id() const {
  return next_signed_pre_key_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 e2ee_account::next_signed_pre_key_id() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.e2ee_account.next_signed_pre_key_id)
  return _internal_next_signed_pre_key_id();
}
inline void e2ee_account::_internal_set_next_signed_pre_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  next_signed_pre_key_id_ = value;
}
inline void e2ee_account::set_next_signed_pre_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_next_signed_pre_key_id(value);
  // @@protoc_insertion_point(field_set:org.e2eelab.skissm.proto.e2ee_account.next_signed_pre_key_id)
}

// uint32 next_one_time_pre_key_id = 9;
inline void e2ee_account::clear_next_one_time_pre_key_id() {
  next_one_time_pre_key_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 e2ee_account::_internal_next_one_time_pre_key_id() const {
  return next_one_time_pre_key_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 e2ee_account::next_one_time_pre_key_id() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.e2ee_account.next_one_time_pre_key_id)
  return _internal_next_one_time_pre_key_id();
}
inline void e2ee_account::_internal_set_next_one_time_pre_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  next_one_time_pre_key_id_ = value;
}
inline void e2ee_account::set_next_one_time_pre_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_next_one_time_pre_key_id(value);
  // @@protoc_insertion_point(field_set:org.e2eelab.skissm.proto.e2ee_account.next_one_time_pre_key_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skissm_2fe2ee_5faccount_2eproto
