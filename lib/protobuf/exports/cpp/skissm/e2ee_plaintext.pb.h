// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/e2ee_plaintext.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skissm_2fe2ee_5fplaintext_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skissm_2fe2ee_5fplaintext_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "skissm/e2ee_plaintext_type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skissm_2fe2ee_5fplaintext_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skissm_2fe2ee_5fplaintext_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fe2ee_5fplaintext_2eproto;
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {
class e2ee_plaintext;
struct e2ee_plaintextDefaultTypeInternal;
extern e2ee_plaintextDefaultTypeInternal _e2ee_plaintext_default_instance_;
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::e2eelab::skissm::proto::e2ee_plaintext* Arena::CreateMaybeMessage<::org::e2eelab::skissm::proto::e2ee_plaintext>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {

// ===================================================================

class e2ee_plaintext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.e2eelab.skissm.proto.e2ee_plaintext) */ {
 public:
  inline e2ee_plaintext() : e2ee_plaintext(nullptr) {}
  ~e2ee_plaintext() override;
  explicit constexpr e2ee_plaintext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  e2ee_plaintext(const e2ee_plaintext& from);
  e2ee_plaintext(e2ee_plaintext&& from) noexcept
    : e2ee_plaintext() {
    *this = ::std::move(from);
  }

  inline e2ee_plaintext& operator=(const e2ee_plaintext& from) {
    CopyFrom(from);
    return *this;
  }
  inline e2ee_plaintext& operator=(e2ee_plaintext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const e2ee_plaintext& default_instance() {
    return *internal_default_instance();
  }
  static inline const e2ee_plaintext* internal_default_instance() {
    return reinterpret_cast<const e2ee_plaintext*>(
               &_e2ee_plaintext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(e2ee_plaintext& a, e2ee_plaintext& b) {
    a.Swap(&b);
  }
  inline void Swap(e2ee_plaintext* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(e2ee_plaintext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline e2ee_plaintext* New() const final {
    return new e2ee_plaintext();
  }

  e2ee_plaintext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<e2ee_plaintext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const e2ee_plaintext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const e2ee_plaintext& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(e2ee_plaintext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.e2eelab.skissm.proto.e2ee_plaintext";
  }
  protected:
  explicit e2ee_plaintext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 3,
    kVersionFieldNumber = 1,
    kPlaintextTypeFieldNumber = 2,
  };
  // bytes payload = 3;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_MUST_USE_RESULT std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .org.e2eelab.skissm.proto.e2ee_plaintext_type plaintext_type = 2;
  void clear_plaintext_type();
  ::org::e2eelab::skissm::proto::e2ee_plaintext_type plaintext_type() const;
  void set_plaintext_type(::org::e2eelab::skissm::proto::e2ee_plaintext_type value);
  private:
  ::org::e2eelab::skissm::proto::e2ee_plaintext_type _internal_plaintext_type() const;
  void _internal_set_plaintext_type(::org::e2eelab::skissm::proto::e2ee_plaintext_type value);
  public:

  // @@protoc_insertion_point(class_scope:org.e2eelab.skissm.proto.e2ee_plaintext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  int plaintext_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skissm_2fe2ee_5fplaintext_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// e2ee_plaintext

// uint32 version = 1;
inline void e2ee_plaintext::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 e2ee_plaintext::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 e2ee_plaintext::version() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.e2ee_plaintext.version)
  return _internal_version();
}
inline void e2ee_plaintext::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void e2ee_plaintext::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:org.e2eelab.skissm.proto.e2ee_plaintext.version)
}

// .org.e2eelab.skissm.proto.e2ee_plaintext_type plaintext_type = 2;
inline void e2ee_plaintext::clear_plaintext_type() {
  plaintext_type_ = 0;
}
inline ::org::e2eelab::skissm::proto::e2ee_plaintext_type e2ee_plaintext::_internal_plaintext_type() const {
  return static_cast< ::org::e2eelab::skissm::proto::e2ee_plaintext_type >(plaintext_type_);
}
inline ::org::e2eelab::skissm::proto::e2ee_plaintext_type e2ee_plaintext::plaintext_type() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.e2ee_plaintext.plaintext_type)
  return _internal_plaintext_type();
}
inline void e2ee_plaintext::_internal_set_plaintext_type(::org::e2eelab::skissm::proto::e2ee_plaintext_type value) {
  
  plaintext_type_ = value;
}
inline void e2ee_plaintext::set_plaintext_type(::org::e2eelab::skissm::proto::e2ee_plaintext_type value) {
  _internal_set_plaintext_type(value);
  // @@protoc_insertion_point(field_set:org.e2eelab.skissm.proto.e2ee_plaintext.plaintext_type)
}

// bytes payload = 3;
inline void e2ee_plaintext::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& e2ee_plaintext::payload() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.e2ee_plaintext.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void e2ee_plaintext::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.e2eelab.skissm.proto.e2ee_plaintext.payload)
}
inline std::string* e2ee_plaintext::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:org.e2eelab.skissm.proto.e2ee_plaintext.payload)
  return _s;
}
inline const std::string& e2ee_plaintext::_internal_payload() const {
  return payload_.Get();
}
inline void e2ee_plaintext::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* e2ee_plaintext::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* e2ee_plaintext::release_payload() {
  // @@protoc_insertion_point(field_release:org.e2eelab.skissm.proto.e2ee_plaintext.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void e2ee_plaintext::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.e2eelab.skissm.proto.e2ee_plaintext.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skissm_2fe2ee_5fplaintext_2eproto
