// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/e2ee_commands.proto

#include "skissm/e2ee_commands.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_skissm_2fe2ee_5fcommands_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fe2ee_5fcommands_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_skissm_2fe2ee_5fcommands_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_skissm_2fe2ee_5fcommands_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032skissm/e2ee_commands.proto\022\030org.e2eela"
  "b.skissm.proto*\201\005\n\re2ee_commands\022\031\n\025regi"
  "ster_user_request\020\000\022\033\n\026register_user_res"
  "ponse\020\201 \022\027\n\023delete_user_request\020\002\022\031\n\024del"
  "ete_user_response\020\203 \022\026\n\022get_pre_key_bund"
  "le\020\004\022 \n\033get_pre_key_bundle_response\020\205 \022\027"
  "\n\023publish_spk_request\020\006\022\031\n\024publish_spk_r"
  "esponse\020\207 \022\027\n\023supply_opks_request\020\010\022\031\n\024s"
  "upply_opks_response\020\211 \022\030\n\024create_group_r"
  "equest\020\n\022\032\n\025create_group_response\020\213 \022\025\n\021"
  "get_group_request\020\014\022\027\n\022get_group_respons"
  "e\020\215 \022\035\n\031add_group_members_request\020\016\022\037\n\032a"
  "dd_group_members_response\020\217 \022 \n\034remove_g"
  "roup_members_request\020\020\022\"\n\035remove_group_m"
  "embers_response\020\221 \022\034\n\030send_one2one_msg_r"
  "equest\020\022\022\036\n\031send_one2one_msg_response\020\223 "
  "\022\032\n\026send_group_msg_request\020\024\022\034\n\027send_gro"
  "up_msg_response\020\225 B\016B\014E2eeCommandsb\006prot"
  "o3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fe2ee_5fcommands_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fe2ee_5fcommands_2eproto = {
  false, false, 722, descriptor_table_protodef_skissm_2fe2ee_5fcommands_2eproto, "skissm/e2ee_commands.proto", 
  &descriptor_table_skissm_2fe2ee_5fcommands_2eproto_once, nullptr, 0, 0,
  schemas, file_default_instances, TableStruct_skissm_2fe2ee_5fcommands_2eproto::offsets,
  nullptr, file_level_enum_descriptors_skissm_2fe2ee_5fcommands_2eproto, file_level_service_descriptors_skissm_2fe2ee_5fcommands_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fe2ee_5fcommands_2eproto_getter() {
  return &descriptor_table_skissm_2fe2ee_5fcommands_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fe2ee_5fcommands_2eproto(&descriptor_table_skissm_2fe2ee_5fcommands_2eproto);
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* e2ee_commands_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_skissm_2fe2ee_5fcommands_2eproto);
  return file_level_enum_descriptors_skissm_2fe2ee_5fcommands_2eproto[0];
}
bool e2ee_commands_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
    case 6:
    case 8:
    case 10:
    case 12:
    case 14:
    case 16:
    case 18:
    case 20:
    case 4097:
    case 4099:
    case 4101:
    case 4103:
    case 4105:
    case 4107:
    case 4109:
    case 4111:
    case 4113:
    case 4115:
    case 4117:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
