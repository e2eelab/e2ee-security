// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/signed_pre_key_pair.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skissm_2fsigned_5fpre_5fkey_5fpair_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skissm_2fsigned_5fpre_5fkey_5fpair_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "skissm/key_pair.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skissm_2fsigned_5fpre_5fkey_5fpair_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skissm_2fsigned_5fpre_5fkey_5fpair_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fsigned_5fpre_5fkey_5fpair_2eproto;
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {
class signed_pre_key_pair;
struct signed_pre_key_pairDefaultTypeInternal;
extern signed_pre_key_pairDefaultTypeInternal _signed_pre_key_pair_default_instance_;
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::e2eelab::skissm::proto::signed_pre_key_pair* Arena::CreateMaybeMessage<::org::e2eelab::skissm::proto::signed_pre_key_pair>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {

// ===================================================================

class signed_pre_key_pair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.e2eelab.skissm.proto.signed_pre_key_pair) */ {
 public:
  inline signed_pre_key_pair() : signed_pre_key_pair(nullptr) {}
  ~signed_pre_key_pair() override;
  explicit constexpr signed_pre_key_pair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  signed_pre_key_pair(const signed_pre_key_pair& from);
  signed_pre_key_pair(signed_pre_key_pair&& from) noexcept
    : signed_pre_key_pair() {
    *this = ::std::move(from);
  }

  inline signed_pre_key_pair& operator=(const signed_pre_key_pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline signed_pre_key_pair& operator=(signed_pre_key_pair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const signed_pre_key_pair& default_instance() {
    return *internal_default_instance();
  }
  static inline const signed_pre_key_pair* internal_default_instance() {
    return reinterpret_cast<const signed_pre_key_pair*>(
               &_signed_pre_key_pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(signed_pre_key_pair& a, signed_pre_key_pair& b) {
    a.Swap(&b);
  }
  inline void Swap(signed_pre_key_pair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(signed_pre_key_pair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline signed_pre_key_pair* New() const final {
    return new signed_pre_key_pair();
  }

  signed_pre_key_pair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<signed_pre_key_pair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const signed_pre_key_pair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const signed_pre_key_pair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(signed_pre_key_pair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.e2eelab.skissm.proto.signed_pre_key_pair";
  }
  protected:
  explicit signed_pre_key_pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 3,
    kKeyPairFieldNumber = 2,
    kTtlFieldNumber = 4,
    kSpkIdFieldNumber = 1,
  };
  // bytes signature = 3;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_MUST_USE_RESULT std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .org.e2eelab.skissm.proto.key_pair key_pair = 2;
  bool has_key_pair() const;
  private:
  bool _internal_has_key_pair() const;
  public:
  void clear_key_pair();
  const ::org::e2eelab::skissm::proto::key_pair& key_pair() const;
  PROTOBUF_MUST_USE_RESULT ::org::e2eelab::skissm::proto::key_pair* release_key_pair();
  ::org::e2eelab::skissm::proto::key_pair* mutable_key_pair();
  void set_allocated_key_pair(::org::e2eelab::skissm::proto::key_pair* key_pair);
  private:
  const ::org::e2eelab::skissm::proto::key_pair& _internal_key_pair() const;
  ::org::e2eelab::skissm::proto::key_pair* _internal_mutable_key_pair();
  public:
  void unsafe_arena_set_allocated_key_pair(
      ::org::e2eelab::skissm::proto::key_pair* key_pair);
  ::org::e2eelab::skissm::proto::key_pair* unsafe_arena_release_key_pair();

  // int64 ttl = 4;
  void clear_ttl();
  ::PROTOBUF_NAMESPACE_ID::int64 ttl() const;
  void set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ttl() const;
  void _internal_set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 spk_id = 1;
  void clear_spk_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 spk_id() const;
  void set_spk_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spk_id() const;
  void _internal_set_spk_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:org.e2eelab.skissm.proto.signed_pre_key_pair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::org::e2eelab::skissm::proto::key_pair* key_pair_;
  ::PROTOBUF_NAMESPACE_ID::int64 ttl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spk_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skissm_2fsigned_5fpre_5fkey_5fpair_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// signed_pre_key_pair

// uint32 spk_id = 1;
inline void signed_pre_key_pair::clear_spk_id() {
  spk_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 signed_pre_key_pair::_internal_spk_id() const {
  return spk_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 signed_pre_key_pair::spk_id() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.signed_pre_key_pair.spk_id)
  return _internal_spk_id();
}
inline void signed_pre_key_pair::_internal_set_spk_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  spk_id_ = value;
}
inline void signed_pre_key_pair::set_spk_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spk_id(value);
  // @@protoc_insertion_point(field_set:org.e2eelab.skissm.proto.signed_pre_key_pair.spk_id)
}

// .org.e2eelab.skissm.proto.key_pair key_pair = 2;
inline bool signed_pre_key_pair::_internal_has_key_pair() const {
  return this != internal_default_instance() && key_pair_ != nullptr;
}
inline bool signed_pre_key_pair::has_key_pair() const {
  return _internal_has_key_pair();
}
inline const ::org::e2eelab::skissm::proto::key_pair& signed_pre_key_pair::_internal_key_pair() const {
  const ::org::e2eelab::skissm::proto::key_pair* p = key_pair_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::e2eelab::skissm::proto::key_pair&>(
      ::org::e2eelab::skissm::proto::_key_pair_default_instance_);
}
inline const ::org::e2eelab::skissm::proto::key_pair& signed_pre_key_pair::key_pair() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.signed_pre_key_pair.key_pair)
  return _internal_key_pair();
}
inline void signed_pre_key_pair::unsafe_arena_set_allocated_key_pair(
    ::org::e2eelab::skissm::proto::key_pair* key_pair) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_pair_);
  }
  key_pair_ = key_pair;
  if (key_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.e2eelab.skissm.proto.signed_pre_key_pair.key_pair)
}
inline ::org::e2eelab::skissm::proto::key_pair* signed_pre_key_pair::release_key_pair() {
  
  ::org::e2eelab::skissm::proto::key_pair* temp = key_pair_;
  key_pair_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::org::e2eelab::skissm::proto::key_pair* signed_pre_key_pair::unsafe_arena_release_key_pair() {
  // @@protoc_insertion_point(field_release:org.e2eelab.skissm.proto.signed_pre_key_pair.key_pair)
  
  ::org::e2eelab::skissm::proto::key_pair* temp = key_pair_;
  key_pair_ = nullptr;
  return temp;
}
inline ::org::e2eelab::skissm::proto::key_pair* signed_pre_key_pair::_internal_mutable_key_pair() {
  
  if (key_pair_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::e2eelab::skissm::proto::key_pair>(GetArenaForAllocation());
    key_pair_ = p;
  }
  return key_pair_;
}
inline ::org::e2eelab::skissm::proto::key_pair* signed_pre_key_pair::mutable_key_pair() {
  ::org::e2eelab::skissm::proto::key_pair* _msg = _internal_mutable_key_pair();
  // @@protoc_insertion_point(field_mutable:org.e2eelab.skissm.proto.signed_pre_key_pair.key_pair)
  return _msg;
}
inline void signed_pre_key_pair::set_allocated_key_pair(::org::e2eelab::skissm::proto::key_pair* key_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_pair_);
  }
  if (key_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_pair));
    if (message_arena != submessage_arena) {
      key_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_pair, submessage_arena);
    }
    
  } else {
    
  }
  key_pair_ = key_pair;
  // @@protoc_insertion_point(field_set_allocated:org.e2eelab.skissm.proto.signed_pre_key_pair.key_pair)
}

// bytes signature = 3;
inline void signed_pre_key_pair::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& signed_pre_key_pair::signature() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.signed_pre_key_pair.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void signed_pre_key_pair::set_signature(ArgT0&& arg0, ArgT... args) {
 
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.e2eelab.skissm.proto.signed_pre_key_pair.signature)
}
inline std::string* signed_pre_key_pair::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:org.e2eelab.skissm.proto.signed_pre_key_pair.signature)
  return _s;
}
inline const std::string& signed_pre_key_pair::_internal_signature() const {
  return signature_.Get();
}
inline void signed_pre_key_pair::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* signed_pre_key_pair::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* signed_pre_key_pair::release_signature() {
  // @@protoc_insertion_point(field_release:org.e2eelab.skissm.proto.signed_pre_key_pair.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void signed_pre_key_pair::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.e2eelab.skissm.proto.signed_pre_key_pair.signature)
}

// int64 ttl = 4;
inline void signed_pre_key_pair::clear_ttl() {
  ttl_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 signed_pre_key_pair::_internal_ttl() const {
  return ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 signed_pre_key_pair::ttl() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.signed_pre_key_pair.ttl)
  return _internal_ttl();
}
inline void signed_pre_key_pair::_internal_set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ttl_ = value;
}
inline void signed_pre_key_pair::set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:org.e2eelab.skissm.proto.signed_pre_key_pair.ttl)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skissm_2fsigned_5fpre_5fkey_5fpair_2eproto
