// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/publish_spk_request_payload.proto

#include "skissm/publish_spk_request_payload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {
constexpr publish_spk_request_payload::publish_spk_request_payload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_address_(nullptr)
  , signed_pre_key_public_(nullptr){}
struct publish_spk_request_payloadDefaultTypeInternal {
  constexpr publish_spk_request_payloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~publish_spk_request_payloadDefaultTypeInternal() {}
  union {
    publish_spk_request_payload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT publish_spk_request_payloadDefaultTypeInternal _publish_spk_request_payload_default_instance_;
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::publish_spk_request_payload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::publish_spk_request_payload, user_address_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::publish_spk_request_payload, signed_pre_key_public_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::e2eelab::skissm::proto::publish_spk_request_payload)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::e2eelab::skissm::proto::_publish_spk_request_payload_default_instance_),
};

const char descriptor_table_protodef_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(skissm/publish_spk_request_payload.pro"
  "to\022\030org.e2eelab.skissm.proto\032\031skissm/e2e"
  "e_address.proto\032\"skissm/signed_pre_key_p"
  "ublic.proto\"\253\001\n\033publish_spk_request_payl"
  "oad\022<\n\014user_address\030\001 \001(\0132&.org.e2eelab."
  "skissm.proto.e2ee_address\022N\n\025signed_pre_"
  "key_public\030\002 \001(\0132/.org.e2eelab.skissm.pr"
  "oto.signed_pre_key_publicB\032B\030PublishSpkR"
  "equestPayloadb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto_deps[2] = {
  &::descriptor_table_skissm_2fe2ee_5faddress_2eproto,
  &::descriptor_table_skissm_2fsigned_5fpre_5fkey_5fpublic_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto = {
  false, false, 341, descriptor_table_protodef_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto, "skissm/publish_spk_request_payload.proto", 
  &descriptor_table_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto_once, descriptor_table_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto::offsets,
  file_level_metadata_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto, file_level_enum_descriptors_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto, file_level_service_descriptors_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto_getter() {
  return &descriptor_table_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto(&descriptor_table_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto);
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {

// ===================================================================

class publish_spk_request_payload::_Internal {
 public:
  static const ::org::e2eelab::skissm::proto::e2ee_address& user_address(const publish_spk_request_payload* msg);
  static const ::org::e2eelab::skissm::proto::signed_pre_key_public& signed_pre_key_public(const publish_spk_request_payload* msg);
};

const ::org::e2eelab::skissm::proto::e2ee_address&
publish_spk_request_payload::_Internal::user_address(const publish_spk_request_payload* msg) {
  return *msg->user_address_;
}
const ::org::e2eelab::skissm::proto::signed_pre_key_public&
publish_spk_request_payload::_Internal::signed_pre_key_public(const publish_spk_request_payload* msg) {
  return *msg->signed_pre_key_public_;
}
void publish_spk_request_payload::clear_user_address() {
  if (GetArenaForAllocation() == nullptr && user_address_ != nullptr) {
    delete user_address_;
  }
  user_address_ = nullptr;
}
void publish_spk_request_payload::clear_signed_pre_key_public() {
  if (GetArenaForAllocation() == nullptr && signed_pre_key_public_ != nullptr) {
    delete signed_pre_key_public_;
  }
  signed_pre_key_public_ = nullptr;
}
publish_spk_request_payload::publish_spk_request_payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:org.e2eelab.skissm.proto.publish_spk_request_payload)
}
publish_spk_request_payload::publish_spk_request_payload(const publish_spk_request_payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_address()) {
    user_address_ = new ::org::e2eelab::skissm::proto::e2ee_address(*from.user_address_);
  } else {
    user_address_ = nullptr;
  }
  if (from._internal_has_signed_pre_key_public()) {
    signed_pre_key_public_ = new ::org::e2eelab::skissm::proto::signed_pre_key_public(*from.signed_pre_key_public_);
  } else {
    signed_pre_key_public_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.e2eelab.skissm.proto.publish_spk_request_payload)
}

inline void publish_spk_request_payload::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signed_pre_key_public_) -
    reinterpret_cast<char*>(&user_address_)) + sizeof(signed_pre_key_public_));
}

publish_spk_request_payload::~publish_spk_request_payload() {
  // @@protoc_insertion_point(destructor:org.e2eelab.skissm.proto.publish_spk_request_payload)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void publish_spk_request_payload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_address_;
  if (this != internal_default_instance()) delete signed_pre_key_public_;
}

void publish_spk_request_payload::ArenaDtor(void* object) {
  publish_spk_request_payload* _this = reinterpret_cast< publish_spk_request_payload* >(object);
  (void)_this;
}
void publish_spk_request_payload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void publish_spk_request_payload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void publish_spk_request_payload::Clear() {
// @@protoc_insertion_point(message_clear_start:org.e2eelab.skissm.proto.publish_spk_request_payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_address_ != nullptr) {
    delete user_address_;
  }
  user_address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && signed_pre_key_public_ != nullptr) {
    delete signed_pre_key_public_;
  }
  signed_pre_key_public_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* publish_spk_request_payload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .org.e2eelab.skissm.proto.e2ee_address user_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.e2eelab.skissm.proto.signed_pre_key_public signed_pre_key_public = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signed_pre_key_public(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* publish_spk_request_payload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.e2eelab.skissm.proto.publish_spk_request_payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.e2eelab.skissm.proto.e2ee_address user_address = 1;
  if (this->_internal_has_user_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_address(this), target, stream);
  }

  // .org.e2eelab.skissm.proto.signed_pre_key_public signed_pre_key_public = 2;
  if (this->_internal_has_signed_pre_key_public()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signed_pre_key_public(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.e2eelab.skissm.proto.publish_spk_request_payload)
  return target;
}

size_t publish_spk_request_payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.e2eelab.skissm.proto.publish_spk_request_payload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.e2eelab.skissm.proto.e2ee_address user_address = 1;
  if (this->_internal_has_user_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_address_);
  }

  // .org.e2eelab.skissm.proto.signed_pre_key_public signed_pre_key_public = 2;
  if (this->_internal_has_signed_pre_key_public()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signed_pre_key_public_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData publish_spk_request_payload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    publish_spk_request_payload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*publish_spk_request_payload::GetClassData() const { return &_class_data_; }

void publish_spk_request_payload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<publish_spk_request_payload *>(to)->MergeFrom(
      static_cast<const publish_spk_request_payload &>(from));
}


void publish_spk_request_payload::MergeFrom(const publish_spk_request_payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.e2eelab.skissm.proto.publish_spk_request_payload)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_address()) {
    _internal_mutable_user_address()->::org::e2eelab::skissm::proto::e2ee_address::MergeFrom(from._internal_user_address());
  }
  if (from._internal_has_signed_pre_key_public()) {
    _internal_mutable_signed_pre_key_public()->::org::e2eelab::skissm::proto::signed_pre_key_public::MergeFrom(from._internal_signed_pre_key_public());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void publish_spk_request_payload::CopyFrom(const publish_spk_request_payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.e2eelab.skissm.proto.publish_spk_request_payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool publish_spk_request_payload::IsInitialized() const {
  return true;
}

void publish_spk_request_payload::InternalSwap(publish_spk_request_payload* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(publish_spk_request_payload, signed_pre_key_public_)
      + sizeof(publish_spk_request_payload::signed_pre_key_public_)
      - PROTOBUF_FIELD_OFFSET(publish_spk_request_payload, user_address_)>(
          reinterpret_cast<char*>(&user_address_),
          reinterpret_cast<char*>(&other->user_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata publish_spk_request_payload::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto_getter, &descriptor_table_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto_once,
      file_level_metadata_skissm_2fpublish_5fspk_5frequest_5fpayload_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::e2eelab::skissm::proto::publish_spk_request_payload* Arena::CreateMaybeMessage< ::org::e2eelab::skissm::proto::publish_spk_request_payload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::e2eelab::skissm::proto::publish_spk_request_payload >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
