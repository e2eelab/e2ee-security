// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/e2ee_msg_payload.proto

#include "skissm/e2ee_msg_payload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {
constexpr e2ee_msg_payload::e2ee_msg_payload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ciphertext_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ratchet_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sequence_(0u){}
struct e2ee_msg_payloadDefaultTypeInternal {
  constexpr e2ee_msg_payloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~e2ee_msg_payloadDefaultTypeInternal() {}
  union {
    e2ee_msg_payload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT e2ee_msg_payloadDefaultTypeInternal _e2ee_msg_payload_default_instance_;
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skissm_2fe2ee_5fmsg_5fpayload_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skissm_2fe2ee_5fmsg_5fpayload_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fe2ee_5fmsg_5fpayload_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_skissm_2fe2ee_5fmsg_5fpayload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_msg_payload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_msg_payload, sequence_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_msg_payload, ciphertext_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_msg_payload, ratchet_key_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::e2eelab::skissm::proto::e2ee_msg_payload)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::e2eelab::skissm::proto::_e2ee_msg_payload_default_instance_),
};

const char descriptor_table_protodef_skissm_2fe2ee_5fmsg_5fpayload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035skissm/e2ee_msg_payload.proto\022\030org.e2e"
  "elab.skissm.proto\"M\n\020e2ee_msg_payload\022\020\n"
  "\010sequence\030\001 \001(\r\022\022\n\nciphertext\030\002 \001(\014\022\023\n\013r"
  "atchet_key\030\003 \001(\014B\020B\016E2eeMsgPayloadb\006prot"
  "o3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fe2ee_5fmsg_5fpayload_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fe2ee_5fmsg_5fpayload_2eproto = {
  false, false, 162, descriptor_table_protodef_skissm_2fe2ee_5fmsg_5fpayload_2eproto, "skissm/e2ee_msg_payload.proto", 
  &descriptor_table_skissm_2fe2ee_5fmsg_5fpayload_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_skissm_2fe2ee_5fmsg_5fpayload_2eproto::offsets,
  file_level_metadata_skissm_2fe2ee_5fmsg_5fpayload_2eproto, file_level_enum_descriptors_skissm_2fe2ee_5fmsg_5fpayload_2eproto, file_level_service_descriptors_skissm_2fe2ee_5fmsg_5fpayload_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fe2ee_5fmsg_5fpayload_2eproto_getter() {
  return &descriptor_table_skissm_2fe2ee_5fmsg_5fpayload_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fe2ee_5fmsg_5fpayload_2eproto(&descriptor_table_skissm_2fe2ee_5fmsg_5fpayload_2eproto);
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {

// ===================================================================

class e2ee_msg_payload::_Internal {
 public:
};

e2ee_msg_payload::e2ee_msg_payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:org.e2eelab.skissm.proto.e2ee_msg_payload)
}
e2ee_msg_payload::e2ee_msg_payload(const e2ee_msg_payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ciphertext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ciphertext().empty()) {
    ciphertext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ciphertext(), 
      GetArenaForAllocation());
  }
  ratchet_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ratchet_key().empty()) {
    ratchet_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ratchet_key(), 
      GetArenaForAllocation());
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:org.e2eelab.skissm.proto.e2ee_msg_payload)
}

inline void e2ee_msg_payload::SharedCtor() {
ciphertext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ratchet_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sequence_ = 0u;
}

e2ee_msg_payload::~e2ee_msg_payload() {
  // @@protoc_insertion_point(destructor:org.e2eelab.skissm.proto.e2ee_msg_payload)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void e2ee_msg_payload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ciphertext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ratchet_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void e2ee_msg_payload::ArenaDtor(void* object) {
  e2ee_msg_payload* _this = reinterpret_cast< e2ee_msg_payload* >(object);
  (void)_this;
}
void e2ee_msg_payload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void e2ee_msg_payload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void e2ee_msg_payload::Clear() {
// @@protoc_insertion_point(message_clear_start:org.e2eelab.skissm.proto.e2ee_msg_payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ciphertext_.ClearToEmpty();
  ratchet_key_.ClearToEmpty();
  sequence_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* e2ee_msg_payload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ciphertext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ciphertext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ratchet_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ratchet_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* e2ee_msg_payload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.e2eelab.skissm.proto.e2ee_msg_payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sequence = 1;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sequence(), target);
  }

  // bytes ciphertext = 2;
  if (!this->_internal_ciphertext().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ciphertext(), target);
  }

  // bytes ratchet_key = 3;
  if (!this->_internal_ratchet_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ratchet_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.e2eelab.skissm.proto.e2ee_msg_payload)
  return target;
}

size_t e2ee_msg_payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.e2eelab.skissm.proto.e2ee_msg_payload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ciphertext = 2;
  if (!this->_internal_ciphertext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ciphertext());
  }

  // bytes ratchet_key = 3;
  if (!this->_internal_ratchet_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ratchet_key());
  }

  // uint32 sequence = 1;
  if (this->_internal_sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData e2ee_msg_payload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    e2ee_msg_payload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*e2ee_msg_payload::GetClassData() const { return &_class_data_; }

void e2ee_msg_payload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<e2ee_msg_payload *>(to)->MergeFrom(
      static_cast<const e2ee_msg_payload &>(from));
}


void e2ee_msg_payload::MergeFrom(const e2ee_msg_payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.e2eelab.skissm.proto.e2ee_msg_payload)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ciphertext().empty()) {
    _internal_set_ciphertext(from._internal_ciphertext());
  }
  if (!from._internal_ratchet_key().empty()) {
    _internal_set_ratchet_key(from._internal_ratchet_key());
  }
  if (from._internal_sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void e2ee_msg_payload::CopyFrom(const e2ee_msg_payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.e2eelab.skissm.proto.e2ee_msg_payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool e2ee_msg_payload::IsInitialized() const {
  return true;
}

void e2ee_msg_payload::InternalSwap(e2ee_msg_payload* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ciphertext_, GetArenaForAllocation(),
      &other->ciphertext_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ratchet_key_, GetArenaForAllocation(),
      &other->ratchet_key_, other->GetArenaForAllocation()
  );
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata e2ee_msg_payload::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fe2ee_5fmsg_5fpayload_2eproto_getter, &descriptor_table_skissm_2fe2ee_5fmsg_5fpayload_2eproto_once,
      file_level_metadata_skissm_2fe2ee_5fmsg_5fpayload_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::e2eelab::skissm::proto::e2ee_msg_payload* Arena::CreateMaybeMessage< ::org::e2eelab::skissm::proto::e2ee_msg_payload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::e2eelab::skissm::proto::e2ee_msg_payload >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
