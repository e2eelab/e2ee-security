// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/e2ee_pre_key_bundle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skissm_2fe2ee_5fpre_5fkey_5fbundle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skissm_2fe2ee_5fpre_5fkey_5fbundle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "skissm/e2ee_address.pb.h"
#include "skissm/signed_pre_key_public.pb.h"
#include "skissm/one_time_pre_key_public.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skissm_2fe2ee_5fpre_5fkey_5fbundle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skissm_2fe2ee_5fpre_5fkey_5fbundle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fe2ee_5fpre_5fkey_5fbundle_2eproto;
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {
class e2ee_pre_key_bundle;
struct e2ee_pre_key_bundleDefaultTypeInternal;
extern e2ee_pre_key_bundleDefaultTypeInternal _e2ee_pre_key_bundle_default_instance_;
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::e2eelab::skissm::proto::e2ee_pre_key_bundle* Arena::CreateMaybeMessage<::org::e2eelab::skissm::proto::e2ee_pre_key_bundle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {

// ===================================================================

class e2ee_pre_key_bundle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.e2eelab.skissm.proto.e2ee_pre_key_bundle) */ {
 public:
  inline e2ee_pre_key_bundle() : e2ee_pre_key_bundle(nullptr) {}
  ~e2ee_pre_key_bundle() override;
  explicit constexpr e2ee_pre_key_bundle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  e2ee_pre_key_bundle(const e2ee_pre_key_bundle& from);
  e2ee_pre_key_bundle(e2ee_pre_key_bundle&& from) noexcept
    : e2ee_pre_key_bundle() {
    *this = ::std::move(from);
  }

  inline e2ee_pre_key_bundle& operator=(const e2ee_pre_key_bundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline e2ee_pre_key_bundle& operator=(e2ee_pre_key_bundle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const e2ee_pre_key_bundle& default_instance() {
    return *internal_default_instance();
  }
  static inline const e2ee_pre_key_bundle* internal_default_instance() {
    return reinterpret_cast<const e2ee_pre_key_bundle*>(
               &_e2ee_pre_key_bundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(e2ee_pre_key_bundle& a, e2ee_pre_key_bundle& b) {
    a.Swap(&b);
  }
  inline void Swap(e2ee_pre_key_bundle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(e2ee_pre_key_bundle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline e2ee_pre_key_bundle* New() const final {
    return new e2ee_pre_key_bundle();
  }

  e2ee_pre_key_bundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<e2ee_pre_key_bundle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const e2ee_pre_key_bundle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const e2ee_pre_key_bundle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(e2ee_pre_key_bundle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.e2eelab.skissm.proto.e2ee_pre_key_bundle";
  }
  protected:
  explicit e2ee_pre_key_bundle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityKeyPublicFieldNumber = 2,
    kPeerAddressFieldNumber = 1,
    kSignedPreKeyPublicFieldNumber = 3,
    kOneTimePreKeyPublicFieldNumber = 4,
  };
  // bytes identity_key_public = 2;
  void clear_identity_key_public();
  const std::string& identity_key_public() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identity_key_public(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identity_key_public();
  PROTOBUF_MUST_USE_RESULT std::string* release_identity_key_public();
  void set_allocated_identity_key_public(std::string* identity_key_public);
  private:
  const std::string& _internal_identity_key_public() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identity_key_public(const std::string& value);
  std::string* _internal_mutable_identity_key_public();
  public:

  // .org.e2eelab.skissm.proto.e2ee_address peer_address = 1;
  bool has_peer_address() const;
  private:
  bool _internal_has_peer_address() const;
  public:
  void clear_peer_address();
  const ::org::e2eelab::skissm::proto::e2ee_address& peer_address() const;
  PROTOBUF_MUST_USE_RESULT ::org::e2eelab::skissm::proto::e2ee_address* release_peer_address();
  ::org::e2eelab::skissm::proto::e2ee_address* mutable_peer_address();
  void set_allocated_peer_address(::org::e2eelab::skissm::proto::e2ee_address* peer_address);
  private:
  const ::org::e2eelab::skissm::proto::e2ee_address& _internal_peer_address() const;
  ::org::e2eelab::skissm::proto::e2ee_address* _internal_mutable_peer_address();
  public:
  void unsafe_arena_set_allocated_peer_address(
      ::org::e2eelab::skissm::proto::e2ee_address* peer_address);
  ::org::e2eelab::skissm::proto::e2ee_address* unsafe_arena_release_peer_address();

  // .org.e2eelab.skissm.proto.signed_pre_key_public signed_pre_key_public = 3;
  bool has_signed_pre_key_public() const;
  private:
  bool _internal_has_signed_pre_key_public() const;
  public:
  void clear_signed_pre_key_public();
  const ::org::e2eelab::skissm::proto::signed_pre_key_public& signed_pre_key_public() const;
  PROTOBUF_MUST_USE_RESULT ::org::e2eelab::skissm::proto::signed_pre_key_public* release_signed_pre_key_public();
  ::org::e2eelab::skissm::proto::signed_pre_key_public* mutable_signed_pre_key_public();
  void set_allocated_signed_pre_key_public(::org::e2eelab::skissm::proto::signed_pre_key_public* signed_pre_key_public);
  private:
  const ::org::e2eelab::skissm::proto::signed_pre_key_public& _internal_signed_pre_key_public() const;
  ::org::e2eelab::skissm::proto::signed_pre_key_public* _internal_mutable_signed_pre_key_public();
  public:
  void unsafe_arena_set_allocated_signed_pre_key_public(
      ::org::e2eelab::skissm::proto::signed_pre_key_public* signed_pre_key_public);
  ::org::e2eelab::skissm::proto::signed_pre_key_public* unsafe_arena_release_signed_pre_key_public();

  // .org.e2eelab.skissm.proto.one_time_pre_key_public one_time_pre_key_public = 4;
  bool has_one_time_pre_key_public() const;
  private:
  bool _internal_has_one_time_pre_key_public() const;
  public:
  void clear_one_time_pre_key_public();
  const ::org::e2eelab::skissm::proto::one_time_pre_key_public& one_time_pre_key_public() const;
  PROTOBUF_MUST_USE_RESULT ::org::e2eelab::skissm::proto::one_time_pre_key_public* release_one_time_pre_key_public();
  ::org::e2eelab::skissm::proto::one_time_pre_key_public* mutable_one_time_pre_key_public();
  void set_allocated_one_time_pre_key_public(::org::e2eelab::skissm::proto::one_time_pre_key_public* one_time_pre_key_public);
  private:
  const ::org::e2eelab::skissm::proto::one_time_pre_key_public& _internal_one_time_pre_key_public() const;
  ::org::e2eelab::skissm::proto::one_time_pre_key_public* _internal_mutable_one_time_pre_key_public();
  public:
  void unsafe_arena_set_allocated_one_time_pre_key_public(
      ::org::e2eelab::skissm::proto::one_time_pre_key_public* one_time_pre_key_public);
  ::org::e2eelab::skissm::proto::one_time_pre_key_public* unsafe_arena_release_one_time_pre_key_public();

  // @@protoc_insertion_point(class_scope:org.e2eelab.skissm.proto.e2ee_pre_key_bundle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_key_public_;
  ::org::e2eelab::skissm::proto::e2ee_address* peer_address_;
  ::org::e2eelab::skissm::proto::signed_pre_key_public* signed_pre_key_public_;
  ::org::e2eelab::skissm::proto::one_time_pre_key_public* one_time_pre_key_public_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skissm_2fe2ee_5fpre_5fkey_5fbundle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// e2ee_pre_key_bundle

// .org.e2eelab.skissm.proto.e2ee_address peer_address = 1;
inline bool e2ee_pre_key_bundle::_internal_has_peer_address() const {
  return this != internal_default_instance() && peer_address_ != nullptr;
}
inline bool e2ee_pre_key_bundle::has_peer_address() const {
  return _internal_has_peer_address();
}
inline const ::org::e2eelab::skissm::proto::e2ee_address& e2ee_pre_key_bundle::_internal_peer_address() const {
  const ::org::e2eelab::skissm::proto::e2ee_address* p = peer_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::e2eelab::skissm::proto::e2ee_address&>(
      ::org::e2eelab::skissm::proto::_e2ee_address_default_instance_);
}
inline const ::org::e2eelab::skissm::proto::e2ee_address& e2ee_pre_key_bundle::peer_address() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.peer_address)
  return _internal_peer_address();
}
inline void e2ee_pre_key_bundle::unsafe_arena_set_allocated_peer_address(
    ::org::e2eelab::skissm::proto::e2ee_address* peer_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_address_);
  }
  peer_address_ = peer_address;
  if (peer_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.peer_address)
}
inline ::org::e2eelab::skissm::proto::e2ee_address* e2ee_pre_key_bundle::release_peer_address() {
  
  ::org::e2eelab::skissm::proto::e2ee_address* temp = peer_address_;
  peer_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::org::e2eelab::skissm::proto::e2ee_address* e2ee_pre_key_bundle::unsafe_arena_release_peer_address() {
  // @@protoc_insertion_point(field_release:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.peer_address)
  
  ::org::e2eelab::skissm::proto::e2ee_address* temp = peer_address_;
  peer_address_ = nullptr;
  return temp;
}
inline ::org::e2eelab::skissm::proto::e2ee_address* e2ee_pre_key_bundle::_internal_mutable_peer_address() {
  
  if (peer_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::e2eelab::skissm::proto::e2ee_address>(GetArenaForAllocation());
    peer_address_ = p;
  }
  return peer_address_;
}
inline ::org::e2eelab::skissm::proto::e2ee_address* e2ee_pre_key_bundle::mutable_peer_address() {
  ::org::e2eelab::skissm::proto::e2ee_address* _msg = _internal_mutable_peer_address();
  // @@protoc_insertion_point(field_mutable:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.peer_address)
  return _msg;
}
inline void e2ee_pre_key_bundle::set_allocated_peer_address(::org::e2eelab::skissm::proto::e2ee_address* peer_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_address_);
  }
  if (peer_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_address));
    if (message_arena != submessage_arena) {
      peer_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_address, submessage_arena);
    }
    
  } else {
    
  }
  peer_address_ = peer_address;
  // @@protoc_insertion_point(field_set_allocated:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.peer_address)
}

// bytes identity_key_public = 2;
inline void e2ee_pre_key_bundle::clear_identity_key_public() {
  identity_key_public_.ClearToEmpty();
}
inline const std::string& e2ee_pre_key_bundle::identity_key_public() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.identity_key_public)
  return _internal_identity_key_public();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void e2ee_pre_key_bundle::set_identity_key_public(ArgT0&& arg0, ArgT... args) {
 
 identity_key_public_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.identity_key_public)
}
inline std::string* e2ee_pre_key_bundle::mutable_identity_key_public() {
  std::string* _s = _internal_mutable_identity_key_public();
  // @@protoc_insertion_point(field_mutable:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.identity_key_public)
  return _s;
}
inline const std::string& e2ee_pre_key_bundle::_internal_identity_key_public() const {
  return identity_key_public_.Get();
}
inline void e2ee_pre_key_bundle::_internal_set_identity_key_public(const std::string& value) {
  
  identity_key_public_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* e2ee_pre_key_bundle::_internal_mutable_identity_key_public() {
  
  return identity_key_public_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* e2ee_pre_key_bundle::release_identity_key_public() {
  // @@protoc_insertion_point(field_release:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.identity_key_public)
  return identity_key_public_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void e2ee_pre_key_bundle::set_allocated_identity_key_public(std::string* identity_key_public) {
  if (identity_key_public != nullptr) {
    
  } else {
    
  }
  identity_key_public_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_key_public,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.identity_key_public)
}

// .org.e2eelab.skissm.proto.signed_pre_key_public signed_pre_key_public = 3;
inline bool e2ee_pre_key_bundle::_internal_has_signed_pre_key_public() const {
  return this != internal_default_instance() && signed_pre_key_public_ != nullptr;
}
inline bool e2ee_pre_key_bundle::has_signed_pre_key_public() const {
  return _internal_has_signed_pre_key_public();
}
inline const ::org::e2eelab::skissm::proto::signed_pre_key_public& e2ee_pre_key_bundle::_internal_signed_pre_key_public() const {
  const ::org::e2eelab::skissm::proto::signed_pre_key_public* p = signed_pre_key_public_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::e2eelab::skissm::proto::signed_pre_key_public&>(
      ::org::e2eelab::skissm::proto::_signed_pre_key_public_default_instance_);
}
inline const ::org::e2eelab::skissm::proto::signed_pre_key_public& e2ee_pre_key_bundle::signed_pre_key_public() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.signed_pre_key_public)
  return _internal_signed_pre_key_public();
}
inline void e2ee_pre_key_bundle::unsafe_arena_set_allocated_signed_pre_key_public(
    ::org::e2eelab::skissm::proto::signed_pre_key_public* signed_pre_key_public) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signed_pre_key_public_);
  }
  signed_pre_key_public_ = signed_pre_key_public;
  if (signed_pre_key_public) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.signed_pre_key_public)
}
inline ::org::e2eelab::skissm::proto::signed_pre_key_public* e2ee_pre_key_bundle::release_signed_pre_key_public() {
  
  ::org::e2eelab::skissm::proto::signed_pre_key_public* temp = signed_pre_key_public_;
  signed_pre_key_public_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::org::e2eelab::skissm::proto::signed_pre_key_public* e2ee_pre_key_bundle::unsafe_arena_release_signed_pre_key_public() {
  // @@protoc_insertion_point(field_release:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.signed_pre_key_public)
  
  ::org::e2eelab::skissm::proto::signed_pre_key_public* temp = signed_pre_key_public_;
  signed_pre_key_public_ = nullptr;
  return temp;
}
inline ::org::e2eelab::skissm::proto::signed_pre_key_public* e2ee_pre_key_bundle::_internal_mutable_signed_pre_key_public() {
  
  if (signed_pre_key_public_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::e2eelab::skissm::proto::signed_pre_key_public>(GetArenaForAllocation());
    signed_pre_key_public_ = p;
  }
  return signed_pre_key_public_;
}
inline ::org::e2eelab::skissm::proto::signed_pre_key_public* e2ee_pre_key_bundle::mutable_signed_pre_key_public() {
  ::org::e2eelab::skissm::proto::signed_pre_key_public* _msg = _internal_mutable_signed_pre_key_public();
  // @@protoc_insertion_point(field_mutable:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.signed_pre_key_public)
  return _msg;
}
inline void e2ee_pre_key_bundle::set_allocated_signed_pre_key_public(::org::e2eelab::skissm::proto::signed_pre_key_public* signed_pre_key_public) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signed_pre_key_public_);
  }
  if (signed_pre_key_public) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signed_pre_key_public));
    if (message_arena != submessage_arena) {
      signed_pre_key_public = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signed_pre_key_public, submessage_arena);
    }
    
  } else {
    
  }
  signed_pre_key_public_ = signed_pre_key_public;
  // @@protoc_insertion_point(field_set_allocated:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.signed_pre_key_public)
}

// .org.e2eelab.skissm.proto.one_time_pre_key_public one_time_pre_key_public = 4;
inline bool e2ee_pre_key_bundle::_internal_has_one_time_pre_key_public() const {
  return this != internal_default_instance() && one_time_pre_key_public_ != nullptr;
}
inline bool e2ee_pre_key_bundle::has_one_time_pre_key_public() const {
  return _internal_has_one_time_pre_key_public();
}
inline const ::org::e2eelab::skissm::proto::one_time_pre_key_public& e2ee_pre_key_bundle::_internal_one_time_pre_key_public() const {
  const ::org::e2eelab::skissm::proto::one_time_pre_key_public* p = one_time_pre_key_public_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::e2eelab::skissm::proto::one_time_pre_key_public&>(
      ::org::e2eelab::skissm::proto::_one_time_pre_key_public_default_instance_);
}
inline const ::org::e2eelab::skissm::proto::one_time_pre_key_public& e2ee_pre_key_bundle::one_time_pre_key_public() const {
  // @@protoc_insertion_point(field_get:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.one_time_pre_key_public)
  return _internal_one_time_pre_key_public();
}
inline void e2ee_pre_key_bundle::unsafe_arena_set_allocated_one_time_pre_key_public(
    ::org::e2eelab::skissm::proto::one_time_pre_key_public* one_time_pre_key_public) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(one_time_pre_key_public_);
  }
  one_time_pre_key_public_ = one_time_pre_key_public;
  if (one_time_pre_key_public) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.one_time_pre_key_public)
}
inline ::org::e2eelab::skissm::proto::one_time_pre_key_public* e2ee_pre_key_bundle::release_one_time_pre_key_public() {
  
  ::org::e2eelab::skissm::proto::one_time_pre_key_public* temp = one_time_pre_key_public_;
  one_time_pre_key_public_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::org::e2eelab::skissm::proto::one_time_pre_key_public* e2ee_pre_key_bundle::unsafe_arena_release_one_time_pre_key_public() {
  // @@protoc_insertion_point(field_release:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.one_time_pre_key_public)
  
  ::org::e2eelab::skissm::proto::one_time_pre_key_public* temp = one_time_pre_key_public_;
  one_time_pre_key_public_ = nullptr;
  return temp;
}
inline ::org::e2eelab::skissm::proto::one_time_pre_key_public* e2ee_pre_key_bundle::_internal_mutable_one_time_pre_key_public() {
  
  if (one_time_pre_key_public_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::e2eelab::skissm::proto::one_time_pre_key_public>(GetArenaForAllocation());
    one_time_pre_key_public_ = p;
  }
  return one_time_pre_key_public_;
}
inline ::org::e2eelab::skissm::proto::one_time_pre_key_public* e2ee_pre_key_bundle::mutable_one_time_pre_key_public() {
  ::org::e2eelab::skissm::proto::one_time_pre_key_public* _msg = _internal_mutable_one_time_pre_key_public();
  // @@protoc_insertion_point(field_mutable:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.one_time_pre_key_public)
  return _msg;
}
inline void e2ee_pre_key_bundle::set_allocated_one_time_pre_key_public(::org::e2eelab::skissm::proto::one_time_pre_key_public* one_time_pre_key_public) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(one_time_pre_key_public_);
  }
  if (one_time_pre_key_public) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(one_time_pre_key_public));
    if (message_arena != submessage_arena) {
      one_time_pre_key_public = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, one_time_pre_key_public, submessage_arena);
    }
    
  } else {
    
  }
  one_time_pre_key_public_ = one_time_pre_key_public;
  // @@protoc_insertion_point(field_set_allocated:org.e2eelab.skissm.proto.e2ee_pre_key_bundle.one_time_pre_key_public)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skissm_2fe2ee_5fpre_5fkey_5fbundle_2eproto
