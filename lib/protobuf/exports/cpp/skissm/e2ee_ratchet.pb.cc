// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/e2ee_ratchet.proto

#include "skissm/e2ee_ratchet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {
constexpr e2ee_ratchet::e2ee_ratchet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : receiver_chains_()
  , skipped_message_keys_()
  , root_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_chain_(nullptr){}
struct e2ee_ratchetDefaultTypeInternal {
  constexpr e2ee_ratchetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~e2ee_ratchetDefaultTypeInternal() {}
  union {
    e2ee_ratchet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT e2ee_ratchetDefaultTypeInternal _e2ee_ratchet_default_instance_;
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skissm_2fe2ee_5fratchet_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skissm_2fe2ee_5fratchet_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fe2ee_5fratchet_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_skissm_2fe2ee_5fratchet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_ratchet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_ratchet, root_key_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_ratchet, sender_chain_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_ratchet, receiver_chains_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_ratchet, skipped_message_keys_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::e2eelab::skissm::proto::e2ee_ratchet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::e2eelab::skissm::proto::_e2ee_ratchet_default_instance_),
};

const char descriptor_table_protodef_skissm_2fe2ee_5fratchet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031skissm/e2ee_ratchet.proto\022\030org.e2eelab"
  ".skissm.proto\032\036skissm/sender_chain_node."
  "proto\032 skissm/receiver_chain_node.proto\032"
  "%skissm/skipped_message_key_node.proto\"\375"
  "\001\n\014e2ee_ratchet\022\020\n\010root_key\030\001 \001(\014\022A\n\014sen"
  "der_chain\030\002 \001(\0132+.org.e2eelab.skissm.pro"
  "to.sender_chain_node\022F\n\017receiver_chains\030"
  "\003 \003(\0132-.org.e2eelab.skissm.proto.receive"
  "r_chain_node\022P\n\024skipped_message_keys\030\004 \003"
  "(\01322.org.e2eelab.skissm.proto.skipped_me"
  "ssage_key_nodeB\rB\013E2eeRatchetb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skissm_2fe2ee_5fratchet_2eproto_deps[3] = {
  &::descriptor_table_skissm_2freceiver_5fchain_5fnode_2eproto,
  &::descriptor_table_skissm_2fsender_5fchain_5fnode_2eproto,
  &::descriptor_table_skissm_2fskipped_5fmessage_5fkey_5fnode_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fe2ee_5fratchet_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fe2ee_5fratchet_2eproto = {
  false, false, 437, descriptor_table_protodef_skissm_2fe2ee_5fratchet_2eproto, "skissm/e2ee_ratchet.proto", 
  &descriptor_table_skissm_2fe2ee_5fratchet_2eproto_once, descriptor_table_skissm_2fe2ee_5fratchet_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_skissm_2fe2ee_5fratchet_2eproto::offsets,
  file_level_metadata_skissm_2fe2ee_5fratchet_2eproto, file_level_enum_descriptors_skissm_2fe2ee_5fratchet_2eproto, file_level_service_descriptors_skissm_2fe2ee_5fratchet_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fe2ee_5fratchet_2eproto_getter() {
  return &descriptor_table_skissm_2fe2ee_5fratchet_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fe2ee_5fratchet_2eproto(&descriptor_table_skissm_2fe2ee_5fratchet_2eproto);
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {

// ===================================================================

class e2ee_ratchet::_Internal {
 public:
  static const ::org::e2eelab::skissm::proto::sender_chain_node& sender_chain(const e2ee_ratchet* msg);
};

const ::org::e2eelab::skissm::proto::sender_chain_node&
e2ee_ratchet::_Internal::sender_chain(const e2ee_ratchet* msg) {
  return *msg->sender_chain_;
}
void e2ee_ratchet::clear_sender_chain() {
  if (GetArenaForAllocation() == nullptr && sender_chain_ != nullptr) {
    delete sender_chain_;
  }
  sender_chain_ = nullptr;
}
void e2ee_ratchet::clear_receiver_chains() {
  receiver_chains_.Clear();
}
void e2ee_ratchet::clear_skipped_message_keys() {
  skipped_message_keys_.Clear();
}
e2ee_ratchet::e2ee_ratchet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  receiver_chains_(arena),
  skipped_message_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:org.e2eelab.skissm.proto.e2ee_ratchet)
}
e2ee_ratchet::e2ee_ratchet(const e2ee_ratchet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      receiver_chains_(from.receiver_chains_),
      skipped_message_keys_(from.skipped_message_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  root_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_root_key().empty()) {
    root_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_root_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_sender_chain()) {
    sender_chain_ = new ::org::e2eelab::skissm::proto::sender_chain_node(*from.sender_chain_);
  } else {
    sender_chain_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.e2eelab.skissm.proto.e2ee_ratchet)
}

inline void e2ee_ratchet::SharedCtor() {
root_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sender_chain_ = nullptr;
}

e2ee_ratchet::~e2ee_ratchet() {
  // @@protoc_insertion_point(destructor:org.e2eelab.skissm.proto.e2ee_ratchet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void e2ee_ratchet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  root_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_chain_;
}

void e2ee_ratchet::ArenaDtor(void* object) {
  e2ee_ratchet* _this = reinterpret_cast< e2ee_ratchet* >(object);
  (void)_this;
}
void e2ee_ratchet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void e2ee_ratchet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void e2ee_ratchet::Clear() {
// @@protoc_insertion_point(message_clear_start:org.e2eelab.skissm.proto.e2ee_ratchet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiver_chains_.Clear();
  skipped_message_keys_.Clear();
  root_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && sender_chain_ != nullptr) {
    delete sender_chain_;
  }
  sender_chain_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* e2ee_ratchet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes root_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_root_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.e2eelab.skissm.proto.sender_chain_node sender_chain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender_chain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .org.e2eelab.skissm.proto.receiver_chain_node receiver_chains = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_receiver_chains(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .org.e2eelab.skissm.proto.skipped_message_key_node skipped_message_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skipped_message_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* e2ee_ratchet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.e2eelab.skissm.proto.e2ee_ratchet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes root_key = 1;
  if (!this->_internal_root_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_root_key(), target);
  }

  // .org.e2eelab.skissm.proto.sender_chain_node sender_chain = 2;
  if (this->_internal_has_sender_chain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sender_chain(this), target, stream);
  }

  // repeated .org.e2eelab.skissm.proto.receiver_chain_node receiver_chains = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_receiver_chains_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_receiver_chains(i), target, stream);
  }

  // repeated .org.e2eelab.skissm.proto.skipped_message_key_node skipped_message_keys = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skipped_message_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_skipped_message_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.e2eelab.skissm.proto.e2ee_ratchet)
  return target;
}

size_t e2ee_ratchet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.e2eelab.skissm.proto.e2ee_ratchet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.e2eelab.skissm.proto.receiver_chain_node receiver_chains = 3;
  total_size += 1UL * this->_internal_receiver_chains_size();
  for (const auto& msg : this->receiver_chains_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .org.e2eelab.skissm.proto.skipped_message_key_node skipped_message_keys = 4;
  total_size += 1UL * this->_internal_skipped_message_keys_size();
  for (const auto& msg : this->skipped_message_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes root_key = 1;
  if (!this->_internal_root_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_root_key());
  }

  // .org.e2eelab.skissm.proto.sender_chain_node sender_chain = 2;
  if (this->_internal_has_sender_chain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_chain_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData e2ee_ratchet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    e2ee_ratchet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*e2ee_ratchet::GetClassData() const { return &_class_data_; }

void e2ee_ratchet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<e2ee_ratchet *>(to)->MergeFrom(
      static_cast<const e2ee_ratchet &>(from));
}


void e2ee_ratchet::MergeFrom(const e2ee_ratchet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.e2eelab.skissm.proto.e2ee_ratchet)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  receiver_chains_.MergeFrom(from.receiver_chains_);
  skipped_message_keys_.MergeFrom(from.skipped_message_keys_);
  if (!from._internal_root_key().empty()) {
    _internal_set_root_key(from._internal_root_key());
  }
  if (from._internal_has_sender_chain()) {
    _internal_mutable_sender_chain()->::org::e2eelab::skissm::proto::sender_chain_node::MergeFrom(from._internal_sender_chain());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void e2ee_ratchet::CopyFrom(const e2ee_ratchet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.e2eelab.skissm.proto.e2ee_ratchet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool e2ee_ratchet::IsInitialized() const {
  return true;
}

void e2ee_ratchet::InternalSwap(e2ee_ratchet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  receiver_chains_.InternalSwap(&other->receiver_chains_);
  skipped_message_keys_.InternalSwap(&other->skipped_message_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &root_key_, GetArenaForAllocation(),
      &other->root_key_, other->GetArenaForAllocation()
  );
  swap(sender_chain_, other->sender_chain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata e2ee_ratchet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fe2ee_5fratchet_2eproto_getter, &descriptor_table_skissm_2fe2ee_5fratchet_2eproto_once,
      file_level_metadata_skissm_2fe2ee_5fratchet_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::e2eelab::skissm::proto::e2ee_ratchet* Arena::CreateMaybeMessage< ::org::e2eelab::skissm::proto::e2ee_ratchet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::e2eelab::skissm::proto::e2ee_ratchet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
