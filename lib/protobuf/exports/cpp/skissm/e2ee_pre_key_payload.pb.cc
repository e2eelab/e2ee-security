// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/e2ee_pre_key_payload.proto

#include "skissm/e2ee_pre_key_payload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {
constexpr e2ee_pre_key_payload::e2ee_pre_key_payload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : alice_identity_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alice_ephemeral_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_payload_(nullptr)
  , bob_signed_pre_key_id_(0u)
  , bob_one_time_pre_key_id_(0u){}
struct e2ee_pre_key_payloadDefaultTypeInternal {
  constexpr e2ee_pre_key_payloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~e2ee_pre_key_payloadDefaultTypeInternal() {}
  union {
    e2ee_pre_key_payload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT e2ee_pre_key_payloadDefaultTypeInternal _e2ee_pre_key_payload_default_instance_;
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_pre_key_payload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_pre_key_payload, alice_identity_key_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_pre_key_payload, alice_ephemeral_key_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_pre_key_payload, bob_signed_pre_key_id_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_pre_key_payload, bob_one_time_pre_key_id_),
  PROTOBUF_FIELD_OFFSET(::org::e2eelab::skissm::proto::e2ee_pre_key_payload, msg_payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::e2eelab::skissm::proto::e2ee_pre_key_payload)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::e2eelab::skissm::proto::_e2ee_pre_key_payload_default_instance_),
};

const char descriptor_table_protodef_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!skissm/e2ee_pre_key_payload.proto\022\030org"
  ".e2eelab.skissm.proto\032\035skissm/e2ee_msg_p"
  "ayload.proto\"\320\001\n\024e2ee_pre_key_payload\022\032\n"
  "\022alice_identity_key\030\001 \001(\014\022\033\n\023alice_ephem"
  "eral_key\030\002 \001(\014\022\035\n\025bob_signed_pre_key_id\030"
  "\003 \001(\r\022\037\n\027bob_one_time_pre_key_id\030\004 \001(\r\022\?"
  "\n\013msg_payload\030\005 \001(\0132*.org.e2eelab.skissm"
  ".proto.e2ee_msg_payloadB\023B\021E2eePreKeyPay"
  "loadb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto_deps[1] = {
  &::descriptor_table_skissm_2fe2ee_5fmsg_5fpayload_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto = {
  false, false, 332, descriptor_table_protodef_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto, "skissm/e2ee_pre_key_payload.proto", 
  &descriptor_table_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto_once, descriptor_table_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto::offsets,
  file_level_metadata_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto, file_level_enum_descriptors_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto, file_level_service_descriptors_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto_getter() {
  return &descriptor_table_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto(&descriptor_table_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto);
namespace org {
namespace e2eelab {
namespace skissm {
namespace proto {

// ===================================================================

class e2ee_pre_key_payload::_Internal {
 public:
  static const ::org::e2eelab::skissm::proto::e2ee_msg_payload& msg_payload(const e2ee_pre_key_payload* msg);
};

const ::org::e2eelab::skissm::proto::e2ee_msg_payload&
e2ee_pre_key_payload::_Internal::msg_payload(const e2ee_pre_key_payload* msg) {
  return *msg->msg_payload_;
}
void e2ee_pre_key_payload::clear_msg_payload() {
  if (GetArenaForAllocation() == nullptr && msg_payload_ != nullptr) {
    delete msg_payload_;
  }
  msg_payload_ = nullptr;
}
e2ee_pre_key_payload::e2ee_pre_key_payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:org.e2eelab.skissm.proto.e2ee_pre_key_payload)
}
e2ee_pre_key_payload::e2ee_pre_key_payload(const e2ee_pre_key_payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  alice_identity_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alice_identity_key().empty()) {
    alice_identity_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alice_identity_key(), 
      GetArenaForAllocation());
  }
  alice_ephemeral_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alice_ephemeral_key().empty()) {
    alice_ephemeral_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alice_ephemeral_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_msg_payload()) {
    msg_payload_ = new ::org::e2eelab::skissm::proto::e2ee_msg_payload(*from.msg_payload_);
  } else {
    msg_payload_ = nullptr;
  }
  ::memcpy(&bob_signed_pre_key_id_, &from.bob_signed_pre_key_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bob_one_time_pre_key_id_) -
    reinterpret_cast<char*>(&bob_signed_pre_key_id_)) + sizeof(bob_one_time_pre_key_id_));
  // @@protoc_insertion_point(copy_constructor:org.e2eelab.skissm.proto.e2ee_pre_key_payload)
}

inline void e2ee_pre_key_payload::SharedCtor() {
alice_identity_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
alice_ephemeral_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msg_payload_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bob_one_time_pre_key_id_) -
    reinterpret_cast<char*>(&msg_payload_)) + sizeof(bob_one_time_pre_key_id_));
}

e2ee_pre_key_payload::~e2ee_pre_key_payload() {
  // @@protoc_insertion_point(destructor:org.e2eelab.skissm.proto.e2ee_pre_key_payload)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void e2ee_pre_key_payload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  alice_identity_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alice_ephemeral_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete msg_payload_;
}

void e2ee_pre_key_payload::ArenaDtor(void* object) {
  e2ee_pre_key_payload* _this = reinterpret_cast< e2ee_pre_key_payload* >(object);
  (void)_this;
}
void e2ee_pre_key_payload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void e2ee_pre_key_payload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void e2ee_pre_key_payload::Clear() {
// @@protoc_insertion_point(message_clear_start:org.e2eelab.skissm.proto.e2ee_pre_key_payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alice_identity_key_.ClearToEmpty();
  alice_ephemeral_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && msg_payload_ != nullptr) {
    delete msg_payload_;
  }
  msg_payload_ = nullptr;
  ::memset(&bob_signed_pre_key_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bob_one_time_pre_key_id_) -
      reinterpret_cast<char*>(&bob_signed_pre_key_id_)) + sizeof(bob_one_time_pre_key_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* e2ee_pre_key_payload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes alice_identity_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_alice_identity_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes alice_ephemeral_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_alice_ephemeral_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bob_signed_pre_key_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bob_signed_pre_key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bob_one_time_pre_key_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bob_one_time_pre_key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.e2eelab.skissm.proto.e2ee_msg_payload msg_payload = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* e2ee_pre_key_payload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.e2eelab.skissm.proto.e2ee_pre_key_payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes alice_identity_key = 1;
  if (!this->_internal_alice_identity_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_alice_identity_key(), target);
  }

  // bytes alice_ephemeral_key = 2;
  if (!this->_internal_alice_ephemeral_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_alice_ephemeral_key(), target);
  }

  // uint32 bob_signed_pre_key_id = 3;
  if (this->_internal_bob_signed_pre_key_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bob_signed_pre_key_id(), target);
  }

  // uint32 bob_one_time_pre_key_id = 4;
  if (this->_internal_bob_one_time_pre_key_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bob_one_time_pre_key_id(), target);
  }

  // .org.e2eelab.skissm.proto.e2ee_msg_payload msg_payload = 5;
  if (this->_internal_has_msg_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::msg_payload(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.e2eelab.skissm.proto.e2ee_pre_key_payload)
  return target;
}

size_t e2ee_pre_key_payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.e2eelab.skissm.proto.e2ee_pre_key_payload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes alice_identity_key = 1;
  if (!this->_internal_alice_identity_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_alice_identity_key());
  }

  // bytes alice_ephemeral_key = 2;
  if (!this->_internal_alice_ephemeral_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_alice_ephemeral_key());
  }

  // .org.e2eelab.skissm.proto.e2ee_msg_payload msg_payload = 5;
  if (this->_internal_has_msg_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_payload_);
  }

  // uint32 bob_signed_pre_key_id = 3;
  if (this->_internal_bob_signed_pre_key_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bob_signed_pre_key_id());
  }

  // uint32 bob_one_time_pre_key_id = 4;
  if (this->_internal_bob_one_time_pre_key_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bob_one_time_pre_key_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData e2ee_pre_key_payload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    e2ee_pre_key_payload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*e2ee_pre_key_payload::GetClassData() const { return &_class_data_; }

void e2ee_pre_key_payload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<e2ee_pre_key_payload *>(to)->MergeFrom(
      static_cast<const e2ee_pre_key_payload &>(from));
}


void e2ee_pre_key_payload::MergeFrom(const e2ee_pre_key_payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.e2eelab.skissm.proto.e2ee_pre_key_payload)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_alice_identity_key().empty()) {
    _internal_set_alice_identity_key(from._internal_alice_identity_key());
  }
  if (!from._internal_alice_ephemeral_key().empty()) {
    _internal_set_alice_ephemeral_key(from._internal_alice_ephemeral_key());
  }
  if (from._internal_has_msg_payload()) {
    _internal_mutable_msg_payload()->::org::e2eelab::skissm::proto::e2ee_msg_payload::MergeFrom(from._internal_msg_payload());
  }
  if (from._internal_bob_signed_pre_key_id() != 0) {
    _internal_set_bob_signed_pre_key_id(from._internal_bob_signed_pre_key_id());
  }
  if (from._internal_bob_one_time_pre_key_id() != 0) {
    _internal_set_bob_one_time_pre_key_id(from._internal_bob_one_time_pre_key_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void e2ee_pre_key_payload::CopyFrom(const e2ee_pre_key_payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.e2eelab.skissm.proto.e2ee_pre_key_payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool e2ee_pre_key_payload::IsInitialized() const {
  return true;
}

void e2ee_pre_key_payload::InternalSwap(e2ee_pre_key_payload* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alice_identity_key_, GetArenaForAllocation(),
      &other->alice_identity_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alice_ephemeral_key_, GetArenaForAllocation(),
      &other->alice_ephemeral_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(e2ee_pre_key_payload, bob_one_time_pre_key_id_)
      + sizeof(e2ee_pre_key_payload::bob_one_time_pre_key_id_)
      - PROTOBUF_FIELD_OFFSET(e2ee_pre_key_payload, msg_payload_)>(
          reinterpret_cast<char*>(&msg_payload_),
          reinterpret_cast<char*>(&other->msg_payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata e2ee_pre_key_payload::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto_getter, &descriptor_table_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto_once,
      file_level_metadata_skissm_2fe2ee_5fpre_5fkey_5fpayload_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace skissm
}  // namespace e2eelab
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::e2eelab::skissm::proto::e2ee_pre_key_payload* Arena::CreateMaybeMessage< ::org::e2eelab::skissm::proto::e2ee_pre_key_payload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::e2eelab::skissm::proto::e2ee_pre_key_payload >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
