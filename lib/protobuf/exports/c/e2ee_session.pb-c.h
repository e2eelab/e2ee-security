/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: e2ee_session.proto */

#ifndef PROTOBUF_C_e2ee_5fsession_2eproto__INCLUDED
#define PROTOBUF_C_e2ee_5fsession_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "e2ee_account.pb-c.h"
#include "e2ee_address.pb-c.h"

typedef struct Org__E2eelab__Lib__Protobuf__ChainKey Org__E2eelab__Lib__Protobuf__ChainKey;
typedef struct Org__E2eelab__Lib__Protobuf__MessageKey Org__E2eelab__Lib__Protobuf__MessageKey;
typedef struct Org__E2eelab__Lib__Protobuf__SenderChainNode Org__E2eelab__Lib__Protobuf__SenderChainNode;
typedef struct Org__E2eelab__Lib__Protobuf__ReceiverChainNode Org__E2eelab__Lib__Protobuf__ReceiverChainNode;
typedef struct Org__E2eelab__Lib__Protobuf__SkippedMessageKeyNode Org__E2eelab__Lib__Protobuf__SkippedMessageKeyNode;
typedef struct Org__E2eelab__Lib__Protobuf__Ratchet Org__E2eelab__Lib__Protobuf__Ratchet;
typedef struct Org__E2eelab__Lib__Protobuf__E2eeSession Org__E2eelab__Lib__Protobuf__E2eeSession;
typedef struct Org__E2eelab__Lib__Protobuf__E2eeGroupSession Org__E2eelab__Lib__Protobuf__E2eeGroupSession;


/* --- enums --- */


/* --- messages --- */

struct  Org__E2eelab__Lib__Protobuf__ChainKey
{
  ProtobufCMessage base;
  uint32_t index;
  ProtobufCBinaryData shared_key;
};
#define ORG__E2EELAB__LIB__PROTOBUF__CHAIN_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&org__e2eelab__lib__protobuf__chain_key__descriptor) \
    , 0, {0,NULL} }


struct  Org__E2eelab__Lib__Protobuf__MessageKey
{
  ProtobufCMessage base;
  uint32_t index;
  ProtobufCBinaryData derived_key;
};
#define ORG__E2EELAB__LIB__PROTOBUF__MESSAGE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&org__e2eelab__lib__protobuf__message_key__descriptor) \
    , 0, {0,NULL} }


struct  Org__E2eelab__Lib__Protobuf__SenderChainNode
{
  ProtobufCMessage base;
  Org__E2eelab__Lib__Protobuf__KeyPair *ratchet_key_pair;
  Org__E2eelab__Lib__Protobuf__ChainKey *chain_key;
};
#define ORG__E2EELAB__LIB__PROTOBUF__SENDER_CHAIN_NODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&org__e2eelab__lib__protobuf__sender_chain_node__descriptor) \
    , NULL, NULL }


struct  Org__E2eelab__Lib__Protobuf__ReceiverChainNode
{
  ProtobufCMessage base;
  ProtobufCBinaryData ratchet_key_public;
  Org__E2eelab__Lib__Protobuf__ChainKey *chain_key;
};
#define ORG__E2EELAB__LIB__PROTOBUF__RECEIVER_CHAIN_NODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&org__e2eelab__lib__protobuf__receiver_chain_node__descriptor) \
    , {0,NULL}, NULL }


struct  Org__E2eelab__Lib__Protobuf__SkippedMessageKeyNode
{
  ProtobufCMessage base;
  ProtobufCBinaryData ratchet_key_public;
  Org__E2eelab__Lib__Protobuf__MessageKey *message_key;
};
#define ORG__E2EELAB__LIB__PROTOBUF__SKIPPED_MESSAGE_KEY_NODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&org__e2eelab__lib__protobuf__skipped_message_key_node__descriptor) \
    , {0,NULL}, NULL }


struct  Org__E2eelab__Lib__Protobuf__Ratchet
{
  ProtobufCMessage base;
  ProtobufCBinaryData root_key;
  Org__E2eelab__Lib__Protobuf__SenderChainNode *sender_chain;
  size_t n_receiver_chains;
  Org__E2eelab__Lib__Protobuf__ReceiverChainNode **receiver_chains;
  size_t n_skipped_message_keys;
  Org__E2eelab__Lib__Protobuf__SkippedMessageKeyNode **skipped_message_keys;
};
#define ORG__E2EELAB__LIB__PROTOBUF__RATCHET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&org__e2eelab__lib__protobuf__ratchet__descriptor) \
    , {0,NULL}, NULL, 0,NULL, 0,NULL }


struct  Org__E2eelab__Lib__Protobuf__E2eeSession
{
  ProtobufCMessage base;
  uint32_t version;
  ProtobufCBinaryData session_id;
  Org__E2eelab__Lib__Protobuf__E2eeAddress *session_owner;
  Org__E2eelab__Lib__Protobuf__E2eeAddress *from;
  Org__E2eelab__Lib__Protobuf__E2eeAddress *to;
  Org__E2eelab__Lib__Protobuf__Ratchet *ratchet;
  ProtobufCBinaryData alice_identity_key;
  ProtobufCBinaryData alice_ephemeral_key;
  ProtobufCBinaryData bob_signed_pre_key;
  ProtobufCBinaryData bob_one_time_pre_key;
  protobuf_c_boolean responded;
  ProtobufCBinaryData associated_data;
};
#define ORG__E2EELAB__LIB__PROTOBUF__E2EE_SESSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&org__e2eelab__lib__protobuf__e2ee_session__descriptor) \
    , 0, {0,NULL}, NULL, NULL, NULL, NULL, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL}, 0, {0,NULL} }


struct  Org__E2eelab__Lib__Protobuf__E2eeGroupSession
{
  ProtobufCMessage base;
  uint32_t version;
  ProtobufCBinaryData session_id;
  Org__E2eelab__Lib__Protobuf__E2eeAddress *session_owner;
  Org__E2eelab__Lib__Protobuf__E2eeAddress *group_address;
  size_t n_member_addresses;
  Org__E2eelab__Lib__Protobuf__E2eeAddress **member_addresses;
  uint32_t sequence;
  ProtobufCBinaryData chain_key;
  ProtobufCBinaryData signature_private_key;
  ProtobufCBinaryData signature_public_key;
  ProtobufCBinaryData associated_data;
};
#define ORG__E2EELAB__LIB__PROTOBUF__E2EE_GROUP_SESSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&org__e2eelab__lib__protobuf__e2ee_group_session__descriptor) \
    , 0, {0,NULL}, NULL, NULL, 0,NULL, 0, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL} }


/* Org__E2eelab__Lib__Protobuf__ChainKey methods */
void   org__e2eelab__lib__protobuf__chain_key__init
                     (Org__E2eelab__Lib__Protobuf__ChainKey         *message);
size_t org__e2eelab__lib__protobuf__chain_key__get_packed_size
                     (const Org__E2eelab__Lib__Protobuf__ChainKey   *message);
size_t org__e2eelab__lib__protobuf__chain_key__pack
                     (const Org__E2eelab__Lib__Protobuf__ChainKey   *message,
                      uint8_t             *out);
size_t org__e2eelab__lib__protobuf__chain_key__pack_to_buffer
                     (const Org__E2eelab__Lib__Protobuf__ChainKey   *message,
                      ProtobufCBuffer     *buffer);
Org__E2eelab__Lib__Protobuf__ChainKey *
       org__e2eelab__lib__protobuf__chain_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   org__e2eelab__lib__protobuf__chain_key__free_unpacked
                     (Org__E2eelab__Lib__Protobuf__ChainKey *message,
                      ProtobufCAllocator *allocator);
/* Org__E2eelab__Lib__Protobuf__MessageKey methods */
void   org__e2eelab__lib__protobuf__message_key__init
                     (Org__E2eelab__Lib__Protobuf__MessageKey         *message);
size_t org__e2eelab__lib__protobuf__message_key__get_packed_size
                     (const Org__E2eelab__Lib__Protobuf__MessageKey   *message);
size_t org__e2eelab__lib__protobuf__message_key__pack
                     (const Org__E2eelab__Lib__Protobuf__MessageKey   *message,
                      uint8_t             *out);
size_t org__e2eelab__lib__protobuf__message_key__pack_to_buffer
                     (const Org__E2eelab__Lib__Protobuf__MessageKey   *message,
                      ProtobufCBuffer     *buffer);
Org__E2eelab__Lib__Protobuf__MessageKey *
       org__e2eelab__lib__protobuf__message_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   org__e2eelab__lib__protobuf__message_key__free_unpacked
                     (Org__E2eelab__Lib__Protobuf__MessageKey *message,
                      ProtobufCAllocator *allocator);
/* Org__E2eelab__Lib__Protobuf__SenderChainNode methods */
void   org__e2eelab__lib__protobuf__sender_chain_node__init
                     (Org__E2eelab__Lib__Protobuf__SenderChainNode         *message);
size_t org__e2eelab__lib__protobuf__sender_chain_node__get_packed_size
                     (const Org__E2eelab__Lib__Protobuf__SenderChainNode   *message);
size_t org__e2eelab__lib__protobuf__sender_chain_node__pack
                     (const Org__E2eelab__Lib__Protobuf__SenderChainNode   *message,
                      uint8_t             *out);
size_t org__e2eelab__lib__protobuf__sender_chain_node__pack_to_buffer
                     (const Org__E2eelab__Lib__Protobuf__SenderChainNode   *message,
                      ProtobufCBuffer     *buffer);
Org__E2eelab__Lib__Protobuf__SenderChainNode *
       org__e2eelab__lib__protobuf__sender_chain_node__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   org__e2eelab__lib__protobuf__sender_chain_node__free_unpacked
                     (Org__E2eelab__Lib__Protobuf__SenderChainNode *message,
                      ProtobufCAllocator *allocator);
/* Org__E2eelab__Lib__Protobuf__ReceiverChainNode methods */
void   org__e2eelab__lib__protobuf__receiver_chain_node__init
                     (Org__E2eelab__Lib__Protobuf__ReceiverChainNode         *message);
size_t org__e2eelab__lib__protobuf__receiver_chain_node__get_packed_size
                     (const Org__E2eelab__Lib__Protobuf__ReceiverChainNode   *message);
size_t org__e2eelab__lib__protobuf__receiver_chain_node__pack
                     (const Org__E2eelab__Lib__Protobuf__ReceiverChainNode   *message,
                      uint8_t             *out);
size_t org__e2eelab__lib__protobuf__receiver_chain_node__pack_to_buffer
                     (const Org__E2eelab__Lib__Protobuf__ReceiverChainNode   *message,
                      ProtobufCBuffer     *buffer);
Org__E2eelab__Lib__Protobuf__ReceiverChainNode *
       org__e2eelab__lib__protobuf__receiver_chain_node__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   org__e2eelab__lib__protobuf__receiver_chain_node__free_unpacked
                     (Org__E2eelab__Lib__Protobuf__ReceiverChainNode *message,
                      ProtobufCAllocator *allocator);
/* Org__E2eelab__Lib__Protobuf__SkippedMessageKeyNode methods */
void   org__e2eelab__lib__protobuf__skipped_message_key_node__init
                     (Org__E2eelab__Lib__Protobuf__SkippedMessageKeyNode         *message);
size_t org__e2eelab__lib__protobuf__skipped_message_key_node__get_packed_size
                     (const Org__E2eelab__Lib__Protobuf__SkippedMessageKeyNode   *message);
size_t org__e2eelab__lib__protobuf__skipped_message_key_node__pack
                     (const Org__E2eelab__Lib__Protobuf__SkippedMessageKeyNode   *message,
                      uint8_t             *out);
size_t org__e2eelab__lib__protobuf__skipped_message_key_node__pack_to_buffer
                     (const Org__E2eelab__Lib__Protobuf__SkippedMessageKeyNode   *message,
                      ProtobufCBuffer     *buffer);
Org__E2eelab__Lib__Protobuf__SkippedMessageKeyNode *
       org__e2eelab__lib__protobuf__skipped_message_key_node__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   org__e2eelab__lib__protobuf__skipped_message_key_node__free_unpacked
                     (Org__E2eelab__Lib__Protobuf__SkippedMessageKeyNode *message,
                      ProtobufCAllocator *allocator);
/* Org__E2eelab__Lib__Protobuf__Ratchet methods */
void   org__e2eelab__lib__protobuf__ratchet__init
                     (Org__E2eelab__Lib__Protobuf__Ratchet         *message);
size_t org__e2eelab__lib__protobuf__ratchet__get_packed_size
                     (const Org__E2eelab__Lib__Protobuf__Ratchet   *message);
size_t org__e2eelab__lib__protobuf__ratchet__pack
                     (const Org__E2eelab__Lib__Protobuf__Ratchet   *message,
                      uint8_t             *out);
size_t org__e2eelab__lib__protobuf__ratchet__pack_to_buffer
                     (const Org__E2eelab__Lib__Protobuf__Ratchet   *message,
                      ProtobufCBuffer     *buffer);
Org__E2eelab__Lib__Protobuf__Ratchet *
       org__e2eelab__lib__protobuf__ratchet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   org__e2eelab__lib__protobuf__ratchet__free_unpacked
                     (Org__E2eelab__Lib__Protobuf__Ratchet *message,
                      ProtobufCAllocator *allocator);
/* Org__E2eelab__Lib__Protobuf__E2eeSession methods */
void   org__e2eelab__lib__protobuf__e2ee_session__init
                     (Org__E2eelab__Lib__Protobuf__E2eeSession         *message);
size_t org__e2eelab__lib__protobuf__e2ee_session__get_packed_size
                     (const Org__E2eelab__Lib__Protobuf__E2eeSession   *message);
size_t org__e2eelab__lib__protobuf__e2ee_session__pack
                     (const Org__E2eelab__Lib__Protobuf__E2eeSession   *message,
                      uint8_t             *out);
size_t org__e2eelab__lib__protobuf__e2ee_session__pack_to_buffer
                     (const Org__E2eelab__Lib__Protobuf__E2eeSession   *message,
                      ProtobufCBuffer     *buffer);
Org__E2eelab__Lib__Protobuf__E2eeSession *
       org__e2eelab__lib__protobuf__e2ee_session__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   org__e2eelab__lib__protobuf__e2ee_session__free_unpacked
                     (Org__E2eelab__Lib__Protobuf__E2eeSession *message,
                      ProtobufCAllocator *allocator);
/* Org__E2eelab__Lib__Protobuf__E2eeGroupSession methods */
void   org__e2eelab__lib__protobuf__e2ee_group_session__init
                     (Org__E2eelab__Lib__Protobuf__E2eeGroupSession         *message);
size_t org__e2eelab__lib__protobuf__e2ee_group_session__get_packed_size
                     (const Org__E2eelab__Lib__Protobuf__E2eeGroupSession   *message);
size_t org__e2eelab__lib__protobuf__e2ee_group_session__pack
                     (const Org__E2eelab__Lib__Protobuf__E2eeGroupSession   *message,
                      uint8_t             *out);
size_t org__e2eelab__lib__protobuf__e2ee_group_session__pack_to_buffer
                     (const Org__E2eelab__Lib__Protobuf__E2eeGroupSession   *message,
                      ProtobufCBuffer     *buffer);
Org__E2eelab__Lib__Protobuf__E2eeGroupSession *
       org__e2eelab__lib__protobuf__e2ee_group_session__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   org__e2eelab__lib__protobuf__e2ee_group_session__free_unpacked
                     (Org__E2eelab__Lib__Protobuf__E2eeGroupSession *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Org__E2eelab__Lib__Protobuf__ChainKey_Closure)
                 (const Org__E2eelab__Lib__Protobuf__ChainKey *message,
                  void *closure_data);
typedef void (*Org__E2eelab__Lib__Protobuf__MessageKey_Closure)
                 (const Org__E2eelab__Lib__Protobuf__MessageKey *message,
                  void *closure_data);
typedef void (*Org__E2eelab__Lib__Protobuf__SenderChainNode_Closure)
                 (const Org__E2eelab__Lib__Protobuf__SenderChainNode *message,
                  void *closure_data);
typedef void (*Org__E2eelab__Lib__Protobuf__ReceiverChainNode_Closure)
                 (const Org__E2eelab__Lib__Protobuf__ReceiverChainNode *message,
                  void *closure_data);
typedef void (*Org__E2eelab__Lib__Protobuf__SkippedMessageKeyNode_Closure)
                 (const Org__E2eelab__Lib__Protobuf__SkippedMessageKeyNode *message,
                  void *closure_data);
typedef void (*Org__E2eelab__Lib__Protobuf__Ratchet_Closure)
                 (const Org__E2eelab__Lib__Protobuf__Ratchet *message,
                  void *closure_data);
typedef void (*Org__E2eelab__Lib__Protobuf__E2eeSession_Closure)
                 (const Org__E2eelab__Lib__Protobuf__E2eeSession *message,
                  void *closure_data);
typedef void (*Org__E2eelab__Lib__Protobuf__E2eeGroupSession_Closure)
                 (const Org__E2eelab__Lib__Protobuf__E2eeGroupSession *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor org__e2eelab__lib__protobuf__chain_key__descriptor;
extern const ProtobufCMessageDescriptor org__e2eelab__lib__protobuf__message_key__descriptor;
extern const ProtobufCMessageDescriptor org__e2eelab__lib__protobuf__sender_chain_node__descriptor;
extern const ProtobufCMessageDescriptor org__e2eelab__lib__protobuf__receiver_chain_node__descriptor;
extern const ProtobufCMessageDescriptor org__e2eelab__lib__protobuf__skipped_message_key_node__descriptor;
extern const ProtobufCMessageDescriptor org__e2eelab__lib__protobuf__ratchet__descriptor;
extern const ProtobufCMessageDescriptor org__e2eelab__lib__protobuf__e2ee_session__descriptor;
extern const ProtobufCMessageDescriptor org__e2eelab__lib__protobuf__e2ee_group_session__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_e2ee_5fsession_2eproto__INCLUDED */
