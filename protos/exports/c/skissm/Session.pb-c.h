/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: Session.proto */

#ifndef PROTOBUF_C_Session_2eproto__INCLUDED
#define PROTOBUF_C_Session_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "skissm/E2eeAddress.pb-c.h"
#include "skissm/Ratchet.pb-c.h"

typedef struct Skissm__Session Skissm__Session;


/* --- enums --- */


/* --- messages --- */

struct  Skissm__Session
{
  ProtobufCMessage base;
  char *version;
  char *e2ee_pack_id;
  char *session_id;
  Skissm__E2eeAddress *session_owner;
  Skissm__E2eeAddress *from;
  Skissm__E2eeAddress *to;
  Skissm__Ratchet *ratchet;
  ProtobufCBinaryData alice_identity_key;
  ProtobufCBinaryData alice_ephemeral_key;
  ProtobufCBinaryData bob_signed_pre_key;
  uint32_t bob_signed_pre_key_id;
  ProtobufCBinaryData bob_one_time_pre_key;
  uint32_t bob_one_time_pre_key_id;
  protobuf_c_boolean responded;
  ProtobufCBinaryData associated_data;
};
#define SKISSM__SESSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&skissm__session__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, NULL, NULL, NULL, {0,NULL}, {0,NULL}, {0,NULL}, 0, {0,NULL}, 0, 0, {0,NULL} }


/* Skissm__Session methods */
void   skissm__session__init
                     (Skissm__Session         *message);
size_t skissm__session__get_packed_size
                     (const Skissm__Session   *message);
size_t skissm__session__pack
                     (const Skissm__Session   *message,
                      uint8_t             *out);
size_t skissm__session__pack_to_buffer
                     (const Skissm__Session   *message,
                      ProtobufCBuffer     *buffer);
Skissm__Session *
       skissm__session__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   skissm__session__free_unpacked
                     (Skissm__Session *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Skissm__Session_Closure)
                 (const Skissm__Session *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor skissm__session__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_Session_2eproto__INCLUDED */
