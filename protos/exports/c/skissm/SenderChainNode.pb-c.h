/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: SenderChainNode.proto */

#ifndef PROTOBUF_C_SenderChainNode_2eproto__INCLUDED
#define PROTOBUF_C_SenderChainNode_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "skissm/ChainKey.pb-c.h"

typedef struct Skissm__SenderChainNode Skissm__SenderChainNode;


/* --- enums --- */


/* --- messages --- */

struct  Skissm__SenderChainNode
{
  ProtobufCMessage base;
  ProtobufCBinaryData ratchet_key;
  Skissm__ChainKey *chain_key;
};
#define SKISSM__SENDER_CHAIN_NODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&skissm__sender_chain_node__descriptor) \
    , {0,NULL}, NULL }


/* Skissm__SenderChainNode methods */
void   skissm__sender_chain_node__init
                     (Skissm__SenderChainNode         *message);
size_t skissm__sender_chain_node__get_packed_size
                     (const Skissm__SenderChainNode   *message);
size_t skissm__sender_chain_node__pack
                     (const Skissm__SenderChainNode   *message,
                      uint8_t             *out);
size_t skissm__sender_chain_node__pack_to_buffer
                     (const Skissm__SenderChainNode   *message,
                      ProtobufCBuffer     *buffer);
Skissm__SenderChainNode *
       skissm__sender_chain_node__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   skissm__sender_chain_node__free_unpacked
                     (Skissm__SenderChainNode *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Skissm__SenderChainNode_Closure)
                 (const Skissm__SenderChainNode *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor skissm__sender_chain_node__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_SenderChainNode_2eproto__INCLUDED */
