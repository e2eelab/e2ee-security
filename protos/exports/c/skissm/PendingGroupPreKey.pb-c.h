/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: PendingGroupPreKey.proto */

#ifndef PROTOBUF_C_PendingGroupPreKey_2eproto__INCLUDED
#define PROTOBUF_C_PendingGroupPreKey_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "skissm/E2eeAddress.pb-c.h"

typedef struct Skissm__PendingGroupPreKey Skissm__PendingGroupPreKey;


/* --- enums --- */


/* --- messages --- */

struct  Skissm__PendingGroupPreKey
{
  ProtobufCMessage base;
  char *outbound_group_session_id;
  Skissm__E2eeAddress *member_address;
  ProtobufCBinaryData group_pre_key_plaintext;
};
#define SKISSM__PENDING_GROUP_PRE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&skissm__pending_group_pre_key__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, {0,NULL} }


/* Skissm__PendingGroupPreKey methods */
void   skissm__pending_group_pre_key__init
                     (Skissm__PendingGroupPreKey         *message);
size_t skissm__pending_group_pre_key__get_packed_size
                     (const Skissm__PendingGroupPreKey   *message);
size_t skissm__pending_group_pre_key__pack
                     (const Skissm__PendingGroupPreKey   *message,
                      uint8_t             *out);
size_t skissm__pending_group_pre_key__pack_to_buffer
                     (const Skissm__PendingGroupPreKey   *message,
                      ProtobufCBuffer     *buffer);
Skissm__PendingGroupPreKey *
       skissm__pending_group_pre_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   skissm__pending_group_pre_key__free_unpacked
                     (Skissm__PendingGroupPreKey *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Skissm__PendingGroupPreKey_Closure)
                 (const Skissm__PendingGroupPreKey *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor skissm__pending_group_pre_key__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_PendingGroupPreKey_2eproto__INCLUDED */
