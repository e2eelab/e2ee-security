// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/GroupPreKeyPayload.proto

#include "skissm/GroupPreKeyPayload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace skissm {
constexpr GroupPreKeyPayload::GroupPreKeyPayload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_members_()
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , old_session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chain_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_address_(nullptr)
  , sequence_(0u){}
struct GroupPreKeyPayloadDefaultTypeInternal {
  constexpr GroupPreKeyPayloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupPreKeyPayloadDefaultTypeInternal() {}
  union {
    GroupPreKeyPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupPreKeyPayloadDefaultTypeInternal _GroupPreKeyPayload_default_instance_;
}  // namespace skissm
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skissm_2fGroupPreKeyPayload_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skissm_2fGroupPreKeyPayload_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fGroupPreKeyPayload_2eproto = nullptr;

const uint32_t TableStruct_skissm_2fGroupPreKeyPayload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skissm::GroupPreKeyPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skissm::GroupPreKeyPayload, version_),
  PROTOBUF_FIELD_OFFSET(::skissm::GroupPreKeyPayload, session_id_),
  PROTOBUF_FIELD_OFFSET(::skissm::GroupPreKeyPayload, old_session_id_),
  PROTOBUF_FIELD_OFFSET(::skissm::GroupPreKeyPayload, group_address_),
  PROTOBUF_FIELD_OFFSET(::skissm::GroupPreKeyPayload, group_members_),
  PROTOBUF_FIELD_OFFSET(::skissm::GroupPreKeyPayload, sequence_),
  PROTOBUF_FIELD_OFFSET(::skissm::GroupPreKeyPayload, chain_key_),
  PROTOBUF_FIELD_OFFSET(::skissm::GroupPreKeyPayload, signature_public_key_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::skissm::GroupPreKeyPayload)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skissm::_GroupPreKeyPayload_default_instance_),
};

const char descriptor_table_protodef_skissm_2fGroupPreKeyPayload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037skissm/GroupPreKeyPayload.proto\022\006skiss"
  "m\032\030skissm/E2eeAddress.proto\032\030skissm/Grou"
  "pMember.proto\"\354\001\n\022GroupPreKeyPayload\022\017\n\007"
  "version\030\001 \001(\t\022\022\n\nsession_id\030\002 \001(\t\022\026\n\016old"
  "_session_id\030\003 \001(\t\022*\n\rgroup_address\030\004 \001(\013"
  "2\023.skissm.E2eeAddress\022*\n\rgroup_members\030\005"
  " \003(\0132\023.skissm.GroupMember\022\020\n\010sequence\030\006 "
  "\001(\r\022\021\n\tchain_key\030\007 \001(\014\022\034\n\024signature_publ"
  "ic_key\030\010 \001(\014B3\n\030org.e2eelab.skissm.proto"
  "B\027GroupPreKeyPayloadProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skissm_2fGroupPreKeyPayload_2eproto_deps[2] = {
  &::descriptor_table_skissm_2fE2eeAddress_2eproto,
  &::descriptor_table_skissm_2fGroupMember_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fGroupPreKeyPayload_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fGroupPreKeyPayload_2eproto = {
  false, false, 393, descriptor_table_protodef_skissm_2fGroupPreKeyPayload_2eproto, "skissm/GroupPreKeyPayload.proto", 
  &descriptor_table_skissm_2fGroupPreKeyPayload_2eproto_once, descriptor_table_skissm_2fGroupPreKeyPayload_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_skissm_2fGroupPreKeyPayload_2eproto::offsets,
  file_level_metadata_skissm_2fGroupPreKeyPayload_2eproto, file_level_enum_descriptors_skissm_2fGroupPreKeyPayload_2eproto, file_level_service_descriptors_skissm_2fGroupPreKeyPayload_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fGroupPreKeyPayload_2eproto_getter() {
  return &descriptor_table_skissm_2fGroupPreKeyPayload_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fGroupPreKeyPayload_2eproto(&descriptor_table_skissm_2fGroupPreKeyPayload_2eproto);
namespace skissm {

// ===================================================================

class GroupPreKeyPayload::_Internal {
 public:
  static const ::skissm::E2eeAddress& group_address(const GroupPreKeyPayload* msg);
};

const ::skissm::E2eeAddress&
GroupPreKeyPayload::_Internal::group_address(const GroupPreKeyPayload* msg) {
  return *msg->group_address_;
}
void GroupPreKeyPayload::clear_group_address() {
  if (GetArenaForAllocation() == nullptr && group_address_ != nullptr) {
    delete group_address_;
  }
  group_address_ = nullptr;
}
void GroupPreKeyPayload::clear_group_members() {
  group_members_.Clear();
}
GroupPreKeyPayload::GroupPreKeyPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  group_members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:skissm.GroupPreKeyPayload)
}
GroupPreKeyPayload::GroupPreKeyPayload(const GroupPreKeyPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      group_members_(from.group_members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  old_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    old_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_old_session_id().empty()) {
    old_session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_old_session_id(), 
      GetArenaForAllocation());
  }
  chain_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chain_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_key().empty()) {
    chain_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_key(), 
      GetArenaForAllocation());
  }
  signature_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature_public_key().empty()) {
    signature_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature_public_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_group_address()) {
    group_address_ = new ::skissm::E2eeAddress(*from.group_address_);
  } else {
    group_address_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:skissm.GroupPreKeyPayload)
}

inline void GroupPreKeyPayload::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
old_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  old_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chain_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chain_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signature_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&group_address_)) + sizeof(sequence_));
}

GroupPreKeyPayload::~GroupPreKeyPayload() {
  // @@protoc_insertion_point(destructor:skissm.GroupPreKeyPayload)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GroupPreKeyPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete group_address_;
}

void GroupPreKeyPayload::ArenaDtor(void* object) {
  GroupPreKeyPayload* _this = reinterpret_cast< GroupPreKeyPayload* >(object);
  (void)_this;
}
void GroupPreKeyPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupPreKeyPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupPreKeyPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:skissm.GroupPreKeyPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_members_.Clear();
  version_.ClearToEmpty();
  session_id_.ClearToEmpty();
  old_session_id_.ClearToEmpty();
  chain_key_.ClearToEmpty();
  signature_public_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && group_address_ != nullptr) {
    delete group_address_;
  }
  group_address_ = nullptr;
  sequence_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupPreKeyPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.GroupPreKeyPayload.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.GroupPreKeyPayload.session_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string old_session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_old_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.GroupPreKeyPayload.old_session_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.E2eeAddress group_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .skissm.GroupMember group_members = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 sequence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes chain_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_chain_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes signature_public_key = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_signature_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupPreKeyPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skissm.GroupPreKeyPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.GroupPreKeyPayload.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.GroupPreKeyPayload.session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_id(), target);
  }

  // string old_session_id = 3;
  if (!this->_internal_old_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_old_session_id().data(), static_cast<int>(this->_internal_old_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.GroupPreKeyPayload.old_session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_old_session_id(), target);
  }

  // .skissm.E2eeAddress group_address = 4;
  if (this->_internal_has_group_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::group_address(this), target, stream);
  }

  // repeated .skissm.GroupMember group_members = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_group_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_group_members(i), target, stream);
  }

  // uint32 sequence = 6;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_sequence(), target);
  }

  // bytes chain_key = 7;
  if (!this->_internal_chain_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_chain_key(), target);
  }

  // bytes signature_public_key = 8;
  if (!this->_internal_signature_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_signature_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skissm.GroupPreKeyPayload)
  return target;
}

size_t GroupPreKeyPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skissm.GroupPreKeyPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .skissm.GroupMember group_members = 5;
  total_size += 1UL * this->_internal_group_members_size();
  for (const auto& msg : this->group_members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string old_session_id = 3;
  if (!this->_internal_old_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_old_session_id());
  }

  // bytes chain_key = 7;
  if (!this->_internal_chain_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chain_key());
  }

  // bytes signature_public_key = 8;
  if (!this->_internal_signature_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature_public_key());
  }

  // .skissm.E2eeAddress group_address = 4;
  if (this->_internal_has_group_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_address_);
  }

  // uint32 sequence = 6;
  if (this->_internal_sequence() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupPreKeyPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GroupPreKeyPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupPreKeyPayload::GetClassData() const { return &_class_data_; }

void GroupPreKeyPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GroupPreKeyPayload *>(to)->MergeFrom(
      static_cast<const GroupPreKeyPayload &>(from));
}


void GroupPreKeyPayload::MergeFrom(const GroupPreKeyPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skissm.GroupPreKeyPayload)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  group_members_.MergeFrom(from.group_members_);
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_session_id().empty()) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_old_session_id().empty()) {
    _internal_set_old_session_id(from._internal_old_session_id());
  }
  if (!from._internal_chain_key().empty()) {
    _internal_set_chain_key(from._internal_chain_key());
  }
  if (!from._internal_signature_public_key().empty()) {
    _internal_set_signature_public_key(from._internal_signature_public_key());
  }
  if (from._internal_has_group_address()) {
    _internal_mutable_group_address()->::skissm::E2eeAddress::MergeFrom(from._internal_group_address());
  }
  if (from._internal_sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupPreKeyPayload::CopyFrom(const GroupPreKeyPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skissm.GroupPreKeyPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupPreKeyPayload::IsInitialized() const {
  return true;
}

void GroupPreKeyPayload::InternalSwap(GroupPreKeyPayload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  group_members_.InternalSwap(&other->group_members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &old_session_id_, lhs_arena,
      &other->old_session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chain_key_, lhs_arena,
      &other->chain_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_public_key_, lhs_arena,
      &other->signature_public_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupPreKeyPayload, sequence_)
      + sizeof(GroupPreKeyPayload::sequence_)
      - PROTOBUF_FIELD_OFFSET(GroupPreKeyPayload, group_address_)>(
          reinterpret_cast<char*>(&group_address_),
          reinterpret_cast<char*>(&other->group_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupPreKeyPayload::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fGroupPreKeyPayload_2eproto_getter, &descriptor_table_skissm_2fGroupPreKeyPayload_2eproto_once,
      file_level_metadata_skissm_2fGroupPreKeyPayload_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skissm::GroupPreKeyPayload* Arena::CreateMaybeMessage< ::skissm::GroupPreKeyPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skissm::GroupPreKeyPayload >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
