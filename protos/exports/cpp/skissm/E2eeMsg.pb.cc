// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/E2eeMsg.proto

#include "skissm/E2eeMsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace skissm {
constexpr E2eeMsg::E2eeMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_(nullptr)
  , to_(nullptr)
  , _oneof_case_{}{}
struct E2eeMsgDefaultTypeInternal {
  constexpr E2eeMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~E2eeMsgDefaultTypeInternal() {}
  union {
    E2eeMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT E2eeMsgDefaultTypeInternal _E2eeMsg_default_instance_;
}  // namespace skissm
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skissm_2fE2eeMsg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skissm_2fE2eeMsg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fE2eeMsg_2eproto = nullptr;

const uint32_t TableStruct_skissm_2fE2eeMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skissm::E2eeMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::skissm::E2eeMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skissm::E2eeMsg, version_),
  PROTOBUF_FIELD_OFFSET(::skissm::E2eeMsg, from_),
  PROTOBUF_FIELD_OFFSET(::skissm::E2eeMsg, to_),
  PROTOBUF_FIELD_OFFSET(::skissm::E2eeMsg, msg_id_),
  PROTOBUF_FIELD_OFFSET(::skissm::E2eeMsg, session_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::skissm::E2eeMsg, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::skissm::E2eeMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skissm::_E2eeMsg_default_instance_),
};

const char descriptor_table_protodef_skissm_2fE2eeMsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024skissm/E2eeMsg.proto\022\006skissm\032\030skissm/E"
  "2eeAddress.proto\032\036skissm/One2oneMsgPaylo"
  "ad.proto\032\034skissm/GroupMsgPayload.proto\"\355"
  "\001\n\007E2eeMsg\022\017\n\007version\030\001 \001(\t\022!\n\004from\030\002 \001("
  "\0132\023.skissm.E2eeAddress\022\037\n\002to\030\003 \001(\0132\023.ski"
  "ssm.E2eeAddress\022\016\n\006msg_id\030\004 \001(\t\022\022\n\nsessi"
  "on_id\030\005 \001(\t\0220\n\013one2one_msg\030\006 \001(\0132\031.skiss"
  "m.One2oneMsgPayloadH\000\022,\n\tgroup_msg\030\007 \001(\013"
  "2\027.skissm.GroupMsgPayloadH\000B\t\n\007payloadB("
  "\n\030org.e2eelab.skissm.protoB\014E2eeMsgProto"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skissm_2fE2eeMsg_2eproto_deps[3] = {
  &::descriptor_table_skissm_2fE2eeAddress_2eproto,
  &::descriptor_table_skissm_2fGroupMsgPayload_2eproto,
  &::descriptor_table_skissm_2fOne2oneMsgPayload_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fE2eeMsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fE2eeMsg_2eproto = {
  false, false, 408, descriptor_table_protodef_skissm_2fE2eeMsg_2eproto, "skissm/E2eeMsg.proto", 
  &descriptor_table_skissm_2fE2eeMsg_2eproto_once, descriptor_table_skissm_2fE2eeMsg_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_skissm_2fE2eeMsg_2eproto::offsets,
  file_level_metadata_skissm_2fE2eeMsg_2eproto, file_level_enum_descriptors_skissm_2fE2eeMsg_2eproto, file_level_service_descriptors_skissm_2fE2eeMsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fE2eeMsg_2eproto_getter() {
  return &descriptor_table_skissm_2fE2eeMsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fE2eeMsg_2eproto(&descriptor_table_skissm_2fE2eeMsg_2eproto);
namespace skissm {

// ===================================================================

class E2eeMsg::_Internal {
 public:
  static const ::skissm::E2eeAddress& from(const E2eeMsg* msg);
  static const ::skissm::E2eeAddress& to(const E2eeMsg* msg);
  static const ::skissm::One2oneMsgPayload& one2one_msg(const E2eeMsg* msg);
  static const ::skissm::GroupMsgPayload& group_msg(const E2eeMsg* msg);
};

const ::skissm::E2eeAddress&
E2eeMsg::_Internal::from(const E2eeMsg* msg) {
  return *msg->from_;
}
const ::skissm::E2eeAddress&
E2eeMsg::_Internal::to(const E2eeMsg* msg) {
  return *msg->to_;
}
const ::skissm::One2oneMsgPayload&
E2eeMsg::_Internal::one2one_msg(const E2eeMsg* msg) {
  return *msg->payload_.one2one_msg_;
}
const ::skissm::GroupMsgPayload&
E2eeMsg::_Internal::group_msg(const E2eeMsg* msg) {
  return *msg->payload_.group_msg_;
}
void E2eeMsg::clear_from() {
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
void E2eeMsg::clear_to() {
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
}
void E2eeMsg::set_allocated_one2one_msg(::skissm::One2oneMsgPayload* one2one_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (one2one_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(one2one_msg));
    if (message_arena != submessage_arena) {
      one2one_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, one2one_msg, submessage_arena);
    }
    set_has_one2one_msg();
    payload_.one2one_msg_ = one2one_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:skissm.E2eeMsg.one2one_msg)
}
void E2eeMsg::clear_one2one_msg() {
  if (_internal_has_one2one_msg()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.one2one_msg_;
    }
    clear_has_payload();
  }
}
void E2eeMsg::set_allocated_group_msg(::skissm::GroupMsgPayload* group_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (group_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_msg));
    if (message_arena != submessage_arena) {
      group_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_msg, submessage_arena);
    }
    set_has_group_msg();
    payload_.group_msg_ = group_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:skissm.E2eeMsg.group_msg)
}
void E2eeMsg::clear_group_msg() {
  if (_internal_has_group_msg()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.group_msg_;
    }
    clear_has_payload();
  }
}
E2eeMsg::E2eeMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:skissm.E2eeMsg)
}
E2eeMsg::E2eeMsg(const E2eeMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  msg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_id().empty()) {
    msg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_id(), 
      GetArenaForAllocation());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    from_ = new ::skissm::E2eeAddress(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_to()) {
    to_ = new ::skissm::E2eeAddress(*from.to_);
  } else {
    to_ = nullptr;
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kOne2OneMsg: {
      _internal_mutable_one2one_msg()->::skissm::One2oneMsgPayload::MergeFrom(from._internal_one2one_msg());
      break;
    }
    case kGroupMsg: {
      _internal_mutable_group_msg()->::skissm::GroupMsgPayload::MergeFrom(from._internal_group_msg());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:skissm.E2eeMsg)
}

inline void E2eeMsg::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
msg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
clear_has_payload();
}

E2eeMsg::~E2eeMsg() {
  // @@protoc_insertion_point(destructor:skissm.E2eeMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void E2eeMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
  if (has_payload()) {
    clear_payload();
  }
}

void E2eeMsg::ArenaDtor(void* object) {
  E2eeMsg* _this = reinterpret_cast< E2eeMsg* >(object);
  (void)_this;
}
void E2eeMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void E2eeMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void E2eeMsg::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:skissm.E2eeMsg)
  switch (payload_case()) {
    case kOne2OneMsg: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.one2one_msg_;
      }
      break;
    }
    case kGroupMsg: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.group_msg_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void E2eeMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:skissm.E2eeMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty();
  msg_id_.ClearToEmpty();
  session_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* E2eeMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.E2eeMsg.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.E2eeAddress from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.E2eeAddress to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_msg_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.E2eeMsg.msg_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.E2eeMsg.session_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.One2oneMsgPayload one2one_msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_one2one_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.GroupMsgPayload group_msg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* E2eeMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skissm.E2eeMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.E2eeMsg.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // .skissm.E2eeAddress from = 2;
  if (this->_internal_has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::from(this), target, stream);
  }

  // .skissm.E2eeAddress to = 3;
  if (this->_internal_has_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::to(this), target, stream);
  }

  // string msg_id = 4;
  if (!this->_internal_msg_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_id().data(), static_cast<int>(this->_internal_msg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.E2eeMsg.msg_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg_id(), target);
  }

  // string session_id = 5;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.E2eeMsg.session_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_session_id(), target);
  }

  // .skissm.One2oneMsgPayload one2one_msg = 6;
  if (_internal_has_one2one_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::one2one_msg(this), target, stream);
  }

  // .skissm.GroupMsgPayload group_msg = 7;
  if (_internal_has_group_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::group_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skissm.E2eeMsg)
  return target;
}

size_t E2eeMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skissm.E2eeMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string msg_id = 4;
  if (!this->_internal_msg_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_id());
  }

  // string session_id = 5;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .skissm.E2eeAddress from = 2;
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .skissm.E2eeAddress to = 3;
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_);
  }

  switch (payload_case()) {
    // .skissm.One2oneMsgPayload one2one_msg = 6;
    case kOne2OneMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.one2one_msg_);
      break;
    }
    // .skissm.GroupMsgPayload group_msg = 7;
    case kGroupMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.group_msg_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData E2eeMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    E2eeMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*E2eeMsg::GetClassData() const { return &_class_data_; }

void E2eeMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<E2eeMsg *>(to)->MergeFrom(
      static_cast<const E2eeMsg &>(from));
}


void E2eeMsg::MergeFrom(const E2eeMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skissm.E2eeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_msg_id().empty()) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (!from._internal_session_id().empty()) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_has_from()) {
    _internal_mutable_from()->::skissm::E2eeAddress::MergeFrom(from._internal_from());
  }
  if (from._internal_has_to()) {
    _internal_mutable_to()->::skissm::E2eeAddress::MergeFrom(from._internal_to());
  }
  switch (from.payload_case()) {
    case kOne2OneMsg: {
      _internal_mutable_one2one_msg()->::skissm::One2oneMsgPayload::MergeFrom(from._internal_one2one_msg());
      break;
    }
    case kGroupMsg: {
      _internal_mutable_group_msg()->::skissm::GroupMsgPayload::MergeFrom(from._internal_group_msg());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void E2eeMsg::CopyFrom(const E2eeMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skissm.E2eeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E2eeMsg::IsInitialized() const {
  return true;
}

void E2eeMsg::InternalSwap(E2eeMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_id_, lhs_arena,
      &other->msg_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(E2eeMsg, to_)
      + sizeof(E2eeMsg::to_)
      - PROTOBUF_FIELD_OFFSET(E2eeMsg, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata E2eeMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fE2eeMsg_2eproto_getter, &descriptor_table_skissm_2fE2eeMsg_2eproto_once,
      file_level_metadata_skissm_2fE2eeMsg_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skissm::E2eeMsg* Arena::CreateMaybeMessage< ::skissm::E2eeMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skissm::E2eeMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
