// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/E2eeMsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skissm_2fE2eeMsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skissm_2fE2eeMsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "skissm/E2eeAddress.pb.h"
#include "skissm/One2oneMsgPayload.pb.h"
#include "skissm/GroupMsgPayload.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skissm_2fE2eeMsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skissm_2fE2eeMsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fE2eeMsg_2eproto;
namespace skissm {
class E2eeMsg;
struct E2eeMsgDefaultTypeInternal;
extern E2eeMsgDefaultTypeInternal _E2eeMsg_default_instance_;
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> ::skissm::E2eeMsg* Arena::CreateMaybeMessage<::skissm::E2eeMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace skissm {

// ===================================================================

class E2eeMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skissm.E2eeMsg) */ {
 public:
  inline E2eeMsg() : E2eeMsg(nullptr) {}
  ~E2eeMsg() override;
  explicit constexpr E2eeMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  E2eeMsg(const E2eeMsg& from);
  E2eeMsg(E2eeMsg&& from) noexcept
    : E2eeMsg() {
    *this = ::std::move(from);
  }

  inline E2eeMsg& operator=(const E2eeMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline E2eeMsg& operator=(E2eeMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const E2eeMsg& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kOne2OneMsg = 6,
    kGroupMsg = 7,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const E2eeMsg* internal_default_instance() {
    return reinterpret_cast<const E2eeMsg*>(
               &_E2eeMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(E2eeMsg& a, E2eeMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(E2eeMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(E2eeMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  E2eeMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<E2eeMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const E2eeMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const E2eeMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(E2eeMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skissm.E2eeMsg";
  }
  protected:
  explicit E2eeMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kMsgIdFieldNumber = 4,
    kSessionIdFieldNumber = 5,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kOne2OneMsgFieldNumber = 6,
    kGroupMsgFieldNumber = 7,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string msg_id = 4;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // string session_id = 5;
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .skissm.E2eeAddress from = 2;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::skissm::E2eeAddress& from() const;
  PROTOBUF_NODISCARD ::skissm::E2eeAddress* release_from();
  ::skissm::E2eeAddress* mutable_from();
  void set_allocated_from(::skissm::E2eeAddress* from);
  private:
  const ::skissm::E2eeAddress& _internal_from() const;
  ::skissm::E2eeAddress* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::skissm::E2eeAddress* from);
  ::skissm::E2eeAddress* unsafe_arena_release_from();

  // .skissm.E2eeAddress to = 3;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::skissm::E2eeAddress& to() const;
  PROTOBUF_NODISCARD ::skissm::E2eeAddress* release_to();
  ::skissm::E2eeAddress* mutable_to();
  void set_allocated_to(::skissm::E2eeAddress* to);
  private:
  const ::skissm::E2eeAddress& _internal_to() const;
  ::skissm::E2eeAddress* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::skissm::E2eeAddress* to);
  ::skissm::E2eeAddress* unsafe_arena_release_to();

  // .skissm.One2oneMsgPayload one2one_msg = 6;
  bool has_one2one_msg() const;
  private:
  bool _internal_has_one2one_msg() const;
  public:
  void clear_one2one_msg();
  const ::skissm::One2oneMsgPayload& one2one_msg() const;
  PROTOBUF_NODISCARD ::skissm::One2oneMsgPayload* release_one2one_msg();
  ::skissm::One2oneMsgPayload* mutable_one2one_msg();
  void set_allocated_one2one_msg(::skissm::One2oneMsgPayload* one2one_msg);
  private:
  const ::skissm::One2oneMsgPayload& _internal_one2one_msg() const;
  ::skissm::One2oneMsgPayload* _internal_mutable_one2one_msg();
  public:
  void unsafe_arena_set_allocated_one2one_msg(
      ::skissm::One2oneMsgPayload* one2one_msg);
  ::skissm::One2oneMsgPayload* unsafe_arena_release_one2one_msg();

  // .skissm.GroupMsgPayload group_msg = 7;
  bool has_group_msg() const;
  private:
  bool _internal_has_group_msg() const;
  public:
  void clear_group_msg();
  const ::skissm::GroupMsgPayload& group_msg() const;
  PROTOBUF_NODISCARD ::skissm::GroupMsgPayload* release_group_msg();
  ::skissm::GroupMsgPayload* mutable_group_msg();
  void set_allocated_group_msg(::skissm::GroupMsgPayload* group_msg);
  private:
  const ::skissm::GroupMsgPayload& _internal_group_msg() const;
  ::skissm::GroupMsgPayload* _internal_mutable_group_msg();
  public:
  void unsafe_arena_set_allocated_group_msg(
      ::skissm::GroupMsgPayload* group_msg);
  ::skissm::GroupMsgPayload* unsafe_arena_release_group_msg();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:skissm.E2eeMsg)
 private:
  class _Internal;
  void set_has_one2one_msg();
  void set_has_group_msg();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::skissm::E2eeAddress* from_;
  ::skissm::E2eeAddress* to_;
  union PayloadUnion {
    constexpr PayloadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::skissm::One2oneMsgPayload* one2one_msg_;
    ::skissm::GroupMsgPayload* group_msg_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_skissm_2fE2eeMsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// E2eeMsg

// string version = 1;
inline void E2eeMsg::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& E2eeMsg::version() const {
  // @@protoc_insertion_point(field_get:skissm.E2eeMsg.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void E2eeMsg::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.E2eeMsg.version)
}
inline std::string* E2eeMsg::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:skissm.E2eeMsg.version)
  return _s;
}
inline const std::string& E2eeMsg::_internal_version() const {
  return version_.Get();
}
inline void E2eeMsg::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* E2eeMsg::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* E2eeMsg::release_version() {
  // @@protoc_insertion_point(field_release:skissm.E2eeMsg.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void E2eeMsg::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.E2eeMsg.version)
}

// .skissm.E2eeAddress from = 2;
inline bool E2eeMsg::_internal_has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline bool E2eeMsg::has_from() const {
  return _internal_has_from();
}
inline const ::skissm::E2eeAddress& E2eeMsg::_internal_from() const {
  const ::skissm::E2eeAddress* p = from_;
  return p != nullptr ? *p : reinterpret_cast<const ::skissm::E2eeAddress&>(
      ::skissm::_E2eeAddress_default_instance_);
}
inline const ::skissm::E2eeAddress& E2eeMsg::from() const {
  // @@protoc_insertion_point(field_get:skissm.E2eeMsg.from)
  return _internal_from();
}
inline void E2eeMsg::unsafe_arena_set_allocated_from(
    ::skissm::E2eeAddress* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:skissm.E2eeMsg.from)
}
inline ::skissm::E2eeAddress* E2eeMsg::release_from() {
  
  ::skissm::E2eeAddress* temp = from_;
  from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::skissm::E2eeAddress* E2eeMsg::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:skissm.E2eeMsg.from)
  
  ::skissm::E2eeAddress* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::skissm::E2eeAddress* E2eeMsg::_internal_mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::skissm::E2eeAddress>(GetArenaForAllocation());
    from_ = p;
  }
  return from_;
}
inline ::skissm::E2eeAddress* E2eeMsg::mutable_from() {
  ::skissm::E2eeAddress* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:skissm.E2eeMsg.from)
  return _msg;
}
inline void E2eeMsg::set_allocated_from(::skissm::E2eeAddress* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from));
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:skissm.E2eeMsg.from)
}

// .skissm.E2eeAddress to = 3;
inline bool E2eeMsg::_internal_has_to() const {
  return this != internal_default_instance() && to_ != nullptr;
}
inline bool E2eeMsg::has_to() const {
  return _internal_has_to();
}
inline const ::skissm::E2eeAddress& E2eeMsg::_internal_to() const {
  const ::skissm::E2eeAddress* p = to_;
  return p != nullptr ? *p : reinterpret_cast<const ::skissm::E2eeAddress&>(
      ::skissm::_E2eeAddress_default_instance_);
}
inline const ::skissm::E2eeAddress& E2eeMsg::to() const {
  // @@protoc_insertion_point(field_get:skissm.E2eeMsg.to)
  return _internal_to();
}
inline void E2eeMsg::unsafe_arena_set_allocated_to(
    ::skissm::E2eeAddress* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:skissm.E2eeMsg.to)
}
inline ::skissm::E2eeAddress* E2eeMsg::release_to() {
  
  ::skissm::E2eeAddress* temp = to_;
  to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::skissm::E2eeAddress* E2eeMsg::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:skissm.E2eeMsg.to)
  
  ::skissm::E2eeAddress* temp = to_;
  to_ = nullptr;
  return temp;
}
inline ::skissm::E2eeAddress* E2eeMsg::_internal_mutable_to() {
  
  if (to_ == nullptr) {
    auto* p = CreateMaybeMessage<::skissm::E2eeAddress>(GetArenaForAllocation());
    to_ = p;
  }
  return to_;
}
inline ::skissm::E2eeAddress* E2eeMsg::mutable_to() {
  ::skissm::E2eeAddress* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:skissm.E2eeMsg.to)
  return _msg;
}
inline void E2eeMsg::set_allocated_to(::skissm::E2eeAddress* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to));
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:skissm.E2eeMsg.to)
}

// string msg_id = 4;
inline void E2eeMsg::clear_msg_id() {
  msg_id_.ClearToEmpty();
}
inline const std::string& E2eeMsg::msg_id() const {
  // @@protoc_insertion_point(field_get:skissm.E2eeMsg.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void E2eeMsg::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 msg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.E2eeMsg.msg_id)
}
inline std::string* E2eeMsg::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:skissm.E2eeMsg.msg_id)
  return _s;
}
inline const std::string& E2eeMsg::_internal_msg_id() const {
  return msg_id_.Get();
}
inline void E2eeMsg::_internal_set_msg_id(const std::string& value) {
  
  msg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* E2eeMsg::_internal_mutable_msg_id() {
  
  return msg_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* E2eeMsg::release_msg_id() {
  // @@protoc_insertion_point(field_release:skissm.E2eeMsg.msg_id)
  return msg_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void E2eeMsg::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  msg_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.E2eeMsg.msg_id)
}

// string session_id = 5;
inline void E2eeMsg::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& E2eeMsg::session_id() const {
  // @@protoc_insertion_point(field_get:skissm.E2eeMsg.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void E2eeMsg::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.E2eeMsg.session_id)
}
inline std::string* E2eeMsg::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:skissm.E2eeMsg.session_id)
  return _s;
}
inline const std::string& E2eeMsg::_internal_session_id() const {
  return session_id_.Get();
}
inline void E2eeMsg::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* E2eeMsg::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* E2eeMsg::release_session_id() {
  // @@protoc_insertion_point(field_release:skissm.E2eeMsg.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void E2eeMsg::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.E2eeMsg.session_id)
}

// .skissm.One2oneMsgPayload one2one_msg = 6;
inline bool E2eeMsg::_internal_has_one2one_msg() const {
  return payload_case() == kOne2OneMsg;
}
inline bool E2eeMsg::has_one2one_msg() const {
  return _internal_has_one2one_msg();
}
inline void E2eeMsg::set_has_one2one_msg() {
  _oneof_case_[0] = kOne2OneMsg;
}
inline ::skissm::One2oneMsgPayload* E2eeMsg::release_one2one_msg() {
  // @@protoc_insertion_point(field_release:skissm.E2eeMsg.one2one_msg)
  if (_internal_has_one2one_msg()) {
    clear_has_payload();
      ::skissm::One2oneMsgPayload* temp = payload_.one2one_msg_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.one2one_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::skissm::One2oneMsgPayload& E2eeMsg::_internal_one2one_msg() const {
  return _internal_has_one2one_msg()
      ? *payload_.one2one_msg_
      : reinterpret_cast< ::skissm::One2oneMsgPayload&>(::skissm::_One2oneMsgPayload_default_instance_);
}
inline const ::skissm::One2oneMsgPayload& E2eeMsg::one2one_msg() const {
  // @@protoc_insertion_point(field_get:skissm.E2eeMsg.one2one_msg)
  return _internal_one2one_msg();
}
inline ::skissm::One2oneMsgPayload* E2eeMsg::unsafe_arena_release_one2one_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:skissm.E2eeMsg.one2one_msg)
  if (_internal_has_one2one_msg()) {
    clear_has_payload();
    ::skissm::One2oneMsgPayload* temp = payload_.one2one_msg_;
    payload_.one2one_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void E2eeMsg::unsafe_arena_set_allocated_one2one_msg(::skissm::One2oneMsgPayload* one2one_msg) {
  clear_payload();
  if (one2one_msg) {
    set_has_one2one_msg();
    payload_.one2one_msg_ = one2one_msg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:skissm.E2eeMsg.one2one_msg)
}
inline ::skissm::One2oneMsgPayload* E2eeMsg::_internal_mutable_one2one_msg() {
  if (!_internal_has_one2one_msg()) {
    clear_payload();
    set_has_one2one_msg();
    payload_.one2one_msg_ = CreateMaybeMessage< ::skissm::One2oneMsgPayload >(GetArenaForAllocation());
  }
  return payload_.one2one_msg_;
}
inline ::skissm::One2oneMsgPayload* E2eeMsg::mutable_one2one_msg() {
  ::skissm::One2oneMsgPayload* _msg = _internal_mutable_one2one_msg();
  // @@protoc_insertion_point(field_mutable:skissm.E2eeMsg.one2one_msg)
  return _msg;
}

// .skissm.GroupMsgPayload group_msg = 7;
inline bool E2eeMsg::_internal_has_group_msg() const {
  return payload_case() == kGroupMsg;
}
inline bool E2eeMsg::has_group_msg() const {
  return _internal_has_group_msg();
}
inline void E2eeMsg::set_has_group_msg() {
  _oneof_case_[0] = kGroupMsg;
}
inline ::skissm::GroupMsgPayload* E2eeMsg::release_group_msg() {
  // @@protoc_insertion_point(field_release:skissm.E2eeMsg.group_msg)
  if (_internal_has_group_msg()) {
    clear_has_payload();
      ::skissm::GroupMsgPayload* temp = payload_.group_msg_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.group_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::skissm::GroupMsgPayload& E2eeMsg::_internal_group_msg() const {
  return _internal_has_group_msg()
      ? *payload_.group_msg_
      : reinterpret_cast< ::skissm::GroupMsgPayload&>(::skissm::_GroupMsgPayload_default_instance_);
}
inline const ::skissm::GroupMsgPayload& E2eeMsg::group_msg() const {
  // @@protoc_insertion_point(field_get:skissm.E2eeMsg.group_msg)
  return _internal_group_msg();
}
inline ::skissm::GroupMsgPayload* E2eeMsg::unsafe_arena_release_group_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:skissm.E2eeMsg.group_msg)
  if (_internal_has_group_msg()) {
    clear_has_payload();
    ::skissm::GroupMsgPayload* temp = payload_.group_msg_;
    payload_.group_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void E2eeMsg::unsafe_arena_set_allocated_group_msg(::skissm::GroupMsgPayload* group_msg) {
  clear_payload();
  if (group_msg) {
    set_has_group_msg();
    payload_.group_msg_ = group_msg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:skissm.E2eeMsg.group_msg)
}
inline ::skissm::GroupMsgPayload* E2eeMsg::_internal_mutable_group_msg() {
  if (!_internal_has_group_msg()) {
    clear_payload();
    set_has_group_msg();
    payload_.group_msg_ = CreateMaybeMessage< ::skissm::GroupMsgPayload >(GetArenaForAllocation());
  }
  return payload_.group_msg_;
}
inline ::skissm::GroupMsgPayload* E2eeMsg::mutable_group_msg() {
  ::skissm::GroupMsgPayload* _msg = _internal_mutable_group_msg();
  // @@protoc_insertion_point(field_mutable:skissm.E2eeMsg.group_msg)
  return _msg;
}

inline bool E2eeMsg::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void E2eeMsg::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline E2eeMsg::PayloadCase E2eeMsg::payload_case() const {
  return E2eeMsg::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace skissm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skissm_2fE2eeMsg_2eproto
