// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/PublishSpkRequest.proto

#include "skissm/PublishSpkRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace skissm {
constexpr PublishSpkRequest::PublishSpkRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_address_(nullptr)
  , signed_pre_key_public_(nullptr){}
struct PublishSpkRequestDefaultTypeInternal {
  constexpr PublishSpkRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishSpkRequestDefaultTypeInternal() {}
  union {
    PublishSpkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishSpkRequestDefaultTypeInternal _PublishSpkRequest_default_instance_;
}  // namespace skissm
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skissm_2fPublishSpkRequest_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skissm_2fPublishSpkRequest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fPublishSpkRequest_2eproto = nullptr;

const uint32_t TableStruct_skissm_2fPublishSpkRequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skissm::PublishSpkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skissm::PublishSpkRequest, user_address_),
  PROTOBUF_FIELD_OFFSET(::skissm::PublishSpkRequest, signed_pre_key_public_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::skissm::PublishSpkRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skissm::_PublishSpkRequest_default_instance_),
};

const char descriptor_table_protodef_skissm_2fPublishSpkRequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036skissm/PublishSpkRequest.proto\022\006skissm"
  "\032\030skissm/E2eeAddress.proto\032\037skissm/Signe"
  "dPreKeyPublic.proto\"y\n\021PublishSpkRequest"
  "\022)\n\014user_address\030\001 \001(\0132\023.skissm.E2eeAddr"
  "ess\0229\n\025signed_pre_key_public\030\002 \001(\0132\032.ski"
  "ssm.SignedPreKeyPublicB2\n\030org.e2eelab.sk"
  "issm.protoB\026PublishSpkRequestProtob\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skissm_2fPublishSpkRequest_2eproto_deps[2] = {
  &::descriptor_table_skissm_2fE2eeAddress_2eproto,
  &::descriptor_table_skissm_2fSignedPreKeyPublic_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fPublishSpkRequest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fPublishSpkRequest_2eproto = {
  false, false, 282, descriptor_table_protodef_skissm_2fPublishSpkRequest_2eproto, "skissm/PublishSpkRequest.proto", 
  &descriptor_table_skissm_2fPublishSpkRequest_2eproto_once, descriptor_table_skissm_2fPublishSpkRequest_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_skissm_2fPublishSpkRequest_2eproto::offsets,
  file_level_metadata_skissm_2fPublishSpkRequest_2eproto, file_level_enum_descriptors_skissm_2fPublishSpkRequest_2eproto, file_level_service_descriptors_skissm_2fPublishSpkRequest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fPublishSpkRequest_2eproto_getter() {
  return &descriptor_table_skissm_2fPublishSpkRequest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fPublishSpkRequest_2eproto(&descriptor_table_skissm_2fPublishSpkRequest_2eproto);
namespace skissm {

// ===================================================================

class PublishSpkRequest::_Internal {
 public:
  static const ::skissm::E2eeAddress& user_address(const PublishSpkRequest* msg);
  static const ::skissm::SignedPreKeyPublic& signed_pre_key_public(const PublishSpkRequest* msg);
};

const ::skissm::E2eeAddress&
PublishSpkRequest::_Internal::user_address(const PublishSpkRequest* msg) {
  return *msg->user_address_;
}
const ::skissm::SignedPreKeyPublic&
PublishSpkRequest::_Internal::signed_pre_key_public(const PublishSpkRequest* msg) {
  return *msg->signed_pre_key_public_;
}
void PublishSpkRequest::clear_user_address() {
  if (GetArenaForAllocation() == nullptr && user_address_ != nullptr) {
    delete user_address_;
  }
  user_address_ = nullptr;
}
void PublishSpkRequest::clear_signed_pre_key_public() {
  if (GetArenaForAllocation() == nullptr && signed_pre_key_public_ != nullptr) {
    delete signed_pre_key_public_;
  }
  signed_pre_key_public_ = nullptr;
}
PublishSpkRequest::PublishSpkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:skissm.PublishSpkRequest)
}
PublishSpkRequest::PublishSpkRequest(const PublishSpkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_address()) {
    user_address_ = new ::skissm::E2eeAddress(*from.user_address_);
  } else {
    user_address_ = nullptr;
  }
  if (from._internal_has_signed_pre_key_public()) {
    signed_pre_key_public_ = new ::skissm::SignedPreKeyPublic(*from.signed_pre_key_public_);
  } else {
    signed_pre_key_public_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:skissm.PublishSpkRequest)
}

inline void PublishSpkRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signed_pre_key_public_) -
    reinterpret_cast<char*>(&user_address_)) + sizeof(signed_pre_key_public_));
}

PublishSpkRequest::~PublishSpkRequest() {
  // @@protoc_insertion_point(destructor:skissm.PublishSpkRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublishSpkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_address_;
  if (this != internal_default_instance()) delete signed_pre_key_public_;
}

void PublishSpkRequest::ArenaDtor(void* object) {
  PublishSpkRequest* _this = reinterpret_cast< PublishSpkRequest* >(object);
  (void)_this;
}
void PublishSpkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishSpkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishSpkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:skissm.PublishSpkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_address_ != nullptr) {
    delete user_address_;
  }
  user_address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && signed_pre_key_public_ != nullptr) {
    delete signed_pre_key_public_;
  }
  signed_pre_key_public_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishSpkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .skissm.E2eeAddress user_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.SignedPreKeyPublic signed_pre_key_public = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signed_pre_key_public(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishSpkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skissm.PublishSpkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .skissm.E2eeAddress user_address = 1;
  if (this->_internal_has_user_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_address(this), target, stream);
  }

  // .skissm.SignedPreKeyPublic signed_pre_key_public = 2;
  if (this->_internal_has_signed_pre_key_public()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signed_pre_key_public(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skissm.PublishSpkRequest)
  return target;
}

size_t PublishSpkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skissm.PublishSpkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .skissm.E2eeAddress user_address = 1;
  if (this->_internal_has_user_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_address_);
  }

  // .skissm.SignedPreKeyPublic signed_pre_key_public = 2;
  if (this->_internal_has_signed_pre_key_public()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signed_pre_key_public_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishSpkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublishSpkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishSpkRequest::GetClassData() const { return &_class_data_; }

void PublishSpkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublishSpkRequest *>(to)->MergeFrom(
      static_cast<const PublishSpkRequest &>(from));
}


void PublishSpkRequest::MergeFrom(const PublishSpkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skissm.PublishSpkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_address()) {
    _internal_mutable_user_address()->::skissm::E2eeAddress::MergeFrom(from._internal_user_address());
  }
  if (from._internal_has_signed_pre_key_public()) {
    _internal_mutable_signed_pre_key_public()->::skissm::SignedPreKeyPublic::MergeFrom(from._internal_signed_pre_key_public());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishSpkRequest::CopyFrom(const PublishSpkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skissm.PublishSpkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishSpkRequest::IsInitialized() const {
  return true;
}

void PublishSpkRequest::InternalSwap(PublishSpkRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishSpkRequest, signed_pre_key_public_)
      + sizeof(PublishSpkRequest::signed_pre_key_public_)
      - PROTOBUF_FIELD_OFFSET(PublishSpkRequest, user_address_)>(
          reinterpret_cast<char*>(&user_address_),
          reinterpret_cast<char*>(&other->user_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishSpkRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fPublishSpkRequest_2eproto_getter, &descriptor_table_skissm_2fPublishSpkRequest_2eproto_once,
      file_level_metadata_skissm_2fPublishSpkRequest_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skissm::PublishSpkRequest* Arena::CreateMaybeMessage< ::skissm::PublishSpkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skissm::PublishSpkRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
