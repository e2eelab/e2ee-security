// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/Plaintext.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skissm_2fPlaintext_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skissm_2fPlaintext_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "skissm/GroupPreKeyPayload.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skissm_2fPlaintext_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skissm_2fPlaintext_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fPlaintext_2eproto;
namespace skissm {
class Plaintext;
struct PlaintextDefaultTypeInternal;
extern PlaintextDefaultTypeInternal _Plaintext_default_instance_;
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> ::skissm::Plaintext* Arena::CreateMaybeMessage<::skissm::Plaintext>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace skissm {

// ===================================================================

class Plaintext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skissm.Plaintext) */ {
 public:
  inline Plaintext() : Plaintext(nullptr) {}
  ~Plaintext() override;
  explicit constexpr Plaintext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Plaintext(const Plaintext& from);
  Plaintext(Plaintext&& from) noexcept
    : Plaintext() {
    *this = ::std::move(from);
  }

  inline Plaintext& operator=(const Plaintext& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plaintext& operator=(Plaintext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Plaintext& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kCommonMsg = 2,
    kGroupPreKey = 3,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const Plaintext* internal_default_instance() {
    return reinterpret_cast<const Plaintext*>(
               &_Plaintext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Plaintext& a, Plaintext& b) {
    a.Swap(&b);
  }
  inline void Swap(Plaintext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plaintext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Plaintext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Plaintext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Plaintext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Plaintext& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Plaintext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skissm.Plaintext";
  }
  protected:
  explicit Plaintext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kCommonMsgFieldNumber = 2,
    kGroupPreKeyFieldNumber = 3,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // bytes common_msg = 2;
  bool has_common_msg() const;
  private:
  bool _internal_has_common_msg() const;
  public:
  void clear_common_msg();
  const std::string& common_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_common_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_common_msg();
  PROTOBUF_NODISCARD std::string* release_common_msg();
  void set_allocated_common_msg(std::string* common_msg);
  private:
  const std::string& _internal_common_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_common_msg(const std::string& value);
  std::string* _internal_mutable_common_msg();
  public:

  // .skissm.GroupPreKeyPayload group_pre_key = 3;
  bool has_group_pre_key() const;
  private:
  bool _internal_has_group_pre_key() const;
  public:
  void clear_group_pre_key();
  const ::skissm::GroupPreKeyPayload& group_pre_key() const;
  PROTOBUF_NODISCARD ::skissm::GroupPreKeyPayload* release_group_pre_key();
  ::skissm::GroupPreKeyPayload* mutable_group_pre_key();
  void set_allocated_group_pre_key(::skissm::GroupPreKeyPayload* group_pre_key);
  private:
  const ::skissm::GroupPreKeyPayload& _internal_group_pre_key() const;
  ::skissm::GroupPreKeyPayload* _internal_mutable_group_pre_key();
  public:
  void unsafe_arena_set_allocated_group_pre_key(
      ::skissm::GroupPreKeyPayload* group_pre_key);
  ::skissm::GroupPreKeyPayload* unsafe_arena_release_group_pre_key();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:skissm.Plaintext)
 private:
  class _Internal;
  void set_has_common_msg();
  void set_has_group_pre_key();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  union PayloadUnion {
    constexpr PayloadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr common_msg_;
    ::skissm::GroupPreKeyPayload* group_pre_key_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_skissm_2fPlaintext_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Plaintext

// string version = 1;
inline void Plaintext::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& Plaintext::version() const {
  // @@protoc_insertion_point(field_get:skissm.Plaintext.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Plaintext::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.Plaintext.version)
}
inline std::string* Plaintext::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:skissm.Plaintext.version)
  return _s;
}
inline const std::string& Plaintext::_internal_version() const {
  return version_.Get();
}
inline void Plaintext::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Plaintext::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Plaintext::release_version() {
  // @@protoc_insertion_point(field_release:skissm.Plaintext.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Plaintext::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.Plaintext.version)
}

// bytes common_msg = 2;
inline bool Plaintext::_internal_has_common_msg() const {
  return payload_case() == kCommonMsg;
}
inline bool Plaintext::has_common_msg() const {
  return _internal_has_common_msg();
}
inline void Plaintext::set_has_common_msg() {
  _oneof_case_[0] = kCommonMsg;
}
inline void Plaintext::clear_common_msg() {
  if (_internal_has_common_msg()) {
    payload_.common_msg_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_payload();
  }
}
inline const std::string& Plaintext::common_msg() const {
  // @@protoc_insertion_point(field_get:skissm.Plaintext.common_msg)
  return _internal_common_msg();
}
template <typename ArgT0, typename... ArgT>
inline void Plaintext::set_common_msg(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_common_msg()) {
    clear_payload();
    set_has_common_msg();
    payload_.common_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.common_msg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.Plaintext.common_msg)
}
inline std::string* Plaintext::mutable_common_msg() {
  std::string* _s = _internal_mutable_common_msg();
  // @@protoc_insertion_point(field_mutable:skissm.Plaintext.common_msg)
  return _s;
}
inline const std::string& Plaintext::_internal_common_msg() const {
  if (_internal_has_common_msg()) {
    return payload_.common_msg_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Plaintext::_internal_set_common_msg(const std::string& value) {
  if (!_internal_has_common_msg()) {
    clear_payload();
    set_has_common_msg();
    payload_.common_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.common_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Plaintext::_internal_mutable_common_msg() {
  if (!_internal_has_common_msg()) {
    clear_payload();
    set_has_common_msg();
    payload_.common_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return payload_.common_msg_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Plaintext::release_common_msg() {
  // @@protoc_insertion_point(field_release:skissm.Plaintext.common_msg)
  if (_internal_has_common_msg()) {
    clear_has_payload();
    return payload_.common_msg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Plaintext::set_allocated_common_msg(std::string* common_msg) {
  if (has_payload()) {
    clear_payload();
  }
  if (common_msg != nullptr) {
    set_has_common_msg();
    payload_.common_msg_.UnsafeSetDefault(common_msg);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(common_msg);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:skissm.Plaintext.common_msg)
}

// .skissm.GroupPreKeyPayload group_pre_key = 3;
inline bool Plaintext::_internal_has_group_pre_key() const {
  return payload_case() == kGroupPreKey;
}
inline bool Plaintext::has_group_pre_key() const {
  return _internal_has_group_pre_key();
}
inline void Plaintext::set_has_group_pre_key() {
  _oneof_case_[0] = kGroupPreKey;
}
inline ::skissm::GroupPreKeyPayload* Plaintext::release_group_pre_key() {
  // @@protoc_insertion_point(field_release:skissm.Plaintext.group_pre_key)
  if (_internal_has_group_pre_key()) {
    clear_has_payload();
      ::skissm::GroupPreKeyPayload* temp = payload_.group_pre_key_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.group_pre_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::skissm::GroupPreKeyPayload& Plaintext::_internal_group_pre_key() const {
  return _internal_has_group_pre_key()
      ? *payload_.group_pre_key_
      : reinterpret_cast< ::skissm::GroupPreKeyPayload&>(::skissm::_GroupPreKeyPayload_default_instance_);
}
inline const ::skissm::GroupPreKeyPayload& Plaintext::group_pre_key() const {
  // @@protoc_insertion_point(field_get:skissm.Plaintext.group_pre_key)
  return _internal_group_pre_key();
}
inline ::skissm::GroupPreKeyPayload* Plaintext::unsafe_arena_release_group_pre_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:skissm.Plaintext.group_pre_key)
  if (_internal_has_group_pre_key()) {
    clear_has_payload();
    ::skissm::GroupPreKeyPayload* temp = payload_.group_pre_key_;
    payload_.group_pre_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Plaintext::unsafe_arena_set_allocated_group_pre_key(::skissm::GroupPreKeyPayload* group_pre_key) {
  clear_payload();
  if (group_pre_key) {
    set_has_group_pre_key();
    payload_.group_pre_key_ = group_pre_key;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:skissm.Plaintext.group_pre_key)
}
inline ::skissm::GroupPreKeyPayload* Plaintext::_internal_mutable_group_pre_key() {
  if (!_internal_has_group_pre_key()) {
    clear_payload();
    set_has_group_pre_key();
    payload_.group_pre_key_ = CreateMaybeMessage< ::skissm::GroupPreKeyPayload >(GetArenaForAllocation());
  }
  return payload_.group_pre_key_;
}
inline ::skissm::GroupPreKeyPayload* Plaintext::mutable_group_pre_key() {
  ::skissm::GroupPreKeyPayload* _msg = _internal_mutable_group_pre_key();
  // @@protoc_insertion_point(field_mutable:skissm.Plaintext.group_pre_key)
  return _msg;
}

inline bool Plaintext::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Plaintext::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Plaintext::PayloadCase Plaintext::payload_case() const {
  return Plaintext::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace skissm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skissm_2fPlaintext_2eproto
