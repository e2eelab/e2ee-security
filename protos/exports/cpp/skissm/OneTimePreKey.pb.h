// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/OneTimePreKey.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skissm_2fOneTimePreKey_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skissm_2fOneTimePreKey_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "skissm/KeyPair.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skissm_2fOneTimePreKey_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skissm_2fOneTimePreKey_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fOneTimePreKey_2eproto;
namespace skissm {
class OneTimePreKey;
struct OneTimePreKeyDefaultTypeInternal;
extern OneTimePreKeyDefaultTypeInternal _OneTimePreKey_default_instance_;
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> ::skissm::OneTimePreKey* Arena::CreateMaybeMessage<::skissm::OneTimePreKey>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace skissm {

// ===================================================================

class OneTimePreKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skissm.OneTimePreKey) */ {
 public:
  inline OneTimePreKey() : OneTimePreKey(nullptr) {}
  ~OneTimePreKey() override;
  explicit constexpr OneTimePreKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OneTimePreKey(const OneTimePreKey& from);
  OneTimePreKey(OneTimePreKey&& from) noexcept
    : OneTimePreKey() {
    *this = ::std::move(from);
  }

  inline OneTimePreKey& operator=(const OneTimePreKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneTimePreKey& operator=(OneTimePreKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OneTimePreKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const OneTimePreKey* internal_default_instance() {
    return reinterpret_cast<const OneTimePreKey*>(
               &_OneTimePreKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OneTimePreKey& a, OneTimePreKey& b) {
    a.Swap(&b);
  }
  inline void Swap(OneTimePreKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneTimePreKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OneTimePreKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OneTimePreKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OneTimePreKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OneTimePreKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneTimePreKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skissm.OneTimePreKey";
  }
  protected:
  explicit OneTimePreKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyPairFieldNumber = 3,
    kOpkIdFieldNumber = 1,
    kUsedFieldNumber = 2,
  };
  // .skissm.KeyPair key_pair = 3;
  bool has_key_pair() const;
  private:
  bool _internal_has_key_pair() const;
  public:
  void clear_key_pair();
  const ::skissm::KeyPair& key_pair() const;
  PROTOBUF_NODISCARD ::skissm::KeyPair* release_key_pair();
  ::skissm::KeyPair* mutable_key_pair();
  void set_allocated_key_pair(::skissm::KeyPair* key_pair);
  private:
  const ::skissm::KeyPair& _internal_key_pair() const;
  ::skissm::KeyPair* _internal_mutable_key_pair();
  public:
  void unsafe_arena_set_allocated_key_pair(
      ::skissm::KeyPair* key_pair);
  ::skissm::KeyPair* unsafe_arena_release_key_pair();

  // uint32 opk_id = 1;
  void clear_opk_id();
  uint32_t opk_id() const;
  void set_opk_id(uint32_t value);
  private:
  uint32_t _internal_opk_id() const;
  void _internal_set_opk_id(uint32_t value);
  public:

  // bool used = 2;
  void clear_used();
  bool used() const;
  void set_used(bool value);
  private:
  bool _internal_used() const;
  void _internal_set_used(bool value);
  public:

  // @@protoc_insertion_point(class_scope:skissm.OneTimePreKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::skissm::KeyPair* key_pair_;
  uint32_t opk_id_;
  bool used_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skissm_2fOneTimePreKey_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OneTimePreKey

// uint32 opk_id = 1;
inline void OneTimePreKey::clear_opk_id() {
  opk_id_ = 0u;
}
inline uint32_t OneTimePreKey::_internal_opk_id() const {
  return opk_id_;
}
inline uint32_t OneTimePreKey::opk_id() const {
  // @@protoc_insertion_point(field_get:skissm.OneTimePreKey.opk_id)
  return _internal_opk_id();
}
inline void OneTimePreKey::_internal_set_opk_id(uint32_t value) {
  
  opk_id_ = value;
}
inline void OneTimePreKey::set_opk_id(uint32_t value) {
  _internal_set_opk_id(value);
  // @@protoc_insertion_point(field_set:skissm.OneTimePreKey.opk_id)
}

// bool used = 2;
inline void OneTimePreKey::clear_used() {
  used_ = false;
}
inline bool OneTimePreKey::_internal_used() const {
  return used_;
}
inline bool OneTimePreKey::used() const {
  // @@protoc_insertion_point(field_get:skissm.OneTimePreKey.used)
  return _internal_used();
}
inline void OneTimePreKey::_internal_set_used(bool value) {
  
  used_ = value;
}
inline void OneTimePreKey::set_used(bool value) {
  _internal_set_used(value);
  // @@protoc_insertion_point(field_set:skissm.OneTimePreKey.used)
}

// .skissm.KeyPair key_pair = 3;
inline bool OneTimePreKey::_internal_has_key_pair() const {
  return this != internal_default_instance() && key_pair_ != nullptr;
}
inline bool OneTimePreKey::has_key_pair() const {
  return _internal_has_key_pair();
}
inline const ::skissm::KeyPair& OneTimePreKey::_internal_key_pair() const {
  const ::skissm::KeyPair* p = key_pair_;
  return p != nullptr ? *p : reinterpret_cast<const ::skissm::KeyPair&>(
      ::skissm::_KeyPair_default_instance_);
}
inline const ::skissm::KeyPair& OneTimePreKey::key_pair() const {
  // @@protoc_insertion_point(field_get:skissm.OneTimePreKey.key_pair)
  return _internal_key_pair();
}
inline void OneTimePreKey::unsafe_arena_set_allocated_key_pair(
    ::skissm::KeyPair* key_pair) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_pair_);
  }
  key_pair_ = key_pair;
  if (key_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:skissm.OneTimePreKey.key_pair)
}
inline ::skissm::KeyPair* OneTimePreKey::release_key_pair() {
  
  ::skissm::KeyPair* temp = key_pair_;
  key_pair_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::skissm::KeyPair* OneTimePreKey::unsafe_arena_release_key_pair() {
  // @@protoc_insertion_point(field_release:skissm.OneTimePreKey.key_pair)
  
  ::skissm::KeyPair* temp = key_pair_;
  key_pair_ = nullptr;
  return temp;
}
inline ::skissm::KeyPair* OneTimePreKey::_internal_mutable_key_pair() {
  
  if (key_pair_ == nullptr) {
    auto* p = CreateMaybeMessage<::skissm::KeyPair>(GetArenaForAllocation());
    key_pair_ = p;
  }
  return key_pair_;
}
inline ::skissm::KeyPair* OneTimePreKey::mutable_key_pair() {
  ::skissm::KeyPair* _msg = _internal_mutable_key_pair();
  // @@protoc_insertion_point(field_mutable:skissm.OneTimePreKey.key_pair)
  return _msg;
}
inline void OneTimePreKey::set_allocated_key_pair(::skissm::KeyPair* key_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_pair_);
  }
  if (key_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_pair));
    if (message_arena != submessage_arena) {
      key_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_pair, submessage_arena);
    }
    
  } else {
    
  }
  key_pair_ = key_pair;
  // @@protoc_insertion_point(field_set_allocated:skissm.OneTimePreKey.key_pair)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace skissm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skissm_2fOneTimePreKey_2eproto
