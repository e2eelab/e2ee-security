// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/Ratchet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skissm_2fRatchet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skissm_2fRatchet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "skissm/SenderChainNode.pb.h"
#include "skissm/ReceiverChainNode.pb.h"
#include "skissm/SkippedMsgKeyNode.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skissm_2fRatchet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skissm_2fRatchet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fRatchet_2eproto;
namespace skissm {
class Ratchet;
struct RatchetDefaultTypeInternal;
extern RatchetDefaultTypeInternal _Ratchet_default_instance_;
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> ::skissm::Ratchet* Arena::CreateMaybeMessage<::skissm::Ratchet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace skissm {

// ===================================================================

class Ratchet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skissm.Ratchet) */ {
 public:
  inline Ratchet() : Ratchet(nullptr) {}
  ~Ratchet() override;
  explicit constexpr Ratchet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ratchet(const Ratchet& from);
  Ratchet(Ratchet&& from) noexcept
    : Ratchet() {
    *this = ::std::move(from);
  }

  inline Ratchet& operator=(const Ratchet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ratchet& operator=(Ratchet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ratchet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ratchet* internal_default_instance() {
    return reinterpret_cast<const Ratchet*>(
               &_Ratchet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ratchet& a, Ratchet& b) {
    a.Swap(&b);
  }
  inline void Swap(Ratchet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ratchet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ratchet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ratchet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ratchet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ratchet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ratchet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skissm.Ratchet";
  }
  protected:
  explicit Ratchet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiverChainsFieldNumber = 3,
    kSkippedMsgKeysFieldNumber = 4,
    kRootKeyFieldNumber = 1,
    kSenderChainFieldNumber = 2,
  };
  // repeated .skissm.ReceiverChainNode receiver_chains = 3;
  int receiver_chains_size() const;
  private:
  int _internal_receiver_chains_size() const;
  public:
  void clear_receiver_chains();
  ::skissm::ReceiverChainNode* mutable_receiver_chains(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::ReceiverChainNode >*
      mutable_receiver_chains();
  private:
  const ::skissm::ReceiverChainNode& _internal_receiver_chains(int index) const;
  ::skissm::ReceiverChainNode* _internal_add_receiver_chains();
  public:
  const ::skissm::ReceiverChainNode& receiver_chains(int index) const;
  ::skissm::ReceiverChainNode* add_receiver_chains();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::ReceiverChainNode >&
      receiver_chains() const;

  // repeated .skissm.SkippedMsgKeyNode skipped_msg_keys = 4;
  int skipped_msg_keys_size() const;
  private:
  int _internal_skipped_msg_keys_size() const;
  public:
  void clear_skipped_msg_keys();
  ::skissm::SkippedMsgKeyNode* mutable_skipped_msg_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::SkippedMsgKeyNode >*
      mutable_skipped_msg_keys();
  private:
  const ::skissm::SkippedMsgKeyNode& _internal_skipped_msg_keys(int index) const;
  ::skissm::SkippedMsgKeyNode* _internal_add_skipped_msg_keys();
  public:
  const ::skissm::SkippedMsgKeyNode& skipped_msg_keys(int index) const;
  ::skissm::SkippedMsgKeyNode* add_skipped_msg_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::SkippedMsgKeyNode >&
      skipped_msg_keys() const;

  // bytes root_key = 1;
  void clear_root_key();
  const std::string& root_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_root_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_root_key();
  PROTOBUF_NODISCARD std::string* release_root_key();
  void set_allocated_root_key(std::string* root_key);
  private:
  const std::string& _internal_root_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_key(const std::string& value);
  std::string* _internal_mutable_root_key();
  public:

  // .skissm.SenderChainNode sender_chain = 2;
  bool has_sender_chain() const;
  private:
  bool _internal_has_sender_chain() const;
  public:
  void clear_sender_chain();
  const ::skissm::SenderChainNode& sender_chain() const;
  PROTOBUF_NODISCARD ::skissm::SenderChainNode* release_sender_chain();
  ::skissm::SenderChainNode* mutable_sender_chain();
  void set_allocated_sender_chain(::skissm::SenderChainNode* sender_chain);
  private:
  const ::skissm::SenderChainNode& _internal_sender_chain() const;
  ::skissm::SenderChainNode* _internal_mutable_sender_chain();
  public:
  void unsafe_arena_set_allocated_sender_chain(
      ::skissm::SenderChainNode* sender_chain);
  ::skissm::SenderChainNode* unsafe_arena_release_sender_chain();

  // @@protoc_insertion_point(class_scope:skissm.Ratchet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::ReceiverChainNode > receiver_chains_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::SkippedMsgKeyNode > skipped_msg_keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_key_;
  ::skissm::SenderChainNode* sender_chain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skissm_2fRatchet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ratchet

// bytes root_key = 1;
inline void Ratchet::clear_root_key() {
  root_key_.ClearToEmpty();
}
inline const std::string& Ratchet::root_key() const {
  // @@protoc_insertion_point(field_get:skissm.Ratchet.root_key)
  return _internal_root_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Ratchet::set_root_key(ArgT0&& arg0, ArgT... args) {
 
 root_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.Ratchet.root_key)
}
inline std::string* Ratchet::mutable_root_key() {
  std::string* _s = _internal_mutable_root_key();
  // @@protoc_insertion_point(field_mutable:skissm.Ratchet.root_key)
  return _s;
}
inline const std::string& Ratchet::_internal_root_key() const {
  return root_key_.Get();
}
inline void Ratchet::_internal_set_root_key(const std::string& value) {
  
  root_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Ratchet::_internal_mutable_root_key() {
  
  return root_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Ratchet::release_root_key() {
  // @@protoc_insertion_point(field_release:skissm.Ratchet.root_key)
  return root_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Ratchet::set_allocated_root_key(std::string* root_key) {
  if (root_key != nullptr) {
    
  } else {
    
  }
  root_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (root_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    root_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.Ratchet.root_key)
}

// .skissm.SenderChainNode sender_chain = 2;
inline bool Ratchet::_internal_has_sender_chain() const {
  return this != internal_default_instance() && sender_chain_ != nullptr;
}
inline bool Ratchet::has_sender_chain() const {
  return _internal_has_sender_chain();
}
inline const ::skissm::SenderChainNode& Ratchet::_internal_sender_chain() const {
  const ::skissm::SenderChainNode* p = sender_chain_;
  return p != nullptr ? *p : reinterpret_cast<const ::skissm::SenderChainNode&>(
      ::skissm::_SenderChainNode_default_instance_);
}
inline const ::skissm::SenderChainNode& Ratchet::sender_chain() const {
  // @@protoc_insertion_point(field_get:skissm.Ratchet.sender_chain)
  return _internal_sender_chain();
}
inline void Ratchet::unsafe_arena_set_allocated_sender_chain(
    ::skissm::SenderChainNode* sender_chain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_chain_);
  }
  sender_chain_ = sender_chain;
  if (sender_chain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:skissm.Ratchet.sender_chain)
}
inline ::skissm::SenderChainNode* Ratchet::release_sender_chain() {
  
  ::skissm::SenderChainNode* temp = sender_chain_;
  sender_chain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::skissm::SenderChainNode* Ratchet::unsafe_arena_release_sender_chain() {
  // @@protoc_insertion_point(field_release:skissm.Ratchet.sender_chain)
  
  ::skissm::SenderChainNode* temp = sender_chain_;
  sender_chain_ = nullptr;
  return temp;
}
inline ::skissm::SenderChainNode* Ratchet::_internal_mutable_sender_chain() {
  
  if (sender_chain_ == nullptr) {
    auto* p = CreateMaybeMessage<::skissm::SenderChainNode>(GetArenaForAllocation());
    sender_chain_ = p;
  }
  return sender_chain_;
}
inline ::skissm::SenderChainNode* Ratchet::mutable_sender_chain() {
  ::skissm::SenderChainNode* _msg = _internal_mutable_sender_chain();
  // @@protoc_insertion_point(field_mutable:skissm.Ratchet.sender_chain)
  return _msg;
}
inline void Ratchet::set_allocated_sender_chain(::skissm::SenderChainNode* sender_chain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_chain_);
  }
  if (sender_chain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_chain));
    if (message_arena != submessage_arena) {
      sender_chain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender_chain, submessage_arena);
    }
    
  } else {
    
  }
  sender_chain_ = sender_chain;
  // @@protoc_insertion_point(field_set_allocated:skissm.Ratchet.sender_chain)
}

// repeated .skissm.ReceiverChainNode receiver_chains = 3;
inline int Ratchet::_internal_receiver_chains_size() const {
  return receiver_chains_.size();
}
inline int Ratchet::receiver_chains_size() const {
  return _internal_receiver_chains_size();
}
inline ::skissm::ReceiverChainNode* Ratchet::mutable_receiver_chains(int index) {
  // @@protoc_insertion_point(field_mutable:skissm.Ratchet.receiver_chains)
  return receiver_chains_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::ReceiverChainNode >*
Ratchet::mutable_receiver_chains() {
  // @@protoc_insertion_point(field_mutable_list:skissm.Ratchet.receiver_chains)
  return &receiver_chains_;
}
inline const ::skissm::ReceiverChainNode& Ratchet::_internal_receiver_chains(int index) const {
  return receiver_chains_.Get(index);
}
inline const ::skissm::ReceiverChainNode& Ratchet::receiver_chains(int index) const {
  // @@protoc_insertion_point(field_get:skissm.Ratchet.receiver_chains)
  return _internal_receiver_chains(index);
}
inline ::skissm::ReceiverChainNode* Ratchet::_internal_add_receiver_chains() {
  return receiver_chains_.Add();
}
inline ::skissm::ReceiverChainNode* Ratchet::add_receiver_chains() {
  ::skissm::ReceiverChainNode* _add = _internal_add_receiver_chains();
  // @@protoc_insertion_point(field_add:skissm.Ratchet.receiver_chains)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::ReceiverChainNode >&
Ratchet::receiver_chains() const {
  // @@protoc_insertion_point(field_list:skissm.Ratchet.receiver_chains)
  return receiver_chains_;
}

// repeated .skissm.SkippedMsgKeyNode skipped_msg_keys = 4;
inline int Ratchet::_internal_skipped_msg_keys_size() const {
  return skipped_msg_keys_.size();
}
inline int Ratchet::skipped_msg_keys_size() const {
  return _internal_skipped_msg_keys_size();
}
inline ::skissm::SkippedMsgKeyNode* Ratchet::mutable_skipped_msg_keys(int index) {
  // @@protoc_insertion_point(field_mutable:skissm.Ratchet.skipped_msg_keys)
  return skipped_msg_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::SkippedMsgKeyNode >*
Ratchet::mutable_skipped_msg_keys() {
  // @@protoc_insertion_point(field_mutable_list:skissm.Ratchet.skipped_msg_keys)
  return &skipped_msg_keys_;
}
inline const ::skissm::SkippedMsgKeyNode& Ratchet::_internal_skipped_msg_keys(int index) const {
  return skipped_msg_keys_.Get(index);
}
inline const ::skissm::SkippedMsgKeyNode& Ratchet::skipped_msg_keys(int index) const {
  // @@protoc_insertion_point(field_get:skissm.Ratchet.skipped_msg_keys)
  return _internal_skipped_msg_keys(index);
}
inline ::skissm::SkippedMsgKeyNode* Ratchet::_internal_add_skipped_msg_keys() {
  return skipped_msg_keys_.Add();
}
inline ::skissm::SkippedMsgKeyNode* Ratchet::add_skipped_msg_keys() {
  ::skissm::SkippedMsgKeyNode* _add = _internal_add_skipped_msg_keys();
  // @@protoc_insertion_point(field_add:skissm.Ratchet.skipped_msg_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::SkippedMsgKeyNode >&
Ratchet::skipped_msg_keys() const {
  // @@protoc_insertion_point(field_list:skissm.Ratchet.skipped_msg_keys)
  return skipped_msg_keys_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace skissm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skissm_2fRatchet_2eproto
