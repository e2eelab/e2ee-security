// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/Session.proto

#include "skissm/Session.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace skissm {
constexpr Session::Session(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , e2ee_pack_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alice_identity_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alice_ephemeral_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bob_signed_pre_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bob_one_time_pre_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , associated_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_owner_(nullptr)
  , from_(nullptr)
  , to_(nullptr)
  , ratchet_(nullptr)
  , bob_signed_pre_key_id_(0u)
  , bob_one_time_pre_key_id_(0u)
  , responded_(false){}
struct SessionDefaultTypeInternal {
  constexpr SessionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionDefaultTypeInternal() {}
  union {
    Session _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionDefaultTypeInternal _Session_default_instance_;
}  // namespace skissm
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skissm_2fSession_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skissm_2fSession_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fSession_2eproto = nullptr;

const uint32_t TableStruct_skissm_2fSession_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skissm::Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skissm::Session, version_),
  PROTOBUF_FIELD_OFFSET(::skissm::Session, e2ee_pack_id_),
  PROTOBUF_FIELD_OFFSET(::skissm::Session, session_id_),
  PROTOBUF_FIELD_OFFSET(::skissm::Session, session_owner_),
  PROTOBUF_FIELD_OFFSET(::skissm::Session, from_),
  PROTOBUF_FIELD_OFFSET(::skissm::Session, to_),
  PROTOBUF_FIELD_OFFSET(::skissm::Session, ratchet_),
  PROTOBUF_FIELD_OFFSET(::skissm::Session, alice_identity_key_),
  PROTOBUF_FIELD_OFFSET(::skissm::Session, alice_ephemeral_key_),
  PROTOBUF_FIELD_OFFSET(::skissm::Session, bob_signed_pre_key_),
  PROTOBUF_FIELD_OFFSET(::skissm::Session, bob_signed_pre_key_id_),
  PROTOBUF_FIELD_OFFSET(::skissm::Session, bob_one_time_pre_key_),
  PROTOBUF_FIELD_OFFSET(::skissm::Session, bob_one_time_pre_key_id_),
  PROTOBUF_FIELD_OFFSET(::skissm::Session, responded_),
  PROTOBUF_FIELD_OFFSET(::skissm::Session, associated_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::skissm::Session)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skissm::_Session_default_instance_),
};

const char descriptor_table_protodef_skissm_2fSession_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024skissm/Session.proto\022\006skissm\032\030skissm/E"
  "2eeAddress.proto\032\024skissm/Ratchet.proto\"\265"
  "\003\n\007Session\022\017\n\007version\030\001 \001(\t\022\024\n\014e2ee_pack"
  "_id\030\002 \001(\t\022\022\n\nsession_id\030\003 \001(\t\022*\n\rsession"
  "_owner\030\004 \001(\0132\023.skissm.E2eeAddress\022!\n\004fro"
  "m\030\005 \001(\0132\023.skissm.E2eeAddress\022\037\n\002to\030\006 \001(\013"
  "2\023.skissm.E2eeAddress\022 \n\007ratchet\030\007 \001(\0132\017"
  ".skissm.Ratchet\022\032\n\022alice_identity_key\030\010 "
  "\001(\014\022\033\n\023alice_ephemeral_key\030\t \001(\014\022\032\n\022bob_"
  "signed_pre_key\030\n \001(\014\022\035\n\025bob_signed_pre_k"
  "ey_id\030\013 \001(\r\022\034\n\024bob_one_time_pre_key\030\014 \001("
  "\014\022\037\n\027bob_one_time_pre_key_id\030\r \001(\r\022\021\n\tre"
  "sponded\030\016 \001(\010\022\027\n\017associated_data\030\017 \001(\014B("
  "\n\030org.e2eelab.skissm.protoB\014SessionProto"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skissm_2fSession_2eproto_deps[2] = {
  &::descriptor_table_skissm_2fE2eeAddress_2eproto,
  &::descriptor_table_skissm_2fRatchet_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fSession_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fSession_2eproto = {
  false, false, 568, descriptor_table_protodef_skissm_2fSession_2eproto, "skissm/Session.proto", 
  &descriptor_table_skissm_2fSession_2eproto_once, descriptor_table_skissm_2fSession_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_skissm_2fSession_2eproto::offsets,
  file_level_metadata_skissm_2fSession_2eproto, file_level_enum_descriptors_skissm_2fSession_2eproto, file_level_service_descriptors_skissm_2fSession_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fSession_2eproto_getter() {
  return &descriptor_table_skissm_2fSession_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fSession_2eproto(&descriptor_table_skissm_2fSession_2eproto);
namespace skissm {

// ===================================================================

class Session::_Internal {
 public:
  static const ::skissm::E2eeAddress& session_owner(const Session* msg);
  static const ::skissm::E2eeAddress& from(const Session* msg);
  static const ::skissm::E2eeAddress& to(const Session* msg);
  static const ::skissm::Ratchet& ratchet(const Session* msg);
};

const ::skissm::E2eeAddress&
Session::_Internal::session_owner(const Session* msg) {
  return *msg->session_owner_;
}
const ::skissm::E2eeAddress&
Session::_Internal::from(const Session* msg) {
  return *msg->from_;
}
const ::skissm::E2eeAddress&
Session::_Internal::to(const Session* msg) {
  return *msg->to_;
}
const ::skissm::Ratchet&
Session::_Internal::ratchet(const Session* msg) {
  return *msg->ratchet_;
}
void Session::clear_session_owner() {
  if (GetArenaForAllocation() == nullptr && session_owner_ != nullptr) {
    delete session_owner_;
  }
  session_owner_ = nullptr;
}
void Session::clear_from() {
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
void Session::clear_to() {
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
}
void Session::clear_ratchet() {
  if (GetArenaForAllocation() == nullptr && ratchet_ != nullptr) {
    delete ratchet_;
  }
  ratchet_ = nullptr;
}
Session::Session(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:skissm.Session)
}
Session::Session(const Session& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  e2ee_pack_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e2ee_pack_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e2ee_pack_id().empty()) {
    e2ee_pack_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_e2ee_pack_id(), 
      GetArenaForAllocation());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  alice_identity_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    alice_identity_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alice_identity_key().empty()) {
    alice_identity_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alice_identity_key(), 
      GetArenaForAllocation());
  }
  alice_ephemeral_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    alice_ephemeral_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alice_ephemeral_key().empty()) {
    alice_ephemeral_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alice_ephemeral_key(), 
      GetArenaForAllocation());
  }
  bob_signed_pre_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bob_signed_pre_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bob_signed_pre_key().empty()) {
    bob_signed_pre_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bob_signed_pre_key(), 
      GetArenaForAllocation());
  }
  bob_one_time_pre_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bob_one_time_pre_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bob_one_time_pre_key().empty()) {
    bob_one_time_pre_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bob_one_time_pre_key(), 
      GetArenaForAllocation());
  }
  associated_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    associated_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_associated_data().empty()) {
    associated_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_associated_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_session_owner()) {
    session_owner_ = new ::skissm::E2eeAddress(*from.session_owner_);
  } else {
    session_owner_ = nullptr;
  }
  if (from._internal_has_from()) {
    from_ = new ::skissm::E2eeAddress(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_to()) {
    to_ = new ::skissm::E2eeAddress(*from.to_);
  } else {
    to_ = nullptr;
  }
  if (from._internal_has_ratchet()) {
    ratchet_ = new ::skissm::Ratchet(*from.ratchet_);
  } else {
    ratchet_ = nullptr;
  }
  ::memcpy(&bob_signed_pre_key_id_, &from.bob_signed_pre_key_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&responded_) -
    reinterpret_cast<char*>(&bob_signed_pre_key_id_)) + sizeof(responded_));
  // @@protoc_insertion_point(copy_constructor:skissm.Session)
}

inline void Session::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
e2ee_pack_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e2ee_pack_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
alice_identity_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  alice_identity_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
alice_ephemeral_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  alice_ephemeral_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bob_signed_pre_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bob_signed_pre_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bob_one_time_pre_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bob_one_time_pre_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
associated_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  associated_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_owner_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&responded_) -
    reinterpret_cast<char*>(&session_owner_)) + sizeof(responded_));
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:skissm.Session)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Session::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  e2ee_pack_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alice_identity_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alice_ephemeral_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bob_signed_pre_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bob_one_time_pre_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  associated_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete session_owner_;
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
  if (this != internal_default_instance()) delete ratchet_;
}

void Session::ArenaDtor(void* object) {
  Session* _this = reinterpret_cast< Session* >(object);
  (void)_this;
}
void Session::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Session::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:skissm.Session)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty();
  e2ee_pack_id_.ClearToEmpty();
  session_id_.ClearToEmpty();
  alice_identity_key_.ClearToEmpty();
  alice_ephemeral_key_.ClearToEmpty();
  bob_signed_pre_key_.ClearToEmpty();
  bob_one_time_pre_key_.ClearToEmpty();
  associated_data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && session_owner_ != nullptr) {
    delete session_owner_;
  }
  session_owner_ = nullptr;
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ratchet_ != nullptr) {
    delete ratchet_;
  }
  ratchet_ = nullptr;
  ::memset(&bob_signed_pre_key_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&responded_) -
      reinterpret_cast<char*>(&bob_signed_pre_key_id_)) + sizeof(responded_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Session::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.Session.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string e2ee_pack_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_e2ee_pack_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.Session.e2ee_pack_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.Session.session_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.E2eeAddress session_owner = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.E2eeAddress from = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.E2eeAddress to = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.Ratchet ratchet = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ratchet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes alice_identity_key = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_alice_identity_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes alice_ephemeral_key = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_alice_ephemeral_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes bob_signed_pre_key = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_bob_signed_pre_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bob_signed_pre_key_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          bob_signed_pre_key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes bob_one_time_pre_key = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_bob_one_time_pre_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bob_one_time_pre_key_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          bob_one_time_pre_key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool responded = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          responded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes associated_data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_associated_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Session::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skissm.Session)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.Session.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string e2ee_pack_id = 2;
  if (!this->_internal_e2ee_pack_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_e2ee_pack_id().data(), static_cast<int>(this->_internal_e2ee_pack_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.Session.e2ee_pack_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_e2ee_pack_id(), target);
  }

  // string session_id = 3;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.Session.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // .skissm.E2eeAddress session_owner = 4;
  if (this->_internal_has_session_owner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::session_owner(this), target, stream);
  }

  // .skissm.E2eeAddress from = 5;
  if (this->_internal_has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::from(this), target, stream);
  }

  // .skissm.E2eeAddress to = 6;
  if (this->_internal_has_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::to(this), target, stream);
  }

  // .skissm.Ratchet ratchet = 7;
  if (this->_internal_has_ratchet()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::ratchet(this), target, stream);
  }

  // bytes alice_identity_key = 8;
  if (!this->_internal_alice_identity_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_alice_identity_key(), target);
  }

  // bytes alice_ephemeral_key = 9;
  if (!this->_internal_alice_ephemeral_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_alice_ephemeral_key(), target);
  }

  // bytes bob_signed_pre_key = 10;
  if (!this->_internal_bob_signed_pre_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_bob_signed_pre_key(), target);
  }

  // uint32 bob_signed_pre_key_id = 11;
  if (this->_internal_bob_signed_pre_key_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_bob_signed_pre_key_id(), target);
  }

  // bytes bob_one_time_pre_key = 12;
  if (!this->_internal_bob_one_time_pre_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_bob_one_time_pre_key(), target);
  }

  // uint32 bob_one_time_pre_key_id = 13;
  if (this->_internal_bob_one_time_pre_key_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_bob_one_time_pre_key_id(), target);
  }

  // bool responded = 14;
  if (this->_internal_responded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_responded(), target);
  }

  // bytes associated_data = 15;
  if (!this->_internal_associated_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_associated_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skissm.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skissm.Session)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string e2ee_pack_id = 2;
  if (!this->_internal_e2ee_pack_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_e2ee_pack_id());
  }

  // string session_id = 3;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // bytes alice_identity_key = 8;
  if (!this->_internal_alice_identity_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_alice_identity_key());
  }

  // bytes alice_ephemeral_key = 9;
  if (!this->_internal_alice_ephemeral_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_alice_ephemeral_key());
  }

  // bytes bob_signed_pre_key = 10;
  if (!this->_internal_bob_signed_pre_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bob_signed_pre_key());
  }

  // bytes bob_one_time_pre_key = 12;
  if (!this->_internal_bob_one_time_pre_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bob_one_time_pre_key());
  }

  // bytes associated_data = 15;
  if (!this->_internal_associated_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_associated_data());
  }

  // .skissm.E2eeAddress session_owner = 4;
  if (this->_internal_has_session_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *session_owner_);
  }

  // .skissm.E2eeAddress from = 5;
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .skissm.E2eeAddress to = 6;
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_);
  }

  // .skissm.Ratchet ratchet = 7;
  if (this->_internal_has_ratchet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ratchet_);
  }

  // uint32 bob_signed_pre_key_id = 11;
  if (this->_internal_bob_signed_pre_key_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bob_signed_pre_key_id());
  }

  // uint32 bob_one_time_pre_key_id = 13;
  if (this->_internal_bob_one_time_pre_key_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bob_one_time_pre_key_id());
  }

  // bool responded = 14;
  if (this->_internal_responded() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Session::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Session::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Session::GetClassData() const { return &_class_data_; }

void Session::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Session *>(to)->MergeFrom(
      static_cast<const Session &>(from));
}


void Session::MergeFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skissm.Session)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_e2ee_pack_id().empty()) {
    _internal_set_e2ee_pack_id(from._internal_e2ee_pack_id());
  }
  if (!from._internal_session_id().empty()) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_alice_identity_key().empty()) {
    _internal_set_alice_identity_key(from._internal_alice_identity_key());
  }
  if (!from._internal_alice_ephemeral_key().empty()) {
    _internal_set_alice_ephemeral_key(from._internal_alice_ephemeral_key());
  }
  if (!from._internal_bob_signed_pre_key().empty()) {
    _internal_set_bob_signed_pre_key(from._internal_bob_signed_pre_key());
  }
  if (!from._internal_bob_one_time_pre_key().empty()) {
    _internal_set_bob_one_time_pre_key(from._internal_bob_one_time_pre_key());
  }
  if (!from._internal_associated_data().empty()) {
    _internal_set_associated_data(from._internal_associated_data());
  }
  if (from._internal_has_session_owner()) {
    _internal_mutable_session_owner()->::skissm::E2eeAddress::MergeFrom(from._internal_session_owner());
  }
  if (from._internal_has_from()) {
    _internal_mutable_from()->::skissm::E2eeAddress::MergeFrom(from._internal_from());
  }
  if (from._internal_has_to()) {
    _internal_mutable_to()->::skissm::E2eeAddress::MergeFrom(from._internal_to());
  }
  if (from._internal_has_ratchet()) {
    _internal_mutable_ratchet()->::skissm::Ratchet::MergeFrom(from._internal_ratchet());
  }
  if (from._internal_bob_signed_pre_key_id() != 0) {
    _internal_set_bob_signed_pre_key_id(from._internal_bob_signed_pre_key_id());
  }
  if (from._internal_bob_one_time_pre_key_id() != 0) {
    _internal_set_bob_one_time_pre_key_id(from._internal_bob_one_time_pre_key_id());
  }
  if (from._internal_responded() != 0) {
    _internal_set_responded(from._internal_responded());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skissm.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  return true;
}

void Session::InternalSwap(Session* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &e2ee_pack_id_, lhs_arena,
      &other->e2ee_pack_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alice_identity_key_, lhs_arena,
      &other->alice_identity_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alice_ephemeral_key_, lhs_arena,
      &other->alice_ephemeral_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bob_signed_pre_key_, lhs_arena,
      &other->bob_signed_pre_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bob_one_time_pre_key_, lhs_arena,
      &other->bob_one_time_pre_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &associated_data_, lhs_arena,
      &other->associated_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Session, responded_)
      + sizeof(Session::responded_)
      - PROTOBUF_FIELD_OFFSET(Session, session_owner_)>(
          reinterpret_cast<char*>(&session_owner_),
          reinterpret_cast<char*>(&other->session_owner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Session::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fSession_2eproto_getter, &descriptor_table_skissm_2fSession_2eproto_once,
      file_level_metadata_skissm_2fSession_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skissm::Session* Arena::CreateMaybeMessage< ::skissm::Session >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skissm::Session >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
