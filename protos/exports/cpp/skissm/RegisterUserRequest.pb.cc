// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/RegisterUserRequest.proto

#include "skissm/RegisterUserRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace skissm {
constexpr RegisterUserRequest::RegisterUserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : one_time_pre_keys_()
  , user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , authenticator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auth_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , e2ee_pack_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , identity_key_public_(nullptr)
  , signed_pre_key_public_(nullptr){}
struct RegisterUserRequestDefaultTypeInternal {
  constexpr RegisterUserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterUserRequestDefaultTypeInternal() {}
  union {
    RegisterUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterUserRequestDefaultTypeInternal _RegisterUserRequest_default_instance_;
}  // namespace skissm
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skissm_2fRegisterUserRequest_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skissm_2fRegisterUserRequest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fRegisterUserRequest_2eproto = nullptr;

const uint32_t TableStruct_skissm_2fRegisterUserRequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skissm::RegisterUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skissm::RegisterUserRequest, user_name_),
  PROTOBUF_FIELD_OFFSET(::skissm::RegisterUserRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::skissm::RegisterUserRequest, authenticator_),
  PROTOBUF_FIELD_OFFSET(::skissm::RegisterUserRequest, auth_code_),
  PROTOBUF_FIELD_OFFSET(::skissm::RegisterUserRequest, e2ee_pack_id_),
  PROTOBUF_FIELD_OFFSET(::skissm::RegisterUserRequest, identity_key_public_),
  PROTOBUF_FIELD_OFFSET(::skissm::RegisterUserRequest, signed_pre_key_public_),
  PROTOBUF_FIELD_OFFSET(::skissm::RegisterUserRequest, one_time_pre_keys_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::skissm::RegisterUserRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skissm::_RegisterUserRequest_default_instance_),
};

const char descriptor_table_protodef_skissm_2fRegisterUserRequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n skissm/RegisterUserRequest.proto\022\006skis"
  "sm\032\036skissm/IdentityKeyPublic.proto\032\037skis"
  "sm/SignedPreKeyPublic.proto\032 skissm/OneT"
  "imePreKeyPublic.proto\"\246\002\n\023RegisterUserRe"
  "quest\022\021\n\tuser_name\030\001 \001(\t\022\021\n\tdevice_id\030\002 "
  "\001(\t\022\025\n\rauthenticator\030\003 \001(\t\022\021\n\tauth_code\030"
  "\004 \001(\t\022\024\n\014e2ee_pack_id\030\005 \001(\t\0226\n\023identity_"
  "key_public\030\006 \001(\0132\031.skissm.IdentityKeyPub"
  "lic\0229\n\025signed_pre_key_public\030\007 \001(\0132\032.ski"
  "ssm.SignedPreKeyPublic\0226\n\021one_time_pre_k"
  "eys\030\010 \003(\0132\033.skissm.OneTimePreKeyPublicB4"
  "\n\030org.e2eelab.skissm.protoB\030RegisterUser"
  "RequestProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skissm_2fRegisterUserRequest_2eproto_deps[3] = {
  &::descriptor_table_skissm_2fIdentityKeyPublic_2eproto,
  &::descriptor_table_skissm_2fOneTimePreKeyPublic_2eproto,
  &::descriptor_table_skissm_2fSignedPreKeyPublic_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fRegisterUserRequest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fRegisterUserRequest_2eproto = {
  false, false, 500, descriptor_table_protodef_skissm_2fRegisterUserRequest_2eproto, "skissm/RegisterUserRequest.proto", 
  &descriptor_table_skissm_2fRegisterUserRequest_2eproto_once, descriptor_table_skissm_2fRegisterUserRequest_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_skissm_2fRegisterUserRequest_2eproto::offsets,
  file_level_metadata_skissm_2fRegisterUserRequest_2eproto, file_level_enum_descriptors_skissm_2fRegisterUserRequest_2eproto, file_level_service_descriptors_skissm_2fRegisterUserRequest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fRegisterUserRequest_2eproto_getter() {
  return &descriptor_table_skissm_2fRegisterUserRequest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fRegisterUserRequest_2eproto(&descriptor_table_skissm_2fRegisterUserRequest_2eproto);
namespace skissm {

// ===================================================================

class RegisterUserRequest::_Internal {
 public:
  static const ::skissm::IdentityKeyPublic& identity_key_public(const RegisterUserRequest* msg);
  static const ::skissm::SignedPreKeyPublic& signed_pre_key_public(const RegisterUserRequest* msg);
};

const ::skissm::IdentityKeyPublic&
RegisterUserRequest::_Internal::identity_key_public(const RegisterUserRequest* msg) {
  return *msg->identity_key_public_;
}
const ::skissm::SignedPreKeyPublic&
RegisterUserRequest::_Internal::signed_pre_key_public(const RegisterUserRequest* msg) {
  return *msg->signed_pre_key_public_;
}
void RegisterUserRequest::clear_identity_key_public() {
  if (GetArenaForAllocation() == nullptr && identity_key_public_ != nullptr) {
    delete identity_key_public_;
  }
  identity_key_public_ = nullptr;
}
void RegisterUserRequest::clear_signed_pre_key_public() {
  if (GetArenaForAllocation() == nullptr && signed_pre_key_public_ != nullptr) {
    delete signed_pre_key_public_;
  }
  signed_pre_key_public_ = nullptr;
}
void RegisterUserRequest::clear_one_time_pre_keys() {
  one_time_pre_keys_.Clear();
}
RegisterUserRequest::RegisterUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  one_time_pre_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:skissm.RegisterUserRequest)
}
RegisterUserRequest::RegisterUserRequest(const RegisterUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      one_time_pre_keys_(from.one_time_pre_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArenaForAllocation());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArenaForAllocation());
  }
  authenticator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    authenticator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_authenticator().empty()) {
    authenticator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_authenticator(), 
      GetArenaForAllocation());
  }
  auth_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    auth_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_code().empty()) {
    auth_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_code(), 
      GetArenaForAllocation());
  }
  e2ee_pack_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e2ee_pack_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e2ee_pack_id().empty()) {
    e2ee_pack_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_e2ee_pack_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_identity_key_public()) {
    identity_key_public_ = new ::skissm::IdentityKeyPublic(*from.identity_key_public_);
  } else {
    identity_key_public_ = nullptr;
  }
  if (from._internal_has_signed_pre_key_public()) {
    signed_pre_key_public_ = new ::skissm::SignedPreKeyPublic(*from.signed_pre_key_public_);
  } else {
    signed_pre_key_public_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:skissm.RegisterUserRequest)
}

inline void RegisterUserRequest::SharedCtor() {
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
authenticator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  authenticator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
auth_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  auth_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
e2ee_pack_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e2ee_pack_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&identity_key_public_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signed_pre_key_public_) -
    reinterpret_cast<char*>(&identity_key_public_)) + sizeof(signed_pre_key_public_));
}

RegisterUserRequest::~RegisterUserRequest() {
  // @@protoc_insertion_point(destructor:skissm.RegisterUserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authenticator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  e2ee_pack_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete identity_key_public_;
  if (this != internal_default_instance()) delete signed_pre_key_public_;
}

void RegisterUserRequest::ArenaDtor(void* object) {
  RegisterUserRequest* _this = reinterpret_cast< RegisterUserRequest* >(object);
  (void)_this;
}
void RegisterUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:skissm.RegisterUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  one_time_pre_keys_.Clear();
  user_name_.ClearToEmpty();
  device_id_.ClearToEmpty();
  authenticator_.ClearToEmpty();
  auth_code_.ClearToEmpty();
  e2ee_pack_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && identity_key_public_ != nullptr) {
    delete identity_key_public_;
  }
  identity_key_public_ = nullptr;
  if (GetArenaForAllocation() == nullptr && signed_pre_key_public_ != nullptr) {
    delete signed_pre_key_public_;
  }
  signed_pre_key_public_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.RegisterUserRequest.user_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.RegisterUserRequest.device_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string authenticator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_authenticator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.RegisterUserRequest.authenticator"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string auth_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_auth_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.RegisterUserRequest.auth_code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string e2ee_pack_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_e2ee_pack_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.RegisterUserRequest.e2ee_pack_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.IdentityKeyPublic identity_key_public = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_identity_key_public(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.SignedPreKeyPublic signed_pre_key_public = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_signed_pre_key_public(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .skissm.OneTimePreKeyPublic one_time_pre_keys = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_one_time_pre_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skissm.RegisterUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.RegisterUserRequest.user_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_name(), target);
  }

  // string device_id = 2;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.RegisterUserRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  // string authenticator = 3;
  if (!this->_internal_authenticator().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_authenticator().data(), static_cast<int>(this->_internal_authenticator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.RegisterUserRequest.authenticator");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_authenticator(), target);
  }

  // string auth_code = 4;
  if (!this->_internal_auth_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_code().data(), static_cast<int>(this->_internal_auth_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.RegisterUserRequest.auth_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_auth_code(), target);
  }

  // string e2ee_pack_id = 5;
  if (!this->_internal_e2ee_pack_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_e2ee_pack_id().data(), static_cast<int>(this->_internal_e2ee_pack_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.RegisterUserRequest.e2ee_pack_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_e2ee_pack_id(), target);
  }

  // .skissm.IdentityKeyPublic identity_key_public = 6;
  if (this->_internal_has_identity_key_public()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::identity_key_public(this), target, stream);
  }

  // .skissm.SignedPreKeyPublic signed_pre_key_public = 7;
  if (this->_internal_has_signed_pre_key_public()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::signed_pre_key_public(this), target, stream);
  }

  // repeated .skissm.OneTimePreKeyPublic one_time_pre_keys = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_one_time_pre_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_one_time_pre_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skissm.RegisterUserRequest)
  return target;
}

size_t RegisterUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skissm.RegisterUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .skissm.OneTimePreKeyPublic one_time_pre_keys = 8;
  total_size += 1UL * this->_internal_one_time_pre_keys_size();
  for (const auto& msg : this->one_time_pre_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string user_name = 1;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // string device_id = 2;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string authenticator = 3;
  if (!this->_internal_authenticator().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_authenticator());
  }

  // string auth_code = 4;
  if (!this->_internal_auth_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_code());
  }

  // string e2ee_pack_id = 5;
  if (!this->_internal_e2ee_pack_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_e2ee_pack_id());
  }

  // .skissm.IdentityKeyPublic identity_key_public = 6;
  if (this->_internal_has_identity_key_public()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identity_key_public_);
  }

  // .skissm.SignedPreKeyPublic signed_pre_key_public = 7;
  if (this->_internal_has_signed_pre_key_public()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signed_pre_key_public_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterUserRequest::GetClassData() const { return &_class_data_; }

void RegisterUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterUserRequest *>(to)->MergeFrom(
      static_cast<const RegisterUserRequest &>(from));
}


void RegisterUserRequest::MergeFrom(const RegisterUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skissm.RegisterUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  one_time_pre_keys_.MergeFrom(from.one_time_pre_keys_);
  if (!from._internal_user_name().empty()) {
    _internal_set_user_name(from._internal_user_name());
  }
  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (!from._internal_authenticator().empty()) {
    _internal_set_authenticator(from._internal_authenticator());
  }
  if (!from._internal_auth_code().empty()) {
    _internal_set_auth_code(from._internal_auth_code());
  }
  if (!from._internal_e2ee_pack_id().empty()) {
    _internal_set_e2ee_pack_id(from._internal_e2ee_pack_id());
  }
  if (from._internal_has_identity_key_public()) {
    _internal_mutable_identity_key_public()->::skissm::IdentityKeyPublic::MergeFrom(from._internal_identity_key_public());
  }
  if (from._internal_has_signed_pre_key_public()) {
    _internal_mutable_signed_pre_key_public()->::skissm::SignedPreKeyPublic::MergeFrom(from._internal_signed_pre_key_public());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterUserRequest::CopyFrom(const RegisterUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skissm.RegisterUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterUserRequest::IsInitialized() const {
  return true;
}

void RegisterUserRequest::InternalSwap(RegisterUserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  one_time_pre_keys_.InternalSwap(&other->one_time_pre_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_name_, lhs_arena,
      &other->user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &authenticator_, lhs_arena,
      &other->authenticator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &auth_code_, lhs_arena,
      &other->auth_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &e2ee_pack_id_, lhs_arena,
      &other->e2ee_pack_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterUserRequest, signed_pre_key_public_)
      + sizeof(RegisterUserRequest::signed_pre_key_public_)
      - PROTOBUF_FIELD_OFFSET(RegisterUserRequest, identity_key_public_)>(
          reinterpret_cast<char*>(&identity_key_public_),
          reinterpret_cast<char*>(&other->identity_key_public_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterUserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fRegisterUserRequest_2eproto_getter, &descriptor_table_skissm_2fRegisterUserRequest_2eproto_once,
      file_level_metadata_skissm_2fRegisterUserRequest_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skissm::RegisterUserRequest* Arena::CreateMaybeMessage< ::skissm::RegisterUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skissm::RegisterUserRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
