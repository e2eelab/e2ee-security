// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/E2eeAddress.proto

#include "skissm/E2eeAddress.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace skissm {
constexpr PeerUser::PeerUser(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PeerUserDefaultTypeInternal {
  constexpr PeerUserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PeerUserDefaultTypeInternal() {}
  union {
    PeerUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PeerUserDefaultTypeInternal _PeerUser_default_instance_;
constexpr PeerGroup::PeerGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PeerGroupDefaultTypeInternal {
  constexpr PeerGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PeerGroupDefaultTypeInternal() {}
  union {
    PeerGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PeerGroupDefaultTypeInternal _PeerGroup_default_instance_;
constexpr E2eeAddress::E2eeAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : domain_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct E2eeAddressDefaultTypeInternal {
  constexpr E2eeAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~E2eeAddressDefaultTypeInternal() {}
  union {
    E2eeAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT E2eeAddressDefaultTypeInternal _E2eeAddress_default_instance_;
}  // namespace skissm
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skissm_2fE2eeAddress_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skissm_2fE2eeAddress_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fE2eeAddress_2eproto = nullptr;

const uint32_t TableStruct_skissm_2fE2eeAddress_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skissm::PeerUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skissm::PeerUser, user_id_),
  PROTOBUF_FIELD_OFFSET(::skissm::PeerUser, device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skissm::PeerGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skissm::PeerGroup, group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skissm::E2eeAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::skissm::E2eeAddress, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skissm::E2eeAddress, domain_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::skissm::E2eeAddress, peer_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::skissm::PeerUser)},
  { 8, -1, -1, sizeof(::skissm::PeerGroup)},
  { 15, -1, -1, sizeof(::skissm::E2eeAddress)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skissm::_PeerUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skissm::_PeerGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skissm::_E2eeAddress_default_instance_),
};

const char descriptor_table_protodef_skissm_2fE2eeAddress_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030skissm/E2eeAddress.proto\022\006skissm\".\n\010Pe"
  "erUser\022\017\n\007user_id\030\002 \001(\t\022\021\n\tdevice_id\030\003 \001"
  "(\t\"\035\n\tPeerGroup\022\020\n\010group_id\030\001 \001(\t\"k\n\013E2e"
  "eAddress\022\016\n\006domain\030\001 \001(\t\022 \n\004user\030\002 \001(\0132\020"
  ".skissm.PeerUserH\000\022\"\n\005group\030\003 \001(\0132\021.skis"
  "sm.PeerGroupH\000B\006\n\004peerB,\n\030org.e2eelab.sk"
  "issm.protoB\020E2eeAddressProtob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fE2eeAddress_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fE2eeAddress_2eproto = {
  false, false, 276, descriptor_table_protodef_skissm_2fE2eeAddress_2eproto, "skissm/E2eeAddress.proto", 
  &descriptor_table_skissm_2fE2eeAddress_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_skissm_2fE2eeAddress_2eproto::offsets,
  file_level_metadata_skissm_2fE2eeAddress_2eproto, file_level_enum_descriptors_skissm_2fE2eeAddress_2eproto, file_level_service_descriptors_skissm_2fE2eeAddress_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fE2eeAddress_2eproto_getter() {
  return &descriptor_table_skissm_2fE2eeAddress_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fE2eeAddress_2eproto(&descriptor_table_skissm_2fE2eeAddress_2eproto);
namespace skissm {

// ===================================================================

class PeerUser::_Internal {
 public:
};

PeerUser::PeerUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:skissm.PeerUser)
}
PeerUser::PeerUser(const PeerUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:skissm.PeerUser)
}

inline void PeerUser::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PeerUser::~PeerUser() {
  // @@protoc_insertion_point(destructor:skissm.PeerUser)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PeerUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerUser::ArenaDtor(void* object) {
  PeerUser* _this = reinterpret_cast< PeerUser* >(object);
  (void)_this;
}
void PeerUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PeerUser::Clear() {
// @@protoc_insertion_point(message_clear_start:skissm.PeerUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  device_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.PeerUser.user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.PeerUser.device_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skissm.PeerUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.PeerUser.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // string device_id = 3;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.PeerUser.device_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skissm.PeerUser)
  return target;
}

size_t PeerUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skissm.PeerUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string device_id = 3;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeerUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PeerUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeerUser::GetClassData() const { return &_class_data_; }

void PeerUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PeerUser *>(to)->MergeFrom(
      static_cast<const PeerUser &>(from));
}


void PeerUser::MergeFrom(const PeerUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skissm.PeerUser)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeerUser::CopyFrom(const PeerUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skissm.PeerUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerUser::IsInitialized() const {
  return true;
}

void PeerUser::InternalSwap(PeerUser* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerUser::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fE2eeAddress_2eproto_getter, &descriptor_table_skissm_2fE2eeAddress_2eproto_once,
      file_level_metadata_skissm_2fE2eeAddress_2eproto[0]);
}

// ===================================================================

class PeerGroup::_Internal {
 public:
};

PeerGroup::PeerGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:skissm.PeerGroup)
}
PeerGroup::PeerGroup(const PeerGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group_id().empty()) {
    group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:skissm.PeerGroup)
}

inline void PeerGroup::SharedCtor() {
group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PeerGroup::~PeerGroup() {
  // @@protoc_insertion_point(destructor:skissm.PeerGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PeerGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerGroup::ArenaDtor(void* object) {
  PeerGroup* _this = reinterpret_cast< PeerGroup* >(object);
  (void)_this;
}
void PeerGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PeerGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:skissm.PeerGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.PeerGroup.group_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skissm.PeerGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (!this->_internal_group_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.PeerGroup.group_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skissm.PeerGroup)
  return target;
}

size_t PeerGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skissm.PeerGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group_id = 1;
  if (!this->_internal_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeerGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PeerGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeerGroup::GetClassData() const { return &_class_data_; }

void PeerGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PeerGroup *>(to)->MergeFrom(
      static_cast<const PeerGroup &>(from));
}


void PeerGroup::MergeFrom(const PeerGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skissm.PeerGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_group_id().empty()) {
    _internal_set_group_id(from._internal_group_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeerGroup::CopyFrom(const PeerGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skissm.PeerGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerGroup::IsInitialized() const {
  return true;
}

void PeerGroup::InternalSwap(PeerGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &group_id_, lhs_arena,
      &other->group_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fE2eeAddress_2eproto_getter, &descriptor_table_skissm_2fE2eeAddress_2eproto_once,
      file_level_metadata_skissm_2fE2eeAddress_2eproto[1]);
}

// ===================================================================

class E2eeAddress::_Internal {
 public:
  static const ::skissm::PeerUser& user(const E2eeAddress* msg);
  static const ::skissm::PeerGroup& group(const E2eeAddress* msg);
};

const ::skissm::PeerUser&
E2eeAddress::_Internal::user(const E2eeAddress* msg) {
  return *msg->peer_.user_;
}
const ::skissm::PeerGroup&
E2eeAddress::_Internal::group(const E2eeAddress* msg) {
  return *msg->peer_.group_;
}
void E2eeAddress::set_allocated_user(::skissm::PeerUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_peer();
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::skissm::PeerUser>::GetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    set_has_user();
    peer_.user_ = user;
  }
  // @@protoc_insertion_point(field_set_allocated:skissm.E2eeAddress.user)
}
void E2eeAddress::set_allocated_group(::skissm::PeerGroup* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_peer();
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::skissm::PeerGroup>::GetOwningArena(group);
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    set_has_group();
    peer_.group_ = group;
  }
  // @@protoc_insertion_point(field_set_allocated:skissm.E2eeAddress.group)
}
E2eeAddress::E2eeAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:skissm.E2eeAddress)
}
E2eeAddress::E2eeAddress(const E2eeAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_domain().empty()) {
    domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain(), 
      GetArenaForAllocation());
  }
  clear_has_peer();
  switch (from.peer_case()) {
    case kUser: {
      _internal_mutable_user()->::skissm::PeerUser::MergeFrom(from._internal_user());
      break;
    }
    case kGroup: {
      _internal_mutable_group()->::skissm::PeerGroup::MergeFrom(from._internal_group());
      break;
    }
    case PEER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:skissm.E2eeAddress)
}

inline void E2eeAddress::SharedCtor() {
domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_peer();
}

E2eeAddress::~E2eeAddress() {
  // @@protoc_insertion_point(destructor:skissm.E2eeAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void E2eeAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_peer()) {
    clear_peer();
  }
}

void E2eeAddress::ArenaDtor(void* object) {
  E2eeAddress* _this = reinterpret_cast< E2eeAddress* >(object);
  (void)_this;
}
void E2eeAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void E2eeAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void E2eeAddress::clear_peer() {
// @@protoc_insertion_point(one_of_clear_start:skissm.E2eeAddress)
  switch (peer_case()) {
    case kUser: {
      if (GetArenaForAllocation() == nullptr) {
        delete peer_.user_;
      }
      break;
    }
    case kGroup: {
      if (GetArenaForAllocation() == nullptr) {
        delete peer_.group_;
      }
      break;
    }
    case PEER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PEER_NOT_SET;
}


void E2eeAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:skissm.E2eeAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domain_.ClearToEmpty();
  clear_peer();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* E2eeAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_domain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.E2eeAddress.domain"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.PeerUser user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.PeerGroup group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* E2eeAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skissm.E2eeAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string domain = 1;
  if (!this->_internal_domain().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.E2eeAddress.domain");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_domain(), target);
  }

  // .skissm.PeerUser user = 2;
  if (_internal_has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user(this), target, stream);
  }

  // .skissm.PeerGroup group = 3;
  if (_internal_has_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::group(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skissm.E2eeAddress)
  return target;
}

size_t E2eeAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skissm.E2eeAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string domain = 1;
  if (!this->_internal_domain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain());
  }

  switch (peer_case()) {
    // .skissm.PeerUser user = 2;
    case kUser: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *peer_.user_);
      break;
    }
    // .skissm.PeerGroup group = 3;
    case kGroup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *peer_.group_);
      break;
    }
    case PEER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData E2eeAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    E2eeAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*E2eeAddress::GetClassData() const { return &_class_data_; }

void E2eeAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<E2eeAddress *>(to)->MergeFrom(
      static_cast<const E2eeAddress &>(from));
}


void E2eeAddress::MergeFrom(const E2eeAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skissm.E2eeAddress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_domain().empty()) {
    _internal_set_domain(from._internal_domain());
  }
  switch (from.peer_case()) {
    case kUser: {
      _internal_mutable_user()->::skissm::PeerUser::MergeFrom(from._internal_user());
      break;
    }
    case kGroup: {
      _internal_mutable_group()->::skissm::PeerGroup::MergeFrom(from._internal_group());
      break;
    }
    case PEER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void E2eeAddress::CopyFrom(const E2eeAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skissm.E2eeAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E2eeAddress::IsInitialized() const {
  return true;
}

void E2eeAddress::InternalSwap(E2eeAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &domain_, lhs_arena,
      &other->domain_, rhs_arena
  );
  swap(peer_, other->peer_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata E2eeAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fE2eeAddress_2eproto_getter, &descriptor_table_skissm_2fE2eeAddress_2eproto_once,
      file_level_metadata_skissm_2fE2eeAddress_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skissm::PeerUser* Arena::CreateMaybeMessage< ::skissm::PeerUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skissm::PeerUser >(arena);
}
template<> PROTOBUF_NOINLINE ::skissm::PeerGroup* Arena::CreateMaybeMessage< ::skissm::PeerGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skissm::PeerGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::skissm::E2eeAddress* Arena::CreateMaybeMessage< ::skissm::E2eeAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skissm::E2eeAddress >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
