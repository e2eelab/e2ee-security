// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/CreateGroupMsg.proto

#include "skissm/CreateGroupMsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace skissm {
constexpr CreateGroupMsg::CreateGroupMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_members_()
  , e2ee_pack_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_address_(nullptr)
  , group_address_(nullptr){}
struct CreateGroupMsgDefaultTypeInternal {
  constexpr CreateGroupMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateGroupMsgDefaultTypeInternal() {}
  union {
    CreateGroupMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateGroupMsgDefaultTypeInternal _CreateGroupMsg_default_instance_;
}  // namespace skissm
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skissm_2fCreateGroupMsg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skissm_2fCreateGroupMsg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fCreateGroupMsg_2eproto = nullptr;

const uint32_t TableStruct_skissm_2fCreateGroupMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skissm::CreateGroupMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skissm::CreateGroupMsg, e2ee_pack_id_),
  PROTOBUF_FIELD_OFFSET(::skissm::CreateGroupMsg, sender_address_),
  PROTOBUF_FIELD_OFFSET(::skissm::CreateGroupMsg, group_members_),
  PROTOBUF_FIELD_OFFSET(::skissm::CreateGroupMsg, group_name_),
  PROTOBUF_FIELD_OFFSET(::skissm::CreateGroupMsg, group_address_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::skissm::CreateGroupMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skissm::_CreateGroupMsg_default_instance_),
};

const char descriptor_table_protodef_skissm_2fCreateGroupMsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033skissm/CreateGroupMsg.proto\022\006skissm\032\030s"
  "kissm/E2eeAddress.proto\032\030skissm/GroupMem"
  "ber.proto\"\277\001\n\016CreateGroupMsg\022\024\n\014e2ee_pac"
  "k_id\030\001 \001(\t\022+\n\016sender_address\030\002 \001(\0132\023.ski"
  "ssm.E2eeAddress\022*\n\rgroup_members\030\003 \003(\0132\023"
  ".skissm.GroupMember\022\022\n\ngroup_name\030\004 \001(\t\022"
  "*\n\rgroup_address\030\005 \001(\0132\023.skissm.E2eeAddr"
  "essB/\n\030org.e2eelab.skissm.protoB\023CreateG"
  "roupMsgProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skissm_2fCreateGroupMsg_2eproto_deps[2] = {
  &::descriptor_table_skissm_2fE2eeAddress_2eproto,
  &::descriptor_table_skissm_2fGroupMember_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fCreateGroupMsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fCreateGroupMsg_2eproto = {
  false, false, 340, descriptor_table_protodef_skissm_2fCreateGroupMsg_2eproto, "skissm/CreateGroupMsg.proto", 
  &descriptor_table_skissm_2fCreateGroupMsg_2eproto_once, descriptor_table_skissm_2fCreateGroupMsg_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_skissm_2fCreateGroupMsg_2eproto::offsets,
  file_level_metadata_skissm_2fCreateGroupMsg_2eproto, file_level_enum_descriptors_skissm_2fCreateGroupMsg_2eproto, file_level_service_descriptors_skissm_2fCreateGroupMsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fCreateGroupMsg_2eproto_getter() {
  return &descriptor_table_skissm_2fCreateGroupMsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fCreateGroupMsg_2eproto(&descriptor_table_skissm_2fCreateGroupMsg_2eproto);
namespace skissm {

// ===================================================================

class CreateGroupMsg::_Internal {
 public:
  static const ::skissm::E2eeAddress& sender_address(const CreateGroupMsg* msg);
  static const ::skissm::E2eeAddress& group_address(const CreateGroupMsg* msg);
};

const ::skissm::E2eeAddress&
CreateGroupMsg::_Internal::sender_address(const CreateGroupMsg* msg) {
  return *msg->sender_address_;
}
const ::skissm::E2eeAddress&
CreateGroupMsg::_Internal::group_address(const CreateGroupMsg* msg) {
  return *msg->group_address_;
}
void CreateGroupMsg::clear_sender_address() {
  if (GetArenaForAllocation() == nullptr && sender_address_ != nullptr) {
    delete sender_address_;
  }
  sender_address_ = nullptr;
}
void CreateGroupMsg::clear_group_members() {
  group_members_.Clear();
}
void CreateGroupMsg::clear_group_address() {
  if (GetArenaForAllocation() == nullptr && group_address_ != nullptr) {
    delete group_address_;
  }
  group_address_ = nullptr;
}
CreateGroupMsg::CreateGroupMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  group_members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:skissm.CreateGroupMsg)
}
CreateGroupMsg::CreateGroupMsg(const CreateGroupMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      group_members_(from.group_members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  e2ee_pack_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e2ee_pack_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e2ee_pack_id().empty()) {
    e2ee_pack_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_e2ee_pack_id(), 
      GetArenaForAllocation());
  }
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group_name().empty()) {
    group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_sender_address()) {
    sender_address_ = new ::skissm::E2eeAddress(*from.sender_address_);
  } else {
    sender_address_ = nullptr;
  }
  if (from._internal_has_group_address()) {
    group_address_ = new ::skissm::E2eeAddress(*from.group_address_);
  } else {
    group_address_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:skissm.CreateGroupMsg)
}

inline void CreateGroupMsg::SharedCtor() {
e2ee_pack_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e2ee_pack_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sender_address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_address_) -
    reinterpret_cast<char*>(&sender_address_)) + sizeof(group_address_));
}

CreateGroupMsg::~CreateGroupMsg() {
  // @@protoc_insertion_point(destructor:skissm.CreateGroupMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateGroupMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  e2ee_pack_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_address_;
  if (this != internal_default_instance()) delete group_address_;
}

void CreateGroupMsg::ArenaDtor(void* object) {
  CreateGroupMsg* _this = reinterpret_cast< CreateGroupMsg* >(object);
  (void)_this;
}
void CreateGroupMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateGroupMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateGroupMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:skissm.CreateGroupMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_members_.Clear();
  e2ee_pack_id_.ClearToEmpty();
  group_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && sender_address_ != nullptr) {
    delete sender_address_;
  }
  sender_address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && group_address_ != nullptr) {
    delete group_address_;
  }
  group_address_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateGroupMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string e2ee_pack_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_e2ee_pack_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.CreateGroupMsg.e2ee_pack_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.E2eeAddress sender_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .skissm.GroupMember group_members = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string group_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.CreateGroupMsg.group_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.E2eeAddress group_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateGroupMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skissm.CreateGroupMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string e2ee_pack_id = 1;
  if (!this->_internal_e2ee_pack_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_e2ee_pack_id().data(), static_cast<int>(this->_internal_e2ee_pack_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.CreateGroupMsg.e2ee_pack_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_e2ee_pack_id(), target);
  }

  // .skissm.E2eeAddress sender_address = 2;
  if (this->_internal_has_sender_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sender_address(this), target, stream);
  }

  // repeated .skissm.GroupMember group_members = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_group_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_group_members(i), target, stream);
  }

  // string group_name = 4;
  if (!this->_internal_group_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.CreateGroupMsg.group_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_group_name(), target);
  }

  // .skissm.E2eeAddress group_address = 5;
  if (this->_internal_has_group_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::group_address(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skissm.CreateGroupMsg)
  return target;
}

size_t CreateGroupMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skissm.CreateGroupMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .skissm.GroupMember group_members = 3;
  total_size += 1UL * this->_internal_group_members_size();
  for (const auto& msg : this->group_members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string e2ee_pack_id = 1;
  if (!this->_internal_e2ee_pack_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_e2ee_pack_id());
  }

  // string group_name = 4;
  if (!this->_internal_group_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());
  }

  // .skissm.E2eeAddress sender_address = 2;
  if (this->_internal_has_sender_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_address_);
  }

  // .skissm.E2eeAddress group_address = 5;
  if (this->_internal_has_group_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_address_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateGroupMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateGroupMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateGroupMsg::GetClassData() const { return &_class_data_; }

void CreateGroupMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateGroupMsg *>(to)->MergeFrom(
      static_cast<const CreateGroupMsg &>(from));
}


void CreateGroupMsg::MergeFrom(const CreateGroupMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skissm.CreateGroupMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  group_members_.MergeFrom(from.group_members_);
  if (!from._internal_e2ee_pack_id().empty()) {
    _internal_set_e2ee_pack_id(from._internal_e2ee_pack_id());
  }
  if (!from._internal_group_name().empty()) {
    _internal_set_group_name(from._internal_group_name());
  }
  if (from._internal_has_sender_address()) {
    _internal_mutable_sender_address()->::skissm::E2eeAddress::MergeFrom(from._internal_sender_address());
  }
  if (from._internal_has_group_address()) {
    _internal_mutable_group_address()->::skissm::E2eeAddress::MergeFrom(from._internal_group_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateGroupMsg::CopyFrom(const CreateGroupMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skissm.CreateGroupMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupMsg::IsInitialized() const {
  return true;
}

void CreateGroupMsg::InternalSwap(CreateGroupMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  group_members_.InternalSwap(&other->group_members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &e2ee_pack_id_, lhs_arena,
      &other->e2ee_pack_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &group_name_, lhs_arena,
      &other->group_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateGroupMsg, group_address_)
      + sizeof(CreateGroupMsg::group_address_)
      - PROTOBUF_FIELD_OFFSET(CreateGroupMsg, sender_address_)>(
          reinterpret_cast<char*>(&sender_address_),
          reinterpret_cast<char*>(&other->sender_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGroupMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fCreateGroupMsg_2eproto_getter, &descriptor_table_skissm_2fCreateGroupMsg_2eproto_once,
      file_level_metadata_skissm_2fCreateGroupMsg_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skissm::CreateGroupMsg* Arena::CreateMaybeMessage< ::skissm::CreateGroupMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skissm::CreateGroupMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
