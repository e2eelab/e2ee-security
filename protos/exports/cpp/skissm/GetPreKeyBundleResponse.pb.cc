// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/GetPreKeyBundleResponse.proto

#include "skissm/GetPreKeyBundleResponse.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace skissm {
constexpr GetPreKeyBundleResponse::GetPreKeyBundleResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pre_key_bundles_()
  , msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(0u){}
struct GetPreKeyBundleResponseDefaultTypeInternal {
  constexpr GetPreKeyBundleResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPreKeyBundleResponseDefaultTypeInternal() {}
  union {
    GetPreKeyBundleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPreKeyBundleResponseDefaultTypeInternal _GetPreKeyBundleResponse_default_instance_;
}  // namespace skissm
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skissm_2fGetPreKeyBundleResponse_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skissm_2fGetPreKeyBundleResponse_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fGetPreKeyBundleResponse_2eproto = nullptr;

const uint32_t TableStruct_skissm_2fGetPreKeyBundleResponse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skissm::GetPreKeyBundleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skissm::GetPreKeyBundleResponse, code_),
  PROTOBUF_FIELD_OFFSET(::skissm::GetPreKeyBundleResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::skissm::GetPreKeyBundleResponse, user_id_),
  PROTOBUF_FIELD_OFFSET(::skissm::GetPreKeyBundleResponse, pre_key_bundles_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::skissm::GetPreKeyBundleResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skissm::_GetPreKeyBundleResponse_default_instance_),
};

const char descriptor_table_protodef_skissm_2fGetPreKeyBundleResponse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$skissm/GetPreKeyBundleResponse.proto\022\006"
  "skissm\032\031skissm/PreKeyBundle.proto\"t\n\027Get"
  "PreKeyBundleResponse\022\014\n\004code\030\001 \001(\r\022\013\n\003ms"
  "g\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\t\022-\n\017pre_key_bund"
  "les\030\004 \003(\0132\024.skissm.PreKeyBundleB8\n\030org.e"
  "2eelab.skissm.protoB\034GetPreKeyBundleResp"
  "onseProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skissm_2fGetPreKeyBundleResponse_2eproto_deps[1] = {
  &::descriptor_table_skissm_2fPreKeyBundle_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fGetPreKeyBundleResponse_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fGetPreKeyBundleResponse_2eproto = {
  false, false, 257, descriptor_table_protodef_skissm_2fGetPreKeyBundleResponse_2eproto, "skissm/GetPreKeyBundleResponse.proto", 
  &descriptor_table_skissm_2fGetPreKeyBundleResponse_2eproto_once, descriptor_table_skissm_2fGetPreKeyBundleResponse_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_skissm_2fGetPreKeyBundleResponse_2eproto::offsets,
  file_level_metadata_skissm_2fGetPreKeyBundleResponse_2eproto, file_level_enum_descriptors_skissm_2fGetPreKeyBundleResponse_2eproto, file_level_service_descriptors_skissm_2fGetPreKeyBundleResponse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fGetPreKeyBundleResponse_2eproto_getter() {
  return &descriptor_table_skissm_2fGetPreKeyBundleResponse_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fGetPreKeyBundleResponse_2eproto(&descriptor_table_skissm_2fGetPreKeyBundleResponse_2eproto);
namespace skissm {

// ===================================================================

class GetPreKeyBundleResponse::_Internal {
 public:
};

void GetPreKeyBundleResponse::clear_pre_key_bundles() {
  pre_key_bundles_.Clear();
}
GetPreKeyBundleResponse::GetPreKeyBundleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pre_key_bundles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:skissm.GetPreKeyBundleResponse)
}
GetPreKeyBundleResponse::GetPreKeyBundleResponse(const GetPreKeyBundleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pre_key_bundles_(from.pre_key_bundles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:skissm.GetPreKeyBundleResponse)
}

inline void GetPreKeyBundleResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
code_ = 0u;
}

GetPreKeyBundleResponse::~GetPreKeyBundleResponse() {
  // @@protoc_insertion_point(destructor:skissm.GetPreKeyBundleResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetPreKeyBundleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPreKeyBundleResponse::ArenaDtor(void* object) {
  GetPreKeyBundleResponse* _this = reinterpret_cast< GetPreKeyBundleResponse* >(object);
  (void)_this;
}
void GetPreKeyBundleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPreKeyBundleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPreKeyBundleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:skissm.GetPreKeyBundleResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pre_key_bundles_.Clear();
  msg_.ClearToEmpty();
  user_id_.ClearToEmpty();
  code_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPreKeyBundleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.GetPreKeyBundleResponse.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.GetPreKeyBundleResponse.user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .skissm.PreKeyBundle pre_key_bundles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pre_key_bundles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPreKeyBundleResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skissm.GetPreKeyBundleResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.GetPreKeyBundleResponse.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // string user_id = 3;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.GetPreKeyBundleResponse.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // repeated .skissm.PreKeyBundle pre_key_bundles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pre_key_bundles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_pre_key_bundles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skissm.GetPreKeyBundleResponse)
  return target;
}

size_t GetPreKeyBundleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skissm.GetPreKeyBundleResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .skissm.PreKeyBundle pre_key_bundles = 4;
  total_size += 1UL * this->_internal_pre_key_bundles_size();
  for (const auto& msg : this->pre_key_bundles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string user_id = 3;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPreKeyBundleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPreKeyBundleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPreKeyBundleResponse::GetClassData() const { return &_class_data_; }

void GetPreKeyBundleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPreKeyBundleResponse *>(to)->MergeFrom(
      static_cast<const GetPreKeyBundleResponse &>(from));
}


void GetPreKeyBundleResponse::MergeFrom(const GetPreKeyBundleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skissm.GetPreKeyBundleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pre_key_bundles_.MergeFrom(from.pre_key_bundles_);
  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPreKeyBundleResponse::CopyFrom(const GetPreKeyBundleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skissm.GetPreKeyBundleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPreKeyBundleResponse::IsInitialized() const {
  return true;
}

void GetPreKeyBundleResponse::InternalSwap(GetPreKeyBundleResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pre_key_bundles_.InternalSwap(&other->pre_key_bundles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPreKeyBundleResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fGetPreKeyBundleResponse_2eproto_getter, &descriptor_table_skissm_2fGetPreKeyBundleResponse_2eproto_once,
      file_level_metadata_skissm_2fGetPreKeyBundleResponse_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skissm::GetPreKeyBundleResponse* Arena::CreateMaybeMessage< ::skissm::GetPreKeyBundleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skissm::GetPreKeyBundleResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
