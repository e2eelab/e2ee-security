// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/Session.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skissm_2fSession_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skissm_2fSession_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "skissm/E2eeAddress.pb.h"
#include "skissm/Ratchet.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skissm_2fSession_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skissm_2fSession_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fSession_2eproto;
namespace skissm {
class Session;
struct SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> ::skissm::Session* Arena::CreateMaybeMessage<::skissm::Session>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace skissm {

// ===================================================================

class Session final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skissm.Session) */ {
 public:
  inline Session() : Session(nullptr) {}
  ~Session() override;
  explicit constexpr Session(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Session& default_instance() {
    return *internal_default_instance();
  }
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Session& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Session& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skissm.Session";
  }
  protected:
  explicit Session(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kE2EePackIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kAliceIdentityKeyFieldNumber = 8,
    kAliceEphemeralKeyFieldNumber = 9,
    kBobSignedPreKeyFieldNumber = 10,
    kBobOneTimePreKeyFieldNumber = 12,
    kAssociatedDataFieldNumber = 15,
    kSessionOwnerFieldNumber = 4,
    kFromFieldNumber = 5,
    kToFieldNumber = 6,
    kRatchetFieldNumber = 7,
    kBobSignedPreKeyIdFieldNumber = 11,
    kBobOneTimePreKeyIdFieldNumber = 13,
    kRespondedFieldNumber = 14,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string e2ee_pack_id = 2;
  void clear_e2ee_pack_id();
  const std::string& e2ee_pack_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_e2ee_pack_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_e2ee_pack_id();
  PROTOBUF_NODISCARD std::string* release_e2ee_pack_id();
  void set_allocated_e2ee_pack_id(std::string* e2ee_pack_id);
  private:
  const std::string& _internal_e2ee_pack_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_e2ee_pack_id(const std::string& value);
  std::string* _internal_mutable_e2ee_pack_id();
  public:

  // string session_id = 3;
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // bytes alice_identity_key = 8;
  void clear_alice_identity_key();
  const std::string& alice_identity_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alice_identity_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alice_identity_key();
  PROTOBUF_NODISCARD std::string* release_alice_identity_key();
  void set_allocated_alice_identity_key(std::string* alice_identity_key);
  private:
  const std::string& _internal_alice_identity_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alice_identity_key(const std::string& value);
  std::string* _internal_mutable_alice_identity_key();
  public:

  // bytes alice_ephemeral_key = 9;
  void clear_alice_ephemeral_key();
  const std::string& alice_ephemeral_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alice_ephemeral_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alice_ephemeral_key();
  PROTOBUF_NODISCARD std::string* release_alice_ephemeral_key();
  void set_allocated_alice_ephemeral_key(std::string* alice_ephemeral_key);
  private:
  const std::string& _internal_alice_ephemeral_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alice_ephemeral_key(const std::string& value);
  std::string* _internal_mutable_alice_ephemeral_key();
  public:

  // bytes bob_signed_pre_key = 10;
  void clear_bob_signed_pre_key();
  const std::string& bob_signed_pre_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bob_signed_pre_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bob_signed_pre_key();
  PROTOBUF_NODISCARD std::string* release_bob_signed_pre_key();
  void set_allocated_bob_signed_pre_key(std::string* bob_signed_pre_key);
  private:
  const std::string& _internal_bob_signed_pre_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bob_signed_pre_key(const std::string& value);
  std::string* _internal_mutable_bob_signed_pre_key();
  public:

  // bytes bob_one_time_pre_key = 12;
  void clear_bob_one_time_pre_key();
  const std::string& bob_one_time_pre_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bob_one_time_pre_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bob_one_time_pre_key();
  PROTOBUF_NODISCARD std::string* release_bob_one_time_pre_key();
  void set_allocated_bob_one_time_pre_key(std::string* bob_one_time_pre_key);
  private:
  const std::string& _internal_bob_one_time_pre_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bob_one_time_pre_key(const std::string& value);
  std::string* _internal_mutable_bob_one_time_pre_key();
  public:

  // bytes associated_data = 15;
  void clear_associated_data();
  const std::string& associated_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_associated_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_associated_data();
  PROTOBUF_NODISCARD std::string* release_associated_data();
  void set_allocated_associated_data(std::string* associated_data);
  private:
  const std::string& _internal_associated_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_associated_data(const std::string& value);
  std::string* _internal_mutable_associated_data();
  public:

  // .skissm.E2eeAddress session_owner = 4;
  bool has_session_owner() const;
  private:
  bool _internal_has_session_owner() const;
  public:
  void clear_session_owner();
  const ::skissm::E2eeAddress& session_owner() const;
  PROTOBUF_NODISCARD ::skissm::E2eeAddress* release_session_owner();
  ::skissm::E2eeAddress* mutable_session_owner();
  void set_allocated_session_owner(::skissm::E2eeAddress* session_owner);
  private:
  const ::skissm::E2eeAddress& _internal_session_owner() const;
  ::skissm::E2eeAddress* _internal_mutable_session_owner();
  public:
  void unsafe_arena_set_allocated_session_owner(
      ::skissm::E2eeAddress* session_owner);
  ::skissm::E2eeAddress* unsafe_arena_release_session_owner();

  // .skissm.E2eeAddress from = 5;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::skissm::E2eeAddress& from() const;
  PROTOBUF_NODISCARD ::skissm::E2eeAddress* release_from();
  ::skissm::E2eeAddress* mutable_from();
  void set_allocated_from(::skissm::E2eeAddress* from);
  private:
  const ::skissm::E2eeAddress& _internal_from() const;
  ::skissm::E2eeAddress* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::skissm::E2eeAddress* from);
  ::skissm::E2eeAddress* unsafe_arena_release_from();

  // .skissm.E2eeAddress to = 6;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::skissm::E2eeAddress& to() const;
  PROTOBUF_NODISCARD ::skissm::E2eeAddress* release_to();
  ::skissm::E2eeAddress* mutable_to();
  void set_allocated_to(::skissm::E2eeAddress* to);
  private:
  const ::skissm::E2eeAddress& _internal_to() const;
  ::skissm::E2eeAddress* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::skissm::E2eeAddress* to);
  ::skissm::E2eeAddress* unsafe_arena_release_to();

  // .skissm.Ratchet ratchet = 7;
  bool has_ratchet() const;
  private:
  bool _internal_has_ratchet() const;
  public:
  void clear_ratchet();
  const ::skissm::Ratchet& ratchet() const;
  PROTOBUF_NODISCARD ::skissm::Ratchet* release_ratchet();
  ::skissm::Ratchet* mutable_ratchet();
  void set_allocated_ratchet(::skissm::Ratchet* ratchet);
  private:
  const ::skissm::Ratchet& _internal_ratchet() const;
  ::skissm::Ratchet* _internal_mutable_ratchet();
  public:
  void unsafe_arena_set_allocated_ratchet(
      ::skissm::Ratchet* ratchet);
  ::skissm::Ratchet* unsafe_arena_release_ratchet();

  // uint32 bob_signed_pre_key_id = 11;
  void clear_bob_signed_pre_key_id();
  uint32_t bob_signed_pre_key_id() const;
  void set_bob_signed_pre_key_id(uint32_t value);
  private:
  uint32_t _internal_bob_signed_pre_key_id() const;
  void _internal_set_bob_signed_pre_key_id(uint32_t value);
  public:

  // uint32 bob_one_time_pre_key_id = 13;
  void clear_bob_one_time_pre_key_id();
  uint32_t bob_one_time_pre_key_id() const;
  void set_bob_one_time_pre_key_id(uint32_t value);
  private:
  uint32_t _internal_bob_one_time_pre_key_id() const;
  void _internal_set_bob_one_time_pre_key_id(uint32_t value);
  public:

  // bool responded = 14;
  void clear_responded();
  bool responded() const;
  void set_responded(bool value);
  private:
  bool _internal_responded() const;
  void _internal_set_responded(bool value);
  public:

  // @@protoc_insertion_point(class_scope:skissm.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr e2ee_pack_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alice_identity_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alice_ephemeral_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bob_signed_pre_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bob_one_time_pre_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr associated_data_;
  ::skissm::E2eeAddress* session_owner_;
  ::skissm::E2eeAddress* from_;
  ::skissm::E2eeAddress* to_;
  ::skissm::Ratchet* ratchet_;
  uint32_t bob_signed_pre_key_id_;
  uint32_t bob_one_time_pre_key_id_;
  bool responded_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skissm_2fSession_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Session

// string version = 1;
inline void Session::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& Session::version() const {
  // @@protoc_insertion_point(field_get:skissm.Session.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.Session.version)
}
inline std::string* Session::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:skissm.Session.version)
  return _s;
}
inline const std::string& Session::_internal_version() const {
  return version_.Get();
}
inline void Session::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Session::release_version() {
  // @@protoc_insertion_point(field_release:skissm.Session.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Session::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.Session.version)
}

// string e2ee_pack_id = 2;
inline void Session::clear_e2ee_pack_id() {
  e2ee_pack_id_.ClearToEmpty();
}
inline const std::string& Session::e2ee_pack_id() const {
  // @@protoc_insertion_point(field_get:skissm.Session.e2ee_pack_id)
  return _internal_e2ee_pack_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_e2ee_pack_id(ArgT0&& arg0, ArgT... args) {
 
 e2ee_pack_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.Session.e2ee_pack_id)
}
inline std::string* Session::mutable_e2ee_pack_id() {
  std::string* _s = _internal_mutable_e2ee_pack_id();
  // @@protoc_insertion_point(field_mutable:skissm.Session.e2ee_pack_id)
  return _s;
}
inline const std::string& Session::_internal_e2ee_pack_id() const {
  return e2ee_pack_id_.Get();
}
inline void Session::_internal_set_e2ee_pack_id(const std::string& value) {
  
  e2ee_pack_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_e2ee_pack_id() {
  
  return e2ee_pack_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Session::release_e2ee_pack_id() {
  // @@protoc_insertion_point(field_release:skissm.Session.e2ee_pack_id)
  return e2ee_pack_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Session::set_allocated_e2ee_pack_id(std::string* e2ee_pack_id) {
  if (e2ee_pack_id != nullptr) {
    
  } else {
    
  }
  e2ee_pack_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), e2ee_pack_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (e2ee_pack_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    e2ee_pack_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.Session.e2ee_pack_id)
}

// string session_id = 3;
inline void Session::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& Session::session_id() const {
  // @@protoc_insertion_point(field_get:skissm.Session.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.Session.session_id)
}
inline std::string* Session::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:skissm.Session.session_id)
  return _s;
}
inline const std::string& Session::_internal_session_id() const {
  return session_id_.Get();
}
inline void Session::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Session::release_session_id() {
  // @@protoc_insertion_point(field_release:skissm.Session.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Session::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.Session.session_id)
}

// .skissm.E2eeAddress session_owner = 4;
inline bool Session::_internal_has_session_owner() const {
  return this != internal_default_instance() && session_owner_ != nullptr;
}
inline bool Session::has_session_owner() const {
  return _internal_has_session_owner();
}
inline const ::skissm::E2eeAddress& Session::_internal_session_owner() const {
  const ::skissm::E2eeAddress* p = session_owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::skissm::E2eeAddress&>(
      ::skissm::_E2eeAddress_default_instance_);
}
inline const ::skissm::E2eeAddress& Session::session_owner() const {
  // @@protoc_insertion_point(field_get:skissm.Session.session_owner)
  return _internal_session_owner();
}
inline void Session::unsafe_arena_set_allocated_session_owner(
    ::skissm::E2eeAddress* session_owner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_owner_);
  }
  session_owner_ = session_owner;
  if (session_owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:skissm.Session.session_owner)
}
inline ::skissm::E2eeAddress* Session::release_session_owner() {
  
  ::skissm::E2eeAddress* temp = session_owner_;
  session_owner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::skissm::E2eeAddress* Session::unsafe_arena_release_session_owner() {
  // @@protoc_insertion_point(field_release:skissm.Session.session_owner)
  
  ::skissm::E2eeAddress* temp = session_owner_;
  session_owner_ = nullptr;
  return temp;
}
inline ::skissm::E2eeAddress* Session::_internal_mutable_session_owner() {
  
  if (session_owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::skissm::E2eeAddress>(GetArenaForAllocation());
    session_owner_ = p;
  }
  return session_owner_;
}
inline ::skissm::E2eeAddress* Session::mutable_session_owner() {
  ::skissm::E2eeAddress* _msg = _internal_mutable_session_owner();
  // @@protoc_insertion_point(field_mutable:skissm.Session.session_owner)
  return _msg;
}
inline void Session::set_allocated_session_owner(::skissm::E2eeAddress* session_owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_owner_);
  }
  if (session_owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_owner));
    if (message_arena != submessage_arena) {
      session_owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_owner, submessage_arena);
    }
    
  } else {
    
  }
  session_owner_ = session_owner;
  // @@protoc_insertion_point(field_set_allocated:skissm.Session.session_owner)
}

// .skissm.E2eeAddress from = 5;
inline bool Session::_internal_has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline bool Session::has_from() const {
  return _internal_has_from();
}
inline const ::skissm::E2eeAddress& Session::_internal_from() const {
  const ::skissm::E2eeAddress* p = from_;
  return p != nullptr ? *p : reinterpret_cast<const ::skissm::E2eeAddress&>(
      ::skissm::_E2eeAddress_default_instance_);
}
inline const ::skissm::E2eeAddress& Session::from() const {
  // @@protoc_insertion_point(field_get:skissm.Session.from)
  return _internal_from();
}
inline void Session::unsafe_arena_set_allocated_from(
    ::skissm::E2eeAddress* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:skissm.Session.from)
}
inline ::skissm::E2eeAddress* Session::release_from() {
  
  ::skissm::E2eeAddress* temp = from_;
  from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::skissm::E2eeAddress* Session::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:skissm.Session.from)
  
  ::skissm::E2eeAddress* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::skissm::E2eeAddress* Session::_internal_mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::skissm::E2eeAddress>(GetArenaForAllocation());
    from_ = p;
  }
  return from_;
}
inline ::skissm::E2eeAddress* Session::mutable_from() {
  ::skissm::E2eeAddress* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:skissm.Session.from)
  return _msg;
}
inline void Session::set_allocated_from(::skissm::E2eeAddress* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from));
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:skissm.Session.from)
}

// .skissm.E2eeAddress to = 6;
inline bool Session::_internal_has_to() const {
  return this != internal_default_instance() && to_ != nullptr;
}
inline bool Session::has_to() const {
  return _internal_has_to();
}
inline const ::skissm::E2eeAddress& Session::_internal_to() const {
  const ::skissm::E2eeAddress* p = to_;
  return p != nullptr ? *p : reinterpret_cast<const ::skissm::E2eeAddress&>(
      ::skissm::_E2eeAddress_default_instance_);
}
inline const ::skissm::E2eeAddress& Session::to() const {
  // @@protoc_insertion_point(field_get:skissm.Session.to)
  return _internal_to();
}
inline void Session::unsafe_arena_set_allocated_to(
    ::skissm::E2eeAddress* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:skissm.Session.to)
}
inline ::skissm::E2eeAddress* Session::release_to() {
  
  ::skissm::E2eeAddress* temp = to_;
  to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::skissm::E2eeAddress* Session::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:skissm.Session.to)
  
  ::skissm::E2eeAddress* temp = to_;
  to_ = nullptr;
  return temp;
}
inline ::skissm::E2eeAddress* Session::_internal_mutable_to() {
  
  if (to_ == nullptr) {
    auto* p = CreateMaybeMessage<::skissm::E2eeAddress>(GetArenaForAllocation());
    to_ = p;
  }
  return to_;
}
inline ::skissm::E2eeAddress* Session::mutable_to() {
  ::skissm::E2eeAddress* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:skissm.Session.to)
  return _msg;
}
inline void Session::set_allocated_to(::skissm::E2eeAddress* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to));
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:skissm.Session.to)
}

// .skissm.Ratchet ratchet = 7;
inline bool Session::_internal_has_ratchet() const {
  return this != internal_default_instance() && ratchet_ != nullptr;
}
inline bool Session::has_ratchet() const {
  return _internal_has_ratchet();
}
inline const ::skissm::Ratchet& Session::_internal_ratchet() const {
  const ::skissm::Ratchet* p = ratchet_;
  return p != nullptr ? *p : reinterpret_cast<const ::skissm::Ratchet&>(
      ::skissm::_Ratchet_default_instance_);
}
inline const ::skissm::Ratchet& Session::ratchet() const {
  // @@protoc_insertion_point(field_get:skissm.Session.ratchet)
  return _internal_ratchet();
}
inline void Session::unsafe_arena_set_allocated_ratchet(
    ::skissm::Ratchet* ratchet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ratchet_);
  }
  ratchet_ = ratchet;
  if (ratchet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:skissm.Session.ratchet)
}
inline ::skissm::Ratchet* Session::release_ratchet() {
  
  ::skissm::Ratchet* temp = ratchet_;
  ratchet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::skissm::Ratchet* Session::unsafe_arena_release_ratchet() {
  // @@protoc_insertion_point(field_release:skissm.Session.ratchet)
  
  ::skissm::Ratchet* temp = ratchet_;
  ratchet_ = nullptr;
  return temp;
}
inline ::skissm::Ratchet* Session::_internal_mutable_ratchet() {
  
  if (ratchet_ == nullptr) {
    auto* p = CreateMaybeMessage<::skissm::Ratchet>(GetArenaForAllocation());
    ratchet_ = p;
  }
  return ratchet_;
}
inline ::skissm::Ratchet* Session::mutable_ratchet() {
  ::skissm::Ratchet* _msg = _internal_mutable_ratchet();
  // @@protoc_insertion_point(field_mutable:skissm.Session.ratchet)
  return _msg;
}
inline void Session::set_allocated_ratchet(::skissm::Ratchet* ratchet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ratchet_);
  }
  if (ratchet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ratchet));
    if (message_arena != submessage_arena) {
      ratchet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ratchet, submessage_arena);
    }
    
  } else {
    
  }
  ratchet_ = ratchet;
  // @@protoc_insertion_point(field_set_allocated:skissm.Session.ratchet)
}

// bytes alice_identity_key = 8;
inline void Session::clear_alice_identity_key() {
  alice_identity_key_.ClearToEmpty();
}
inline const std::string& Session::alice_identity_key() const {
  // @@protoc_insertion_point(field_get:skissm.Session.alice_identity_key)
  return _internal_alice_identity_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_alice_identity_key(ArgT0&& arg0, ArgT... args) {
 
 alice_identity_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.Session.alice_identity_key)
}
inline std::string* Session::mutable_alice_identity_key() {
  std::string* _s = _internal_mutable_alice_identity_key();
  // @@protoc_insertion_point(field_mutable:skissm.Session.alice_identity_key)
  return _s;
}
inline const std::string& Session::_internal_alice_identity_key() const {
  return alice_identity_key_.Get();
}
inline void Session::_internal_set_alice_identity_key(const std::string& value) {
  
  alice_identity_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_alice_identity_key() {
  
  return alice_identity_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Session::release_alice_identity_key() {
  // @@protoc_insertion_point(field_release:skissm.Session.alice_identity_key)
  return alice_identity_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Session::set_allocated_alice_identity_key(std::string* alice_identity_key) {
  if (alice_identity_key != nullptr) {
    
  } else {
    
  }
  alice_identity_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alice_identity_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (alice_identity_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    alice_identity_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.Session.alice_identity_key)
}

// bytes alice_ephemeral_key = 9;
inline void Session::clear_alice_ephemeral_key() {
  alice_ephemeral_key_.ClearToEmpty();
}
inline const std::string& Session::alice_ephemeral_key() const {
  // @@protoc_insertion_point(field_get:skissm.Session.alice_ephemeral_key)
  return _internal_alice_ephemeral_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_alice_ephemeral_key(ArgT0&& arg0, ArgT... args) {
 
 alice_ephemeral_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.Session.alice_ephemeral_key)
}
inline std::string* Session::mutable_alice_ephemeral_key() {
  std::string* _s = _internal_mutable_alice_ephemeral_key();
  // @@protoc_insertion_point(field_mutable:skissm.Session.alice_ephemeral_key)
  return _s;
}
inline const std::string& Session::_internal_alice_ephemeral_key() const {
  return alice_ephemeral_key_.Get();
}
inline void Session::_internal_set_alice_ephemeral_key(const std::string& value) {
  
  alice_ephemeral_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_alice_ephemeral_key() {
  
  return alice_ephemeral_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Session::release_alice_ephemeral_key() {
  // @@protoc_insertion_point(field_release:skissm.Session.alice_ephemeral_key)
  return alice_ephemeral_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Session::set_allocated_alice_ephemeral_key(std::string* alice_ephemeral_key) {
  if (alice_ephemeral_key != nullptr) {
    
  } else {
    
  }
  alice_ephemeral_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alice_ephemeral_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (alice_ephemeral_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    alice_ephemeral_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.Session.alice_ephemeral_key)
}

// bytes bob_signed_pre_key = 10;
inline void Session::clear_bob_signed_pre_key() {
  bob_signed_pre_key_.ClearToEmpty();
}
inline const std::string& Session::bob_signed_pre_key() const {
  // @@protoc_insertion_point(field_get:skissm.Session.bob_signed_pre_key)
  return _internal_bob_signed_pre_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_bob_signed_pre_key(ArgT0&& arg0, ArgT... args) {
 
 bob_signed_pre_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.Session.bob_signed_pre_key)
}
inline std::string* Session::mutable_bob_signed_pre_key() {
  std::string* _s = _internal_mutable_bob_signed_pre_key();
  // @@protoc_insertion_point(field_mutable:skissm.Session.bob_signed_pre_key)
  return _s;
}
inline const std::string& Session::_internal_bob_signed_pre_key() const {
  return bob_signed_pre_key_.Get();
}
inline void Session::_internal_set_bob_signed_pre_key(const std::string& value) {
  
  bob_signed_pre_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_bob_signed_pre_key() {
  
  return bob_signed_pre_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Session::release_bob_signed_pre_key() {
  // @@protoc_insertion_point(field_release:skissm.Session.bob_signed_pre_key)
  return bob_signed_pre_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Session::set_allocated_bob_signed_pre_key(std::string* bob_signed_pre_key) {
  if (bob_signed_pre_key != nullptr) {
    
  } else {
    
  }
  bob_signed_pre_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bob_signed_pre_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bob_signed_pre_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bob_signed_pre_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.Session.bob_signed_pre_key)
}

// uint32 bob_signed_pre_key_id = 11;
inline void Session::clear_bob_signed_pre_key_id() {
  bob_signed_pre_key_id_ = 0u;
}
inline uint32_t Session::_internal_bob_signed_pre_key_id() const {
  return bob_signed_pre_key_id_;
}
inline uint32_t Session::bob_signed_pre_key_id() const {
  // @@protoc_insertion_point(field_get:skissm.Session.bob_signed_pre_key_id)
  return _internal_bob_signed_pre_key_id();
}
inline void Session::_internal_set_bob_signed_pre_key_id(uint32_t value) {
  
  bob_signed_pre_key_id_ = value;
}
inline void Session::set_bob_signed_pre_key_id(uint32_t value) {
  _internal_set_bob_signed_pre_key_id(value);
  // @@protoc_insertion_point(field_set:skissm.Session.bob_signed_pre_key_id)
}

// bytes bob_one_time_pre_key = 12;
inline void Session::clear_bob_one_time_pre_key() {
  bob_one_time_pre_key_.ClearToEmpty();
}
inline const std::string& Session::bob_one_time_pre_key() const {
  // @@protoc_insertion_point(field_get:skissm.Session.bob_one_time_pre_key)
  return _internal_bob_one_time_pre_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_bob_one_time_pre_key(ArgT0&& arg0, ArgT... args) {
 
 bob_one_time_pre_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.Session.bob_one_time_pre_key)
}
inline std::string* Session::mutable_bob_one_time_pre_key() {
  std::string* _s = _internal_mutable_bob_one_time_pre_key();
  // @@protoc_insertion_point(field_mutable:skissm.Session.bob_one_time_pre_key)
  return _s;
}
inline const std::string& Session::_internal_bob_one_time_pre_key() const {
  return bob_one_time_pre_key_.Get();
}
inline void Session::_internal_set_bob_one_time_pre_key(const std::string& value) {
  
  bob_one_time_pre_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_bob_one_time_pre_key() {
  
  return bob_one_time_pre_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Session::release_bob_one_time_pre_key() {
  // @@protoc_insertion_point(field_release:skissm.Session.bob_one_time_pre_key)
  return bob_one_time_pre_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Session::set_allocated_bob_one_time_pre_key(std::string* bob_one_time_pre_key) {
  if (bob_one_time_pre_key != nullptr) {
    
  } else {
    
  }
  bob_one_time_pre_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bob_one_time_pre_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bob_one_time_pre_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bob_one_time_pre_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.Session.bob_one_time_pre_key)
}

// uint32 bob_one_time_pre_key_id = 13;
inline void Session::clear_bob_one_time_pre_key_id() {
  bob_one_time_pre_key_id_ = 0u;
}
inline uint32_t Session::_internal_bob_one_time_pre_key_id() const {
  return bob_one_time_pre_key_id_;
}
inline uint32_t Session::bob_one_time_pre_key_id() const {
  // @@protoc_insertion_point(field_get:skissm.Session.bob_one_time_pre_key_id)
  return _internal_bob_one_time_pre_key_id();
}
inline void Session::_internal_set_bob_one_time_pre_key_id(uint32_t value) {
  
  bob_one_time_pre_key_id_ = value;
}
inline void Session::set_bob_one_time_pre_key_id(uint32_t value) {
  _internal_set_bob_one_time_pre_key_id(value);
  // @@protoc_insertion_point(field_set:skissm.Session.bob_one_time_pre_key_id)
}

// bool responded = 14;
inline void Session::clear_responded() {
  responded_ = false;
}
inline bool Session::_internal_responded() const {
  return responded_;
}
inline bool Session::responded() const {
  // @@protoc_insertion_point(field_get:skissm.Session.responded)
  return _internal_responded();
}
inline void Session::_internal_set_responded(bool value) {
  
  responded_ = value;
}
inline void Session::set_responded(bool value) {
  _internal_set_responded(value);
  // @@protoc_insertion_point(field_set:skissm.Session.responded)
}

// bytes associated_data = 15;
inline void Session::clear_associated_data() {
  associated_data_.ClearToEmpty();
}
inline const std::string& Session::associated_data() const {
  // @@protoc_insertion_point(field_get:skissm.Session.associated_data)
  return _internal_associated_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_associated_data(ArgT0&& arg0, ArgT... args) {
 
 associated_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.Session.associated_data)
}
inline std::string* Session::mutable_associated_data() {
  std::string* _s = _internal_mutable_associated_data();
  // @@protoc_insertion_point(field_mutable:skissm.Session.associated_data)
  return _s;
}
inline const std::string& Session::_internal_associated_data() const {
  return associated_data_.Get();
}
inline void Session::_internal_set_associated_data(const std::string& value) {
  
  associated_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_associated_data() {
  
  return associated_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Session::release_associated_data() {
  // @@protoc_insertion_point(field_release:skissm.Session.associated_data)
  return associated_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Session::set_allocated_associated_data(std::string* associated_data) {
  if (associated_data != nullptr) {
    
  } else {
    
  }
  associated_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), associated_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (associated_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    associated_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.Session.associated_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace skissm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skissm_2fSession_2eproto
