// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/Plaintext.proto

#include "skissm/Plaintext.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace skissm {
constexpr Plaintext::Plaintext(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct PlaintextDefaultTypeInternal {
  constexpr PlaintextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlaintextDefaultTypeInternal() {}
  union {
    Plaintext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlaintextDefaultTypeInternal _Plaintext_default_instance_;
}  // namespace skissm
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skissm_2fPlaintext_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skissm_2fPlaintext_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fPlaintext_2eproto = nullptr;

const uint32_t TableStruct_skissm_2fPlaintext_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skissm::Plaintext, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::skissm::Plaintext, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skissm::Plaintext, version_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::skissm::Plaintext, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::skissm::Plaintext)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skissm::_Plaintext_default_instance_),
};

const char descriptor_table_protodef_skissm_2fPlaintext_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026skissm/Plaintext.proto\022\006skissm\032\037skissm"
  "/GroupPreKeyPayload.proto\"r\n\tPlaintext\022\017"
  "\n\007version\030\001 \001(\t\022\024\n\ncommon_msg\030\002 \001(\014H\000\0223\n"
  "\rgroup_pre_key\030\003 \001(\0132\032.skissm.GroupPreKe"
  "yPayloadH\000B\t\n\007payloadB*\n\030org.e2eelab.ski"
  "ssm.protoB\016PlaintextProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skissm_2fPlaintext_2eproto_deps[1] = {
  &::descriptor_table_skissm_2fGroupPreKeyPayload_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fPlaintext_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fPlaintext_2eproto = {
  false, false, 233, descriptor_table_protodef_skissm_2fPlaintext_2eproto, "skissm/Plaintext.proto", 
  &descriptor_table_skissm_2fPlaintext_2eproto_once, descriptor_table_skissm_2fPlaintext_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_skissm_2fPlaintext_2eproto::offsets,
  file_level_metadata_skissm_2fPlaintext_2eproto, file_level_enum_descriptors_skissm_2fPlaintext_2eproto, file_level_service_descriptors_skissm_2fPlaintext_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fPlaintext_2eproto_getter() {
  return &descriptor_table_skissm_2fPlaintext_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fPlaintext_2eproto(&descriptor_table_skissm_2fPlaintext_2eproto);
namespace skissm {

// ===================================================================

class Plaintext::_Internal {
 public:
  static const ::skissm::GroupPreKeyPayload& group_pre_key(const Plaintext* msg);
};

const ::skissm::GroupPreKeyPayload&
Plaintext::_Internal::group_pre_key(const Plaintext* msg) {
  return *msg->payload_.group_pre_key_;
}
void Plaintext::set_allocated_group_pre_key(::skissm::GroupPreKeyPayload* group_pre_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (group_pre_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_pre_key));
    if (message_arena != submessage_arena) {
      group_pre_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_pre_key, submessage_arena);
    }
    set_has_group_pre_key();
    payload_.group_pre_key_ = group_pre_key;
  }
  // @@protoc_insertion_point(field_set_allocated:skissm.Plaintext.group_pre_key)
}
void Plaintext::clear_group_pre_key() {
  if (_internal_has_group_pre_key()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.group_pre_key_;
    }
    clear_has_payload();
  }
}
Plaintext::Plaintext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:skissm.Plaintext)
}
Plaintext::Plaintext(const Plaintext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kCommonMsg: {
      _internal_set_common_msg(from._internal_common_msg());
      break;
    }
    case kGroupPreKey: {
      _internal_mutable_group_pre_key()->::skissm::GroupPreKeyPayload::MergeFrom(from._internal_group_pre_key());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:skissm.Plaintext)
}

inline void Plaintext::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_payload();
}

Plaintext::~Plaintext() {
  // @@protoc_insertion_point(destructor:skissm.Plaintext)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Plaintext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_payload()) {
    clear_payload();
  }
}

void Plaintext::ArenaDtor(void* object) {
  Plaintext* _this = reinterpret_cast< Plaintext* >(object);
  (void)_this;
}
void Plaintext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Plaintext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Plaintext::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:skissm.Plaintext)
  switch (payload_case()) {
    case kCommonMsg: {
      payload_.common_msg_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kGroupPreKey: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.group_pre_key_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Plaintext::Clear() {
// @@protoc_insertion_point(message_clear_start:skissm.Plaintext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty();
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Plaintext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.Plaintext.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes common_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_common_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.GroupPreKeyPayload group_pre_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_pre_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Plaintext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skissm.Plaintext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.Plaintext.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // bytes common_msg = 2;
  if (_internal_has_common_msg()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_common_msg(), target);
  }

  // .skissm.GroupPreKeyPayload group_pre_key = 3;
  if (_internal_has_group_pre_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::group_pre_key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skissm.Plaintext)
  return target;
}

size_t Plaintext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skissm.Plaintext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  switch (payload_case()) {
    // bytes common_msg = 2;
    case kCommonMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_common_msg());
      break;
    }
    // .skissm.GroupPreKeyPayload group_pre_key = 3;
    case kGroupPreKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.group_pre_key_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Plaintext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Plaintext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Plaintext::GetClassData() const { return &_class_data_; }

void Plaintext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Plaintext *>(to)->MergeFrom(
      static_cast<const Plaintext &>(from));
}


void Plaintext::MergeFrom(const Plaintext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skissm.Plaintext)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  switch (from.payload_case()) {
    case kCommonMsg: {
      _internal_set_common_msg(from._internal_common_msg());
      break;
    }
    case kGroupPreKey: {
      _internal_mutable_group_pre_key()->::skissm::GroupPreKeyPayload::MergeFrom(from._internal_group_pre_key());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Plaintext::CopyFrom(const Plaintext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skissm.Plaintext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plaintext::IsInitialized() const {
  return true;
}

void Plaintext::InternalSwap(Plaintext* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Plaintext::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fPlaintext_2eproto_getter, &descriptor_table_skissm_2fPlaintext_2eproto_once,
      file_level_metadata_skissm_2fPlaintext_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skissm::Plaintext* Arena::CreateMaybeMessage< ::skissm::Plaintext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skissm::Plaintext >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
