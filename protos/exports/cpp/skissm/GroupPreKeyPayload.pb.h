// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/GroupPreKeyPayload.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skissm_2fGroupPreKeyPayload_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skissm_2fGroupPreKeyPayload_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "skissm/E2eeAddress.pb.h"
#include "skissm/GroupMember.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skissm_2fGroupPreKeyPayload_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skissm_2fGroupPreKeyPayload_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fGroupPreKeyPayload_2eproto;
namespace skissm {
class GroupPreKeyPayload;
struct GroupPreKeyPayloadDefaultTypeInternal;
extern GroupPreKeyPayloadDefaultTypeInternal _GroupPreKeyPayload_default_instance_;
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> ::skissm::GroupPreKeyPayload* Arena::CreateMaybeMessage<::skissm::GroupPreKeyPayload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace skissm {

// ===================================================================

class GroupPreKeyPayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skissm.GroupPreKeyPayload) */ {
 public:
  inline GroupPreKeyPayload() : GroupPreKeyPayload(nullptr) {}
  ~GroupPreKeyPayload() override;
  explicit constexpr GroupPreKeyPayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupPreKeyPayload(const GroupPreKeyPayload& from);
  GroupPreKeyPayload(GroupPreKeyPayload&& from) noexcept
    : GroupPreKeyPayload() {
    *this = ::std::move(from);
  }

  inline GroupPreKeyPayload& operator=(const GroupPreKeyPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupPreKeyPayload& operator=(GroupPreKeyPayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupPreKeyPayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupPreKeyPayload* internal_default_instance() {
    return reinterpret_cast<const GroupPreKeyPayload*>(
               &_GroupPreKeyPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GroupPreKeyPayload& a, GroupPreKeyPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupPreKeyPayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupPreKeyPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupPreKeyPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupPreKeyPayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupPreKeyPayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GroupPreKeyPayload& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupPreKeyPayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skissm.GroupPreKeyPayload";
  }
  protected:
  explicit GroupPreKeyPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupMembersFieldNumber = 5,
    kVersionFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kOldSessionIdFieldNumber = 3,
    kChainKeyFieldNumber = 7,
    kSignaturePublicKeyFieldNumber = 8,
    kGroupAddressFieldNumber = 4,
    kSequenceFieldNumber = 6,
  };
  // repeated .skissm.GroupMember group_members = 5;
  int group_members_size() const;
  private:
  int _internal_group_members_size() const;
  public:
  void clear_group_members();
  ::skissm::GroupMember* mutable_group_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::GroupMember >*
      mutable_group_members();
  private:
  const ::skissm::GroupMember& _internal_group_members(int index) const;
  ::skissm::GroupMember* _internal_add_group_members();
  public:
  const ::skissm::GroupMember& group_members(int index) const;
  ::skissm::GroupMember* add_group_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::GroupMember >&
      group_members() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string session_id = 2;
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string old_session_id = 3;
  void clear_old_session_id();
  const std::string& old_session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_session_id();
  PROTOBUF_NODISCARD std::string* release_old_session_id();
  void set_allocated_old_session_id(std::string* old_session_id);
  private:
  const std::string& _internal_old_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_session_id(const std::string& value);
  std::string* _internal_mutable_old_session_id();
  public:

  // bytes chain_key = 7;
  void clear_chain_key();
  const std::string& chain_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chain_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chain_key();
  PROTOBUF_NODISCARD std::string* release_chain_key();
  void set_allocated_chain_key(std::string* chain_key);
  private:
  const std::string& _internal_chain_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_key(const std::string& value);
  std::string* _internal_mutable_chain_key();
  public:

  // bytes signature_public_key = 8;
  void clear_signature_public_key();
  const std::string& signature_public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature_public_key();
  PROTOBUF_NODISCARD std::string* release_signature_public_key();
  void set_allocated_signature_public_key(std::string* signature_public_key);
  private:
  const std::string& _internal_signature_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature_public_key(const std::string& value);
  std::string* _internal_mutable_signature_public_key();
  public:

  // .skissm.E2eeAddress group_address = 4;
  bool has_group_address() const;
  private:
  bool _internal_has_group_address() const;
  public:
  void clear_group_address();
  const ::skissm::E2eeAddress& group_address() const;
  PROTOBUF_NODISCARD ::skissm::E2eeAddress* release_group_address();
  ::skissm::E2eeAddress* mutable_group_address();
  void set_allocated_group_address(::skissm::E2eeAddress* group_address);
  private:
  const ::skissm::E2eeAddress& _internal_group_address() const;
  ::skissm::E2eeAddress* _internal_mutable_group_address();
  public:
  void unsafe_arena_set_allocated_group_address(
      ::skissm::E2eeAddress* group_address);
  ::skissm::E2eeAddress* unsafe_arena_release_group_address();

  // uint32 sequence = 6;
  void clear_sequence();
  uint32_t sequence() const;
  void set_sequence(uint32_t value);
  private:
  uint32_t _internal_sequence() const;
  void _internal_set_sequence(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:skissm.GroupPreKeyPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::GroupMember > group_members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_public_key_;
  ::skissm::E2eeAddress* group_address_;
  uint32_t sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skissm_2fGroupPreKeyPayload_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GroupPreKeyPayload

// string version = 1;
inline void GroupPreKeyPayload::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& GroupPreKeyPayload::version() const {
  // @@protoc_insertion_point(field_get:skissm.GroupPreKeyPayload.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupPreKeyPayload::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.GroupPreKeyPayload.version)
}
inline std::string* GroupPreKeyPayload::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:skissm.GroupPreKeyPayload.version)
  return _s;
}
inline const std::string& GroupPreKeyPayload::_internal_version() const {
  return version_.Get();
}
inline void GroupPreKeyPayload::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GroupPreKeyPayload::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GroupPreKeyPayload::release_version() {
  // @@protoc_insertion_point(field_release:skissm.GroupPreKeyPayload.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GroupPreKeyPayload::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.GroupPreKeyPayload.version)
}

// string session_id = 2;
inline void GroupPreKeyPayload::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& GroupPreKeyPayload::session_id() const {
  // @@protoc_insertion_point(field_get:skissm.GroupPreKeyPayload.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupPreKeyPayload::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.GroupPreKeyPayload.session_id)
}
inline std::string* GroupPreKeyPayload::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:skissm.GroupPreKeyPayload.session_id)
  return _s;
}
inline const std::string& GroupPreKeyPayload::_internal_session_id() const {
  return session_id_.Get();
}
inline void GroupPreKeyPayload::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GroupPreKeyPayload::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GroupPreKeyPayload::release_session_id() {
  // @@protoc_insertion_point(field_release:skissm.GroupPreKeyPayload.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GroupPreKeyPayload::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.GroupPreKeyPayload.session_id)
}

// string old_session_id = 3;
inline void GroupPreKeyPayload::clear_old_session_id() {
  old_session_id_.ClearToEmpty();
}
inline const std::string& GroupPreKeyPayload::old_session_id() const {
  // @@protoc_insertion_point(field_get:skissm.GroupPreKeyPayload.old_session_id)
  return _internal_old_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupPreKeyPayload::set_old_session_id(ArgT0&& arg0, ArgT... args) {
 
 old_session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.GroupPreKeyPayload.old_session_id)
}
inline std::string* GroupPreKeyPayload::mutable_old_session_id() {
  std::string* _s = _internal_mutable_old_session_id();
  // @@protoc_insertion_point(field_mutable:skissm.GroupPreKeyPayload.old_session_id)
  return _s;
}
inline const std::string& GroupPreKeyPayload::_internal_old_session_id() const {
  return old_session_id_.Get();
}
inline void GroupPreKeyPayload::_internal_set_old_session_id(const std::string& value) {
  
  old_session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GroupPreKeyPayload::_internal_mutable_old_session_id() {
  
  return old_session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GroupPreKeyPayload::release_old_session_id() {
  // @@protoc_insertion_point(field_release:skissm.GroupPreKeyPayload.old_session_id)
  return old_session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GroupPreKeyPayload::set_allocated_old_session_id(std::string* old_session_id) {
  if (old_session_id != nullptr) {
    
  } else {
    
  }
  old_session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_session_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (old_session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    old_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.GroupPreKeyPayload.old_session_id)
}

// .skissm.E2eeAddress group_address = 4;
inline bool GroupPreKeyPayload::_internal_has_group_address() const {
  return this != internal_default_instance() && group_address_ != nullptr;
}
inline bool GroupPreKeyPayload::has_group_address() const {
  return _internal_has_group_address();
}
inline const ::skissm::E2eeAddress& GroupPreKeyPayload::_internal_group_address() const {
  const ::skissm::E2eeAddress* p = group_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::skissm::E2eeAddress&>(
      ::skissm::_E2eeAddress_default_instance_);
}
inline const ::skissm::E2eeAddress& GroupPreKeyPayload::group_address() const {
  // @@protoc_insertion_point(field_get:skissm.GroupPreKeyPayload.group_address)
  return _internal_group_address();
}
inline void GroupPreKeyPayload::unsafe_arena_set_allocated_group_address(
    ::skissm::E2eeAddress* group_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_address_);
  }
  group_address_ = group_address;
  if (group_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:skissm.GroupPreKeyPayload.group_address)
}
inline ::skissm::E2eeAddress* GroupPreKeyPayload::release_group_address() {
  
  ::skissm::E2eeAddress* temp = group_address_;
  group_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::skissm::E2eeAddress* GroupPreKeyPayload::unsafe_arena_release_group_address() {
  // @@protoc_insertion_point(field_release:skissm.GroupPreKeyPayload.group_address)
  
  ::skissm::E2eeAddress* temp = group_address_;
  group_address_ = nullptr;
  return temp;
}
inline ::skissm::E2eeAddress* GroupPreKeyPayload::_internal_mutable_group_address() {
  
  if (group_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::skissm::E2eeAddress>(GetArenaForAllocation());
    group_address_ = p;
  }
  return group_address_;
}
inline ::skissm::E2eeAddress* GroupPreKeyPayload::mutable_group_address() {
  ::skissm::E2eeAddress* _msg = _internal_mutable_group_address();
  // @@protoc_insertion_point(field_mutable:skissm.GroupPreKeyPayload.group_address)
  return _msg;
}
inline void GroupPreKeyPayload::set_allocated_group_address(::skissm::E2eeAddress* group_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_address_);
  }
  if (group_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_address));
    if (message_arena != submessage_arena) {
      group_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_address, submessage_arena);
    }
    
  } else {
    
  }
  group_address_ = group_address;
  // @@protoc_insertion_point(field_set_allocated:skissm.GroupPreKeyPayload.group_address)
}

// repeated .skissm.GroupMember group_members = 5;
inline int GroupPreKeyPayload::_internal_group_members_size() const {
  return group_members_.size();
}
inline int GroupPreKeyPayload::group_members_size() const {
  return _internal_group_members_size();
}
inline ::skissm::GroupMember* GroupPreKeyPayload::mutable_group_members(int index) {
  // @@protoc_insertion_point(field_mutable:skissm.GroupPreKeyPayload.group_members)
  return group_members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::GroupMember >*
GroupPreKeyPayload::mutable_group_members() {
  // @@protoc_insertion_point(field_mutable_list:skissm.GroupPreKeyPayload.group_members)
  return &group_members_;
}
inline const ::skissm::GroupMember& GroupPreKeyPayload::_internal_group_members(int index) const {
  return group_members_.Get(index);
}
inline const ::skissm::GroupMember& GroupPreKeyPayload::group_members(int index) const {
  // @@protoc_insertion_point(field_get:skissm.GroupPreKeyPayload.group_members)
  return _internal_group_members(index);
}
inline ::skissm::GroupMember* GroupPreKeyPayload::_internal_add_group_members() {
  return group_members_.Add();
}
inline ::skissm::GroupMember* GroupPreKeyPayload::add_group_members() {
  ::skissm::GroupMember* _add = _internal_add_group_members();
  // @@protoc_insertion_point(field_add:skissm.GroupPreKeyPayload.group_members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::GroupMember >&
GroupPreKeyPayload::group_members() const {
  // @@protoc_insertion_point(field_list:skissm.GroupPreKeyPayload.group_members)
  return group_members_;
}

// uint32 sequence = 6;
inline void GroupPreKeyPayload::clear_sequence() {
  sequence_ = 0u;
}
inline uint32_t GroupPreKeyPayload::_internal_sequence() const {
  return sequence_;
}
inline uint32_t GroupPreKeyPayload::sequence() const {
  // @@protoc_insertion_point(field_get:skissm.GroupPreKeyPayload.sequence)
  return _internal_sequence();
}
inline void GroupPreKeyPayload::_internal_set_sequence(uint32_t value) {
  
  sequence_ = value;
}
inline void GroupPreKeyPayload::set_sequence(uint32_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:skissm.GroupPreKeyPayload.sequence)
}

// bytes chain_key = 7;
inline void GroupPreKeyPayload::clear_chain_key() {
  chain_key_.ClearToEmpty();
}
inline const std::string& GroupPreKeyPayload::chain_key() const {
  // @@protoc_insertion_point(field_get:skissm.GroupPreKeyPayload.chain_key)
  return _internal_chain_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupPreKeyPayload::set_chain_key(ArgT0&& arg0, ArgT... args) {
 
 chain_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.GroupPreKeyPayload.chain_key)
}
inline std::string* GroupPreKeyPayload::mutable_chain_key() {
  std::string* _s = _internal_mutable_chain_key();
  // @@protoc_insertion_point(field_mutable:skissm.GroupPreKeyPayload.chain_key)
  return _s;
}
inline const std::string& GroupPreKeyPayload::_internal_chain_key() const {
  return chain_key_.Get();
}
inline void GroupPreKeyPayload::_internal_set_chain_key(const std::string& value) {
  
  chain_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GroupPreKeyPayload::_internal_mutable_chain_key() {
  
  return chain_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GroupPreKeyPayload::release_chain_key() {
  // @@protoc_insertion_point(field_release:skissm.GroupPreKeyPayload.chain_key)
  return chain_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GroupPreKeyPayload::set_allocated_chain_key(std::string* chain_key) {
  if (chain_key != nullptr) {
    
  } else {
    
  }
  chain_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chain_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chain_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.GroupPreKeyPayload.chain_key)
}

// bytes signature_public_key = 8;
inline void GroupPreKeyPayload::clear_signature_public_key() {
  signature_public_key_.ClearToEmpty();
}
inline const std::string& GroupPreKeyPayload::signature_public_key() const {
  // @@protoc_insertion_point(field_get:skissm.GroupPreKeyPayload.signature_public_key)
  return _internal_signature_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupPreKeyPayload::set_signature_public_key(ArgT0&& arg0, ArgT... args) {
 
 signature_public_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.GroupPreKeyPayload.signature_public_key)
}
inline std::string* GroupPreKeyPayload::mutable_signature_public_key() {
  std::string* _s = _internal_mutable_signature_public_key();
  // @@protoc_insertion_point(field_mutable:skissm.GroupPreKeyPayload.signature_public_key)
  return _s;
}
inline const std::string& GroupPreKeyPayload::_internal_signature_public_key() const {
  return signature_public_key_.Get();
}
inline void GroupPreKeyPayload::_internal_set_signature_public_key(const std::string& value) {
  
  signature_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GroupPreKeyPayload::_internal_mutable_signature_public_key() {
  
  return signature_public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GroupPreKeyPayload::release_signature_public_key() {
  // @@protoc_insertion_point(field_release:skissm.GroupPreKeyPayload.signature_public_key)
  return signature_public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GroupPreKeyPayload::set_allocated_signature_public_key(std::string* signature_public_key) {
  if (signature_public_key != nullptr) {
    
  } else {
    
  }
  signature_public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature_public_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_public_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.GroupPreKeyPayload.signature_public_key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace skissm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skissm_2fGroupPreKeyPayload_2eproto
