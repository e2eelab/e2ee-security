// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/PreKeyBundle.proto

#include "skissm/PreKeyBundle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace skissm {
constexpr PreKeyBundle::PreKeyBundle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : e2ee_pack_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , peer_address_(nullptr)
  , identity_key_public_(nullptr)
  , signed_pre_key_public_(nullptr)
  , one_time_pre_key_public_(nullptr){}
struct PreKeyBundleDefaultTypeInternal {
  constexpr PreKeyBundleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreKeyBundleDefaultTypeInternal() {}
  union {
    PreKeyBundle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreKeyBundleDefaultTypeInternal _PreKeyBundle_default_instance_;
}  // namespace skissm
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skissm_2fPreKeyBundle_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skissm_2fPreKeyBundle_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fPreKeyBundle_2eproto = nullptr;

const uint32_t TableStruct_skissm_2fPreKeyBundle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skissm::PreKeyBundle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skissm::PreKeyBundle, peer_address_),
  PROTOBUF_FIELD_OFFSET(::skissm::PreKeyBundle, e2ee_pack_id_),
  PROTOBUF_FIELD_OFFSET(::skissm::PreKeyBundle, identity_key_public_),
  PROTOBUF_FIELD_OFFSET(::skissm::PreKeyBundle, signed_pre_key_public_),
  PROTOBUF_FIELD_OFFSET(::skissm::PreKeyBundle, one_time_pre_key_public_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::skissm::PreKeyBundle)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skissm::_PreKeyBundle_default_instance_),
};

const char descriptor_table_protodef_skissm_2fPreKeyBundle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031skissm/PreKeyBundle.proto\022\006skissm\032\030ski"
  "ssm/E2eeAddress.proto\032\036skissm/IdentityKe"
  "yPublic.proto\032\037skissm/SignedPreKeyPublic"
  ".proto\032 skissm/OneTimePreKeyPublic.proto"
  "\"\200\002\n\014PreKeyBundle\022)\n\014peer_address\030\001 \001(\0132"
  "\023.skissm.E2eeAddress\022\024\n\014e2ee_pack_id\030\002 \001"
  "(\t\0226\n\023identity_key_public\030\003 \001(\0132\031.skissm"
  ".IdentityKeyPublic\0229\n\025signed_pre_key_pub"
  "lic\030\004 \001(\0132\032.skissm.SignedPreKeyPublic\022<\n"
  "\027one_time_pre_key_public\030\005 \001(\0132\033.skissm."
  "OneTimePreKeyPublicB-\n\030org.e2eelab.skiss"
  "m.protoB\021PreKeyBundleProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skissm_2fPreKeyBundle_2eproto_deps[4] = {
  &::descriptor_table_skissm_2fE2eeAddress_2eproto,
  &::descriptor_table_skissm_2fIdentityKeyPublic_2eproto,
  &::descriptor_table_skissm_2fOneTimePreKeyPublic_2eproto,
  &::descriptor_table_skissm_2fSignedPreKeyPublic_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fPreKeyBundle_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fPreKeyBundle_2eproto = {
  false, false, 474, descriptor_table_protodef_skissm_2fPreKeyBundle_2eproto, "skissm/PreKeyBundle.proto", 
  &descriptor_table_skissm_2fPreKeyBundle_2eproto_once, descriptor_table_skissm_2fPreKeyBundle_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_skissm_2fPreKeyBundle_2eproto::offsets,
  file_level_metadata_skissm_2fPreKeyBundle_2eproto, file_level_enum_descriptors_skissm_2fPreKeyBundle_2eproto, file_level_service_descriptors_skissm_2fPreKeyBundle_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fPreKeyBundle_2eproto_getter() {
  return &descriptor_table_skissm_2fPreKeyBundle_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fPreKeyBundle_2eproto(&descriptor_table_skissm_2fPreKeyBundle_2eproto);
namespace skissm {

// ===================================================================

class PreKeyBundle::_Internal {
 public:
  static const ::skissm::E2eeAddress& peer_address(const PreKeyBundle* msg);
  static const ::skissm::IdentityKeyPublic& identity_key_public(const PreKeyBundle* msg);
  static const ::skissm::SignedPreKeyPublic& signed_pre_key_public(const PreKeyBundle* msg);
  static const ::skissm::OneTimePreKeyPublic& one_time_pre_key_public(const PreKeyBundle* msg);
};

const ::skissm::E2eeAddress&
PreKeyBundle::_Internal::peer_address(const PreKeyBundle* msg) {
  return *msg->peer_address_;
}
const ::skissm::IdentityKeyPublic&
PreKeyBundle::_Internal::identity_key_public(const PreKeyBundle* msg) {
  return *msg->identity_key_public_;
}
const ::skissm::SignedPreKeyPublic&
PreKeyBundle::_Internal::signed_pre_key_public(const PreKeyBundle* msg) {
  return *msg->signed_pre_key_public_;
}
const ::skissm::OneTimePreKeyPublic&
PreKeyBundle::_Internal::one_time_pre_key_public(const PreKeyBundle* msg) {
  return *msg->one_time_pre_key_public_;
}
void PreKeyBundle::clear_peer_address() {
  if (GetArenaForAllocation() == nullptr && peer_address_ != nullptr) {
    delete peer_address_;
  }
  peer_address_ = nullptr;
}
void PreKeyBundle::clear_identity_key_public() {
  if (GetArenaForAllocation() == nullptr && identity_key_public_ != nullptr) {
    delete identity_key_public_;
  }
  identity_key_public_ = nullptr;
}
void PreKeyBundle::clear_signed_pre_key_public() {
  if (GetArenaForAllocation() == nullptr && signed_pre_key_public_ != nullptr) {
    delete signed_pre_key_public_;
  }
  signed_pre_key_public_ = nullptr;
}
void PreKeyBundle::clear_one_time_pre_key_public() {
  if (GetArenaForAllocation() == nullptr && one_time_pre_key_public_ != nullptr) {
    delete one_time_pre_key_public_;
  }
  one_time_pre_key_public_ = nullptr;
}
PreKeyBundle::PreKeyBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:skissm.PreKeyBundle)
}
PreKeyBundle::PreKeyBundle(const PreKeyBundle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  e2ee_pack_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e2ee_pack_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e2ee_pack_id().empty()) {
    e2ee_pack_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_e2ee_pack_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_peer_address()) {
    peer_address_ = new ::skissm::E2eeAddress(*from.peer_address_);
  } else {
    peer_address_ = nullptr;
  }
  if (from._internal_has_identity_key_public()) {
    identity_key_public_ = new ::skissm::IdentityKeyPublic(*from.identity_key_public_);
  } else {
    identity_key_public_ = nullptr;
  }
  if (from._internal_has_signed_pre_key_public()) {
    signed_pre_key_public_ = new ::skissm::SignedPreKeyPublic(*from.signed_pre_key_public_);
  } else {
    signed_pre_key_public_ = nullptr;
  }
  if (from._internal_has_one_time_pre_key_public()) {
    one_time_pre_key_public_ = new ::skissm::OneTimePreKeyPublic(*from.one_time_pre_key_public_);
  } else {
    one_time_pre_key_public_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:skissm.PreKeyBundle)
}

inline void PreKeyBundle::SharedCtor() {
e2ee_pack_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e2ee_pack_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&peer_address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&one_time_pre_key_public_) -
    reinterpret_cast<char*>(&peer_address_)) + sizeof(one_time_pre_key_public_));
}

PreKeyBundle::~PreKeyBundle() {
  // @@protoc_insertion_point(destructor:skissm.PreKeyBundle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PreKeyBundle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  e2ee_pack_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete peer_address_;
  if (this != internal_default_instance()) delete identity_key_public_;
  if (this != internal_default_instance()) delete signed_pre_key_public_;
  if (this != internal_default_instance()) delete one_time_pre_key_public_;
}

void PreKeyBundle::ArenaDtor(void* object) {
  PreKeyBundle* _this = reinterpret_cast< PreKeyBundle* >(object);
  (void)_this;
}
void PreKeyBundle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreKeyBundle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreKeyBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:skissm.PreKeyBundle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  e2ee_pack_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && peer_address_ != nullptr) {
    delete peer_address_;
  }
  peer_address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && identity_key_public_ != nullptr) {
    delete identity_key_public_;
  }
  identity_key_public_ = nullptr;
  if (GetArenaForAllocation() == nullptr && signed_pre_key_public_ != nullptr) {
    delete signed_pre_key_public_;
  }
  signed_pre_key_public_ = nullptr;
  if (GetArenaForAllocation() == nullptr && one_time_pre_key_public_ != nullptr) {
    delete one_time_pre_key_public_;
  }
  one_time_pre_key_public_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreKeyBundle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .skissm.E2eeAddress peer_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string e2ee_pack_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_e2ee_pack_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.PreKeyBundle.e2ee_pack_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.IdentityKeyPublic identity_key_public = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_identity_key_public(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.SignedPreKeyPublic signed_pre_key_public = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_signed_pre_key_public(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.OneTimePreKeyPublic one_time_pre_key_public = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_one_time_pre_key_public(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreKeyBundle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skissm.PreKeyBundle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .skissm.E2eeAddress peer_address = 1;
  if (this->_internal_has_peer_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer_address(this), target, stream);
  }

  // string e2ee_pack_id = 2;
  if (!this->_internal_e2ee_pack_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_e2ee_pack_id().data(), static_cast<int>(this->_internal_e2ee_pack_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.PreKeyBundle.e2ee_pack_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_e2ee_pack_id(), target);
  }

  // .skissm.IdentityKeyPublic identity_key_public = 3;
  if (this->_internal_has_identity_key_public()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::identity_key_public(this), target, stream);
  }

  // .skissm.SignedPreKeyPublic signed_pre_key_public = 4;
  if (this->_internal_has_signed_pre_key_public()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::signed_pre_key_public(this), target, stream);
  }

  // .skissm.OneTimePreKeyPublic one_time_pre_key_public = 5;
  if (this->_internal_has_one_time_pre_key_public()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::one_time_pre_key_public(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skissm.PreKeyBundle)
  return target;
}

size_t PreKeyBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skissm.PreKeyBundle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string e2ee_pack_id = 2;
  if (!this->_internal_e2ee_pack_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_e2ee_pack_id());
  }

  // .skissm.E2eeAddress peer_address = 1;
  if (this->_internal_has_peer_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_address_);
  }

  // .skissm.IdentityKeyPublic identity_key_public = 3;
  if (this->_internal_has_identity_key_public()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identity_key_public_);
  }

  // .skissm.SignedPreKeyPublic signed_pre_key_public = 4;
  if (this->_internal_has_signed_pre_key_public()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signed_pre_key_public_);
  }

  // .skissm.OneTimePreKeyPublic one_time_pre_key_public = 5;
  if (this->_internal_has_one_time_pre_key_public()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *one_time_pre_key_public_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreKeyBundle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PreKeyBundle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreKeyBundle::GetClassData() const { return &_class_data_; }

void PreKeyBundle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PreKeyBundle *>(to)->MergeFrom(
      static_cast<const PreKeyBundle &>(from));
}


void PreKeyBundle::MergeFrom(const PreKeyBundle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skissm.PreKeyBundle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_e2ee_pack_id().empty()) {
    _internal_set_e2ee_pack_id(from._internal_e2ee_pack_id());
  }
  if (from._internal_has_peer_address()) {
    _internal_mutable_peer_address()->::skissm::E2eeAddress::MergeFrom(from._internal_peer_address());
  }
  if (from._internal_has_identity_key_public()) {
    _internal_mutable_identity_key_public()->::skissm::IdentityKeyPublic::MergeFrom(from._internal_identity_key_public());
  }
  if (from._internal_has_signed_pre_key_public()) {
    _internal_mutable_signed_pre_key_public()->::skissm::SignedPreKeyPublic::MergeFrom(from._internal_signed_pre_key_public());
  }
  if (from._internal_has_one_time_pre_key_public()) {
    _internal_mutable_one_time_pre_key_public()->::skissm::OneTimePreKeyPublic::MergeFrom(from._internal_one_time_pre_key_public());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreKeyBundle::CopyFrom(const PreKeyBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skissm.PreKeyBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreKeyBundle::IsInitialized() const {
  return true;
}

void PreKeyBundle::InternalSwap(PreKeyBundle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &e2ee_pack_id_, lhs_arena,
      &other->e2ee_pack_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PreKeyBundle, one_time_pre_key_public_)
      + sizeof(PreKeyBundle::one_time_pre_key_public_)
      - PROTOBUF_FIELD_OFFSET(PreKeyBundle, peer_address_)>(
          reinterpret_cast<char*>(&peer_address_),
          reinterpret_cast<char*>(&other->peer_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PreKeyBundle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fPreKeyBundle_2eproto_getter, &descriptor_table_skissm_2fPreKeyBundle_2eproto_once,
      file_level_metadata_skissm_2fPreKeyBundle_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skissm::PreKeyBundle* Arena::CreateMaybeMessage< ::skissm::PreKeyBundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skissm::PreKeyBundle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
