// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/Account.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skissm_2fAccount_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skissm_2fAccount_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "skissm/E2eeAddress.pb.h"
#include "skissm/IdentityKey.pb.h"
#include "skissm/SignedPreKey.pb.h"
#include "skissm/OneTimePreKey.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skissm_2fAccount_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skissm_2fAccount_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fAccount_2eproto;
namespace skissm {
class Account;
struct AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> ::skissm::Account* Arena::CreateMaybeMessage<::skissm::Account>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace skissm {

// ===================================================================

class Account final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skissm.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  ~Account() override;
  explicit constexpr Account(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Account& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Account& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skissm.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOneTimePreKeysFieldNumber = 9,
    kVersionFieldNumber = 1,
    kPasswordFieldNumber = 5,
    kE2EePackIdFieldNumber = 6,
    kAddressFieldNumber = 4,
    kIdentityKeyFieldNumber = 7,
    kSignedPreKeyFieldNumber = 8,
    kAccountIdFieldNumber = 2,
    kSavedFieldNumber = 3,
    kNextOneTimePreKeyIdFieldNumber = 10,
  };
  // repeated .skissm.OneTimePreKey one_time_pre_keys = 9;
  int one_time_pre_keys_size() const;
  private:
  int _internal_one_time_pre_keys_size() const;
  public:
  void clear_one_time_pre_keys();
  ::skissm::OneTimePreKey* mutable_one_time_pre_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::OneTimePreKey >*
      mutable_one_time_pre_keys();
  private:
  const ::skissm::OneTimePreKey& _internal_one_time_pre_keys(int index) const;
  ::skissm::OneTimePreKey* _internal_add_one_time_pre_keys();
  public:
  const ::skissm::OneTimePreKey& one_time_pre_keys(int index) const;
  ::skissm::OneTimePreKey* add_one_time_pre_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::OneTimePreKey >&
      one_time_pre_keys() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string password = 5;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string e2ee_pack_id = 6;
  void clear_e2ee_pack_id();
  const std::string& e2ee_pack_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_e2ee_pack_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_e2ee_pack_id();
  PROTOBUF_NODISCARD std::string* release_e2ee_pack_id();
  void set_allocated_e2ee_pack_id(std::string* e2ee_pack_id);
  private:
  const std::string& _internal_e2ee_pack_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_e2ee_pack_id(const std::string& value);
  std::string* _internal_mutable_e2ee_pack_id();
  public:

  // .skissm.E2eeAddress address = 4;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::skissm::E2eeAddress& address() const;
  PROTOBUF_NODISCARD ::skissm::E2eeAddress* release_address();
  ::skissm::E2eeAddress* mutable_address();
  void set_allocated_address(::skissm::E2eeAddress* address);
  private:
  const ::skissm::E2eeAddress& _internal_address() const;
  ::skissm::E2eeAddress* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::skissm::E2eeAddress* address);
  ::skissm::E2eeAddress* unsafe_arena_release_address();

  // .skissm.IdentityKey identity_key = 7;
  bool has_identity_key() const;
  private:
  bool _internal_has_identity_key() const;
  public:
  void clear_identity_key();
  const ::skissm::IdentityKey& identity_key() const;
  PROTOBUF_NODISCARD ::skissm::IdentityKey* release_identity_key();
  ::skissm::IdentityKey* mutable_identity_key();
  void set_allocated_identity_key(::skissm::IdentityKey* identity_key);
  private:
  const ::skissm::IdentityKey& _internal_identity_key() const;
  ::skissm::IdentityKey* _internal_mutable_identity_key();
  public:
  void unsafe_arena_set_allocated_identity_key(
      ::skissm::IdentityKey* identity_key);
  ::skissm::IdentityKey* unsafe_arena_release_identity_key();

  // .skissm.SignedPreKey signed_pre_key = 8;
  bool has_signed_pre_key() const;
  private:
  bool _internal_has_signed_pre_key() const;
  public:
  void clear_signed_pre_key();
  const ::skissm::SignedPreKey& signed_pre_key() const;
  PROTOBUF_NODISCARD ::skissm::SignedPreKey* release_signed_pre_key();
  ::skissm::SignedPreKey* mutable_signed_pre_key();
  void set_allocated_signed_pre_key(::skissm::SignedPreKey* signed_pre_key);
  private:
  const ::skissm::SignedPreKey& _internal_signed_pre_key() const;
  ::skissm::SignedPreKey* _internal_mutable_signed_pre_key();
  public:
  void unsafe_arena_set_allocated_signed_pre_key(
      ::skissm::SignedPreKey* signed_pre_key);
  ::skissm::SignedPreKey* unsafe_arena_release_signed_pre_key();

  // uint64 account_id = 2;
  void clear_account_id();
  uint64_t account_id() const;
  void set_account_id(uint64_t value);
  private:
  uint64_t _internal_account_id() const;
  void _internal_set_account_id(uint64_t value);
  public:

  // bool saved = 3;
  void clear_saved();
  bool saved() const;
  void set_saved(bool value);
  private:
  bool _internal_saved() const;
  void _internal_set_saved(bool value);
  public:

  // uint32 next_one_time_pre_key_id = 10;
  void clear_next_one_time_pre_key_id();
  uint32_t next_one_time_pre_key_id() const;
  void set_next_one_time_pre_key_id(uint32_t value);
  private:
  uint32_t _internal_next_one_time_pre_key_id() const;
  void _internal_set_next_one_time_pre_key_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:skissm.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::OneTimePreKey > one_time_pre_keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr e2ee_pack_id_;
  ::skissm::E2eeAddress* address_;
  ::skissm::IdentityKey* identity_key_;
  ::skissm::SignedPreKey* signed_pre_key_;
  uint64_t account_id_;
  bool saved_;
  uint32_t next_one_time_pre_key_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skissm_2fAccount_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Account

// string version = 1;
inline void Account::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& Account::version() const {
  // @@protoc_insertion_point(field_get:skissm.Account.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.Account.version)
}
inline std::string* Account::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:skissm.Account.version)
  return _s;
}
inline const std::string& Account::_internal_version() const {
  return version_.Get();
}
inline void Account::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_version() {
  // @@protoc_insertion_point(field_release:skissm.Account.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Account::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.Account.version)
}

// uint64 account_id = 2;
inline void Account::clear_account_id() {
  account_id_ = uint64_t{0u};
}
inline uint64_t Account::_internal_account_id() const {
  return account_id_;
}
inline uint64_t Account::account_id() const {
  // @@protoc_insertion_point(field_get:skissm.Account.account_id)
  return _internal_account_id();
}
inline void Account::_internal_set_account_id(uint64_t value) {
  
  account_id_ = value;
}
inline void Account::set_account_id(uint64_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:skissm.Account.account_id)
}

// bool saved = 3;
inline void Account::clear_saved() {
  saved_ = false;
}
inline bool Account::_internal_saved() const {
  return saved_;
}
inline bool Account::saved() const {
  // @@protoc_insertion_point(field_get:skissm.Account.saved)
  return _internal_saved();
}
inline void Account::_internal_set_saved(bool value) {
  
  saved_ = value;
}
inline void Account::set_saved(bool value) {
  _internal_set_saved(value);
  // @@protoc_insertion_point(field_set:skissm.Account.saved)
}

// .skissm.E2eeAddress address = 4;
inline bool Account::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool Account::has_address() const {
  return _internal_has_address();
}
inline const ::skissm::E2eeAddress& Account::_internal_address() const {
  const ::skissm::E2eeAddress* p = address_;
  return p != nullptr ? *p : reinterpret_cast<const ::skissm::E2eeAddress&>(
      ::skissm::_E2eeAddress_default_instance_);
}
inline const ::skissm::E2eeAddress& Account::address() const {
  // @@protoc_insertion_point(field_get:skissm.Account.address)
  return _internal_address();
}
inline void Account::unsafe_arena_set_allocated_address(
    ::skissm::E2eeAddress* address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:skissm.Account.address)
}
inline ::skissm::E2eeAddress* Account::release_address() {
  
  ::skissm::E2eeAddress* temp = address_;
  address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::skissm::E2eeAddress* Account::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:skissm.Account.address)
  
  ::skissm::E2eeAddress* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::skissm::E2eeAddress* Account::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::skissm::E2eeAddress>(GetArenaForAllocation());
    address_ = p;
  }
  return address_;
}
inline ::skissm::E2eeAddress* Account::mutable_address() {
  ::skissm::E2eeAddress* _msg = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:skissm.Account.address)
  return _msg;
}
inline void Account::set_allocated_address(::skissm::E2eeAddress* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address));
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:skissm.Account.address)
}

// string password = 5;
inline void Account::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& Account::password() const {
  // @@protoc_insertion_point(field_get:skissm.Account.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.Account.password)
}
inline std::string* Account::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:skissm.Account.password)
  return _s;
}
inline const std::string& Account::_internal_password() const {
  return password_.Get();
}
inline void Account::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_password() {
  // @@protoc_insertion_point(field_release:skissm.Account.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Account::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.Account.password)
}

// string e2ee_pack_id = 6;
inline void Account::clear_e2ee_pack_id() {
  e2ee_pack_id_.ClearToEmpty();
}
inline const std::string& Account::e2ee_pack_id() const {
  // @@protoc_insertion_point(field_get:skissm.Account.e2ee_pack_id)
  return _internal_e2ee_pack_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_e2ee_pack_id(ArgT0&& arg0, ArgT... args) {
 
 e2ee_pack_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skissm.Account.e2ee_pack_id)
}
inline std::string* Account::mutable_e2ee_pack_id() {
  std::string* _s = _internal_mutable_e2ee_pack_id();
  // @@protoc_insertion_point(field_mutable:skissm.Account.e2ee_pack_id)
  return _s;
}
inline const std::string& Account::_internal_e2ee_pack_id() const {
  return e2ee_pack_id_.Get();
}
inline void Account::_internal_set_e2ee_pack_id(const std::string& value) {
  
  e2ee_pack_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_e2ee_pack_id() {
  
  return e2ee_pack_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_e2ee_pack_id() {
  // @@protoc_insertion_point(field_release:skissm.Account.e2ee_pack_id)
  return e2ee_pack_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Account::set_allocated_e2ee_pack_id(std::string* e2ee_pack_id) {
  if (e2ee_pack_id != nullptr) {
    
  } else {
    
  }
  e2ee_pack_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), e2ee_pack_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (e2ee_pack_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    e2ee_pack_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skissm.Account.e2ee_pack_id)
}

// .skissm.IdentityKey identity_key = 7;
inline bool Account::_internal_has_identity_key() const {
  return this != internal_default_instance() && identity_key_ != nullptr;
}
inline bool Account::has_identity_key() const {
  return _internal_has_identity_key();
}
inline const ::skissm::IdentityKey& Account::_internal_identity_key() const {
  const ::skissm::IdentityKey* p = identity_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::skissm::IdentityKey&>(
      ::skissm::_IdentityKey_default_instance_);
}
inline const ::skissm::IdentityKey& Account::identity_key() const {
  // @@protoc_insertion_point(field_get:skissm.Account.identity_key)
  return _internal_identity_key();
}
inline void Account::unsafe_arena_set_allocated_identity_key(
    ::skissm::IdentityKey* identity_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identity_key_);
  }
  identity_key_ = identity_key;
  if (identity_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:skissm.Account.identity_key)
}
inline ::skissm::IdentityKey* Account::release_identity_key() {
  
  ::skissm::IdentityKey* temp = identity_key_;
  identity_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::skissm::IdentityKey* Account::unsafe_arena_release_identity_key() {
  // @@protoc_insertion_point(field_release:skissm.Account.identity_key)
  
  ::skissm::IdentityKey* temp = identity_key_;
  identity_key_ = nullptr;
  return temp;
}
inline ::skissm::IdentityKey* Account::_internal_mutable_identity_key() {
  
  if (identity_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::skissm::IdentityKey>(GetArenaForAllocation());
    identity_key_ = p;
  }
  return identity_key_;
}
inline ::skissm::IdentityKey* Account::mutable_identity_key() {
  ::skissm::IdentityKey* _msg = _internal_mutable_identity_key();
  // @@protoc_insertion_point(field_mutable:skissm.Account.identity_key)
  return _msg;
}
inline void Account::set_allocated_identity_key(::skissm::IdentityKey* identity_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(identity_key_);
  }
  if (identity_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identity_key));
    if (message_arena != submessage_arena) {
      identity_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identity_key, submessage_arena);
    }
    
  } else {
    
  }
  identity_key_ = identity_key;
  // @@protoc_insertion_point(field_set_allocated:skissm.Account.identity_key)
}

// .skissm.SignedPreKey signed_pre_key = 8;
inline bool Account::_internal_has_signed_pre_key() const {
  return this != internal_default_instance() && signed_pre_key_ != nullptr;
}
inline bool Account::has_signed_pre_key() const {
  return _internal_has_signed_pre_key();
}
inline const ::skissm::SignedPreKey& Account::_internal_signed_pre_key() const {
  const ::skissm::SignedPreKey* p = signed_pre_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::skissm::SignedPreKey&>(
      ::skissm::_SignedPreKey_default_instance_);
}
inline const ::skissm::SignedPreKey& Account::signed_pre_key() const {
  // @@protoc_insertion_point(field_get:skissm.Account.signed_pre_key)
  return _internal_signed_pre_key();
}
inline void Account::unsafe_arena_set_allocated_signed_pre_key(
    ::skissm::SignedPreKey* signed_pre_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signed_pre_key_);
  }
  signed_pre_key_ = signed_pre_key;
  if (signed_pre_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:skissm.Account.signed_pre_key)
}
inline ::skissm::SignedPreKey* Account::release_signed_pre_key() {
  
  ::skissm::SignedPreKey* temp = signed_pre_key_;
  signed_pre_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::skissm::SignedPreKey* Account::unsafe_arena_release_signed_pre_key() {
  // @@protoc_insertion_point(field_release:skissm.Account.signed_pre_key)
  
  ::skissm::SignedPreKey* temp = signed_pre_key_;
  signed_pre_key_ = nullptr;
  return temp;
}
inline ::skissm::SignedPreKey* Account::_internal_mutable_signed_pre_key() {
  
  if (signed_pre_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::skissm::SignedPreKey>(GetArenaForAllocation());
    signed_pre_key_ = p;
  }
  return signed_pre_key_;
}
inline ::skissm::SignedPreKey* Account::mutable_signed_pre_key() {
  ::skissm::SignedPreKey* _msg = _internal_mutable_signed_pre_key();
  // @@protoc_insertion_point(field_mutable:skissm.Account.signed_pre_key)
  return _msg;
}
inline void Account::set_allocated_signed_pre_key(::skissm::SignedPreKey* signed_pre_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signed_pre_key_);
  }
  if (signed_pre_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signed_pre_key));
    if (message_arena != submessage_arena) {
      signed_pre_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signed_pre_key, submessage_arena);
    }
    
  } else {
    
  }
  signed_pre_key_ = signed_pre_key;
  // @@protoc_insertion_point(field_set_allocated:skissm.Account.signed_pre_key)
}

// repeated .skissm.OneTimePreKey one_time_pre_keys = 9;
inline int Account::_internal_one_time_pre_keys_size() const {
  return one_time_pre_keys_.size();
}
inline int Account::one_time_pre_keys_size() const {
  return _internal_one_time_pre_keys_size();
}
inline ::skissm::OneTimePreKey* Account::mutable_one_time_pre_keys(int index) {
  // @@protoc_insertion_point(field_mutable:skissm.Account.one_time_pre_keys)
  return one_time_pre_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::OneTimePreKey >*
Account::mutable_one_time_pre_keys() {
  // @@protoc_insertion_point(field_mutable_list:skissm.Account.one_time_pre_keys)
  return &one_time_pre_keys_;
}
inline const ::skissm::OneTimePreKey& Account::_internal_one_time_pre_keys(int index) const {
  return one_time_pre_keys_.Get(index);
}
inline const ::skissm::OneTimePreKey& Account::one_time_pre_keys(int index) const {
  // @@protoc_insertion_point(field_get:skissm.Account.one_time_pre_keys)
  return _internal_one_time_pre_keys(index);
}
inline ::skissm::OneTimePreKey* Account::_internal_add_one_time_pre_keys() {
  return one_time_pre_keys_.Add();
}
inline ::skissm::OneTimePreKey* Account::add_one_time_pre_keys() {
  ::skissm::OneTimePreKey* _add = _internal_add_one_time_pre_keys();
  // @@protoc_insertion_point(field_add:skissm.Account.one_time_pre_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skissm::OneTimePreKey >&
Account::one_time_pre_keys() const {
  // @@protoc_insertion_point(field_list:skissm.Account.one_time_pre_keys)
  return one_time_pre_keys_;
}

// uint32 next_one_time_pre_key_id = 10;
inline void Account::clear_next_one_time_pre_key_id() {
  next_one_time_pre_key_id_ = 0u;
}
inline uint32_t Account::_internal_next_one_time_pre_key_id() const {
  return next_one_time_pre_key_id_;
}
inline uint32_t Account::next_one_time_pre_key_id() const {
  // @@protoc_insertion_point(field_get:skissm.Account.next_one_time_pre_key_id)
  return _internal_next_one_time_pre_key_id();
}
inline void Account::_internal_set_next_one_time_pre_key_id(uint32_t value) {
  
  next_one_time_pre_key_id_ = value;
}
inline void Account::set_next_one_time_pre_key_id(uint32_t value) {
  _internal_set_next_one_time_pre_key_id(value);
  // @@protoc_insertion_point(field_set:skissm.Account.next_one_time_pre_key_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace skissm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skissm_2fAccount_2eproto
