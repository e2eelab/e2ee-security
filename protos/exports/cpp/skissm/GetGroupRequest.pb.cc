// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/GetGroupRequest.proto

#include "skissm/GetGroupRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace skissm {
constexpr GetGroupRequest::GetGroupRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_address_(nullptr){}
struct GetGroupRequestDefaultTypeInternal {
  constexpr GetGroupRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetGroupRequestDefaultTypeInternal() {}
  union {
    GetGroupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetGroupRequestDefaultTypeInternal _GetGroupRequest_default_instance_;
}  // namespace skissm
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skissm_2fGetGroupRequest_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skissm_2fGetGroupRequest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fGetGroupRequest_2eproto = nullptr;

const uint32_t TableStruct_skissm_2fGetGroupRequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skissm::GetGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skissm::GetGroupRequest, group_address_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::skissm::GetGroupRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skissm::_GetGroupRequest_default_instance_),
};

const char descriptor_table_protodef_skissm_2fGetGroupRequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034skissm/GetGroupRequest.proto\022\006skissm\032\030"
  "skissm/E2eeAddress.proto\"=\n\017GetGroupRequ"
  "est\022*\n\rgroup_address\030\001 \001(\0132\023.skissm.E2ee"
  "AddressB0\n\030org.e2eelab.skissm.protoB\024Get"
  "GroupRequestProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skissm_2fGetGroupRequest_2eproto_deps[1] = {
  &::descriptor_table_skissm_2fE2eeAddress_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fGetGroupRequest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fGetGroupRequest_2eproto = {
  false, false, 185, descriptor_table_protodef_skissm_2fGetGroupRequest_2eproto, "skissm/GetGroupRequest.proto", 
  &descriptor_table_skissm_2fGetGroupRequest_2eproto_once, descriptor_table_skissm_2fGetGroupRequest_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_skissm_2fGetGroupRequest_2eproto::offsets,
  file_level_metadata_skissm_2fGetGroupRequest_2eproto, file_level_enum_descriptors_skissm_2fGetGroupRequest_2eproto, file_level_service_descriptors_skissm_2fGetGroupRequest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fGetGroupRequest_2eproto_getter() {
  return &descriptor_table_skissm_2fGetGroupRequest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fGetGroupRequest_2eproto(&descriptor_table_skissm_2fGetGroupRequest_2eproto);
namespace skissm {

// ===================================================================

class GetGroupRequest::_Internal {
 public:
  static const ::skissm::E2eeAddress& group_address(const GetGroupRequest* msg);
};

const ::skissm::E2eeAddress&
GetGroupRequest::_Internal::group_address(const GetGroupRequest* msg) {
  return *msg->group_address_;
}
void GetGroupRequest::clear_group_address() {
  if (GetArenaForAllocation() == nullptr && group_address_ != nullptr) {
    delete group_address_;
  }
  group_address_ = nullptr;
}
GetGroupRequest::GetGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:skissm.GetGroupRequest)
}
GetGroupRequest::GetGroupRequest(const GetGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_address()) {
    group_address_ = new ::skissm::E2eeAddress(*from.group_address_);
  } else {
    group_address_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:skissm.GetGroupRequest)
}

inline void GetGroupRequest::SharedCtor() {
group_address_ = nullptr;
}

GetGroupRequest::~GetGroupRequest() {
  // @@protoc_insertion_point(destructor:skissm.GetGroupRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete group_address_;
}

void GetGroupRequest::ArenaDtor(void* object) {
  GetGroupRequest* _this = reinterpret_cast< GetGroupRequest* >(object);
  (void)_this;
}
void GetGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:skissm.GetGroupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && group_address_ != nullptr) {
    delete group_address_;
  }
  group_address_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .skissm.E2eeAddress group_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetGroupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skissm.GetGroupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .skissm.E2eeAddress group_address = 1;
  if (this->_internal_has_group_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::group_address(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skissm.GetGroupRequest)
  return target;
}

size_t GetGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skissm.GetGroupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .skissm.E2eeAddress group_address = 1;
  if (this->_internal_has_group_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_address_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetGroupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetGroupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetGroupRequest::GetClassData() const { return &_class_data_; }

void GetGroupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetGroupRequest *>(to)->MergeFrom(
      static_cast<const GetGroupRequest &>(from));
}


void GetGroupRequest::MergeFrom(const GetGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skissm.GetGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_group_address()) {
    _internal_mutable_group_address()->::skissm::E2eeAddress::MergeFrom(from._internal_group_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetGroupRequest::CopyFrom(const GetGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skissm.GetGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupRequest::IsInitialized() const {
  return true;
}

void GetGroupRequest::InternalSwap(GetGroupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(group_address_, other->group_address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGroupRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fGetGroupRequest_2eproto_getter, &descriptor_table_skissm_2fGetGroupRequest_2eproto_once,
      file_level_metadata_skissm_2fGetGroupRequest_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skissm::GetGroupRequest* Arena::CreateMaybeMessage< ::skissm::GetGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skissm::GetGroupRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
