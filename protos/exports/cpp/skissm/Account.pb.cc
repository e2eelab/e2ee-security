// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skissm/Account.proto

#include "skissm/Account.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace skissm {
constexpr Account::Account(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : one_time_pre_keys_()
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , e2ee_pack_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(nullptr)
  , identity_key_(nullptr)
  , signed_pre_key_(nullptr)
  , account_id_(uint64_t{0u})
  , saved_(false)
  , next_one_time_pre_key_id_(0u){}
struct AccountDefaultTypeInternal {
  constexpr AccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountDefaultTypeInternal() {}
  union {
    Account _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountDefaultTypeInternal _Account_default_instance_;
}  // namespace skissm
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skissm_2fAccount_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skissm_2fAccount_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skissm_2fAccount_2eproto = nullptr;

const uint32_t TableStruct_skissm_2fAccount_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skissm::Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skissm::Account, version_),
  PROTOBUF_FIELD_OFFSET(::skissm::Account, account_id_),
  PROTOBUF_FIELD_OFFSET(::skissm::Account, saved_),
  PROTOBUF_FIELD_OFFSET(::skissm::Account, address_),
  PROTOBUF_FIELD_OFFSET(::skissm::Account, password_),
  PROTOBUF_FIELD_OFFSET(::skissm::Account, e2ee_pack_id_),
  PROTOBUF_FIELD_OFFSET(::skissm::Account, identity_key_),
  PROTOBUF_FIELD_OFFSET(::skissm::Account, signed_pre_key_),
  PROTOBUF_FIELD_OFFSET(::skissm::Account, one_time_pre_keys_),
  PROTOBUF_FIELD_OFFSET(::skissm::Account, next_one_time_pre_key_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::skissm::Account)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skissm::_Account_default_instance_),
};

const char descriptor_table_protodef_skissm_2fAccount_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024skissm/Account.proto\022\006skissm\032\030skissm/E"
  "2eeAddress.proto\032\030skissm/IdentityKey.pro"
  "to\032\031skissm/SignedPreKey.proto\032\032skissm/On"
  "eTimePreKey.proto\"\270\002\n\007Account\022\017\n\007version"
  "\030\001 \001(\t\022\022\n\naccount_id\030\002 \001(\004\022\r\n\005saved\030\003 \001("
  "\010\022$\n\007address\030\004 \001(\0132\023.skissm.E2eeAddress\022"
  "\020\n\010password\030\005 \001(\t\022\024\n\014e2ee_pack_id\030\006 \001(\t\022"
  ")\n\014identity_key\030\007 \001(\0132\023.skissm.IdentityK"
  "ey\022,\n\016signed_pre_key\030\010 \001(\0132\024.skissm.Sign"
  "edPreKey\0220\n\021one_time_pre_keys\030\t \003(\0132\025.sk"
  "issm.OneTimePreKey\022 \n\030next_one_time_pre_"
  "key_id\030\n \001(\rB(\n\030org.e2eelab.skissm.proto"
  "B\014AccountProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skissm_2fAccount_2eproto_deps[4] = {
  &::descriptor_table_skissm_2fE2eeAddress_2eproto,
  &::descriptor_table_skissm_2fIdentityKey_2eproto,
  &::descriptor_table_skissm_2fOneTimePreKey_2eproto,
  &::descriptor_table_skissm_2fSignedPreKey_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skissm_2fAccount_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skissm_2fAccount_2eproto = {
  false, false, 502, descriptor_table_protodef_skissm_2fAccount_2eproto, "skissm/Account.proto", 
  &descriptor_table_skissm_2fAccount_2eproto_once, descriptor_table_skissm_2fAccount_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_skissm_2fAccount_2eproto::offsets,
  file_level_metadata_skissm_2fAccount_2eproto, file_level_enum_descriptors_skissm_2fAccount_2eproto, file_level_service_descriptors_skissm_2fAccount_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_skissm_2fAccount_2eproto_getter() {
  return &descriptor_table_skissm_2fAccount_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_skissm_2fAccount_2eproto(&descriptor_table_skissm_2fAccount_2eproto);
namespace skissm {

// ===================================================================

class Account::_Internal {
 public:
  static const ::skissm::E2eeAddress& address(const Account* msg);
  static const ::skissm::IdentityKey& identity_key(const Account* msg);
  static const ::skissm::SignedPreKey& signed_pre_key(const Account* msg);
};

const ::skissm::E2eeAddress&
Account::_Internal::address(const Account* msg) {
  return *msg->address_;
}
const ::skissm::IdentityKey&
Account::_Internal::identity_key(const Account* msg) {
  return *msg->identity_key_;
}
const ::skissm::SignedPreKey&
Account::_Internal::signed_pre_key(const Account* msg) {
  return *msg->signed_pre_key_;
}
void Account::clear_address() {
  if (GetArenaForAllocation() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
void Account::clear_identity_key() {
  if (GetArenaForAllocation() == nullptr && identity_key_ != nullptr) {
    delete identity_key_;
  }
  identity_key_ = nullptr;
}
void Account::clear_signed_pre_key() {
  if (GetArenaForAllocation() == nullptr && signed_pre_key_ != nullptr) {
    delete signed_pre_key_;
  }
  signed_pre_key_ = nullptr;
}
void Account::clear_one_time_pre_keys() {
  one_time_pre_keys_.Clear();
}
Account::Account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  one_time_pre_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:skissm.Account)
}
Account::Account(const Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      one_time_pre_keys_(from.one_time_pre_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  e2ee_pack_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e2ee_pack_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e2ee_pack_id().empty()) {
    e2ee_pack_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_e2ee_pack_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_address()) {
    address_ = new ::skissm::E2eeAddress(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from._internal_has_identity_key()) {
    identity_key_ = new ::skissm::IdentityKey(*from.identity_key_);
  } else {
    identity_key_ = nullptr;
  }
  if (from._internal_has_signed_pre_key()) {
    signed_pre_key_ = new ::skissm::SignedPreKey(*from.signed_pre_key_);
  } else {
    signed_pre_key_ = nullptr;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_one_time_pre_key_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(next_one_time_pre_key_id_));
  // @@protoc_insertion_point(copy_constructor:skissm.Account)
}

inline void Account::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
e2ee_pack_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e2ee_pack_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&next_one_time_pre_key_id_) -
    reinterpret_cast<char*>(&address_)) + sizeof(next_one_time_pre_key_id_));
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:skissm.Account)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Account::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  e2ee_pack_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete identity_key_;
  if (this != internal_default_instance()) delete signed_pre_key_;
}

void Account::ArenaDtor(void* object) {
  Account* _this = reinterpret_cast< Account* >(object);
  (void)_this;
}
void Account::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:skissm.Account)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  one_time_pre_keys_.Clear();
  version_.ClearToEmpty();
  password_.ClearToEmpty();
  e2ee_pack_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && identity_key_ != nullptr) {
    delete identity_key_;
  }
  identity_key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && signed_pre_key_ != nullptr) {
    delete signed_pre_key_;
  }
  signed_pre_key_ = nullptr;
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_one_time_pre_key_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(next_one_time_pre_key_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.Account.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool saved = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          saved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.E2eeAddress address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.Account.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string e2ee_pack_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_e2ee_pack_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skissm.Account.e2ee_pack_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.IdentityKey identity_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_identity_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skissm.SignedPreKey signed_pre_key = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_signed_pre_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .skissm.OneTimePreKey one_time_pre_keys = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_one_time_pre_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 next_one_time_pre_key_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          next_one_time_pre_key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Account::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skissm.Account)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.Account.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // uint64 account_id = 2;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_account_id(), target);
  }

  // bool saved = 3;
  if (this->_internal_saved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_saved(), target);
  }

  // .skissm.E2eeAddress address = 4;
  if (this->_internal_has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::address(this), target, stream);
  }

  // string password = 5;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.Account.password");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_password(), target);
  }

  // string e2ee_pack_id = 6;
  if (!this->_internal_e2ee_pack_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_e2ee_pack_id().data(), static_cast<int>(this->_internal_e2ee_pack_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skissm.Account.e2ee_pack_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_e2ee_pack_id(), target);
  }

  // .skissm.IdentityKey identity_key = 7;
  if (this->_internal_has_identity_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::identity_key(this), target, stream);
  }

  // .skissm.SignedPreKey signed_pre_key = 8;
  if (this->_internal_has_signed_pre_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::signed_pre_key(this), target, stream);
  }

  // repeated .skissm.OneTimePreKey one_time_pre_keys = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_one_time_pre_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_one_time_pre_keys(i), target, stream);
  }

  // uint32 next_one_time_pre_key_id = 10;
  if (this->_internal_next_one_time_pre_key_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_next_one_time_pre_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skissm.Account)
  return target;
}

size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skissm.Account)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .skissm.OneTimePreKey one_time_pre_keys = 9;
  total_size += 1UL * this->_internal_one_time_pre_keys_size();
  for (const auto& msg : this->one_time_pre_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string password = 5;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string e2ee_pack_id = 6;
  if (!this->_internal_e2ee_pack_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_e2ee_pack_id());
  }

  // .skissm.E2eeAddress address = 4;
  if (this->_internal_has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // .skissm.IdentityKey identity_key = 7;
  if (this->_internal_has_identity_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identity_key_);
  }

  // .skissm.SignedPreKey signed_pre_key = 8;
  if (this->_internal_has_signed_pre_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signed_pre_key_);
  }

  // uint64 account_id = 2;
  if (this->_internal_account_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_account_id());
  }

  // bool saved = 3;
  if (this->_internal_saved() != 0) {
    total_size += 1 + 1;
  }

  // uint32 next_one_time_pre_key_id = 10;
  if (this->_internal_next_one_time_pre_key_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_next_one_time_pre_key_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Account::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Account::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Account::GetClassData() const { return &_class_data_; }

void Account::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Account *>(to)->MergeFrom(
      static_cast<const Account &>(from));
}


void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skissm.Account)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  one_time_pre_keys_.MergeFrom(from.one_time_pre_keys_);
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (!from._internal_e2ee_pack_id().empty()) {
    _internal_set_e2ee_pack_id(from._internal_e2ee_pack_id());
  }
  if (from._internal_has_address()) {
    _internal_mutable_address()->::skissm::E2eeAddress::MergeFrom(from._internal_address());
  }
  if (from._internal_has_identity_key()) {
    _internal_mutable_identity_key()->::skissm::IdentityKey::MergeFrom(from._internal_identity_key());
  }
  if (from._internal_has_signed_pre_key()) {
    _internal_mutable_signed_pre_key()->::skissm::SignedPreKey::MergeFrom(from._internal_signed_pre_key());
  }
  if (from._internal_account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_saved() != 0) {
    _internal_set_saved(from._internal_saved());
  }
  if (from._internal_next_one_time_pre_key_id() != 0) {
    _internal_set_next_one_time_pre_key_id(from._internal_next_one_time_pre_key_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skissm.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  return true;
}

void Account::InternalSwap(Account* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  one_time_pre_keys_.InternalSwap(&other->one_time_pre_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &e2ee_pack_id_, lhs_arena,
      &other->e2ee_pack_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Account, next_one_time_pre_key_id_)
      + sizeof(Account::next_one_time_pre_key_id_)
      - PROTOBUF_FIELD_OFFSET(Account, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Account::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_skissm_2fAccount_2eproto_getter, &descriptor_table_skissm_2fAccount_2eproto_once,
      file_level_metadata_skissm_2fAccount_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace skissm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skissm::Account* Arena::CreateMaybeMessage< ::skissm::Account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skissm::Account >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
